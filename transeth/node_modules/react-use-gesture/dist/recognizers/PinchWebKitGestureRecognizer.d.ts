import { TouchEvent } from 'react';
import DistanceAngleRecognizer from './DistanceAngleRecognizer';
import GestureController from '../controllers/GestureController';
import { TransformedEvent, ReactEventHandlerKey, GestureEvent, Fn } from '../types';
export default class PinchWebKitGestureRecognizer extends DistanceAngleRecognizer {
    constructor(controller: GestureController, args: any[]);
    onStart: (event: TransformedEvent<GestureEvent>) => void;
    onChange: (event: TransformedEvent<GestureEvent>) => void;
    onEnd: (event: TransformedEvent<TouchEvent<Element> | GestureEvent | import("react").MouseEvent<Element, MouseEvent> | import("react").WheelEvent<Element> | import("react").PointerEvent<Element>>) => void;
    onCancel: (event: TransformedEvent<TouchEvent<Element> | GestureEvent | import("react").MouseEvent<Element, MouseEvent> | import("react").WheelEvent<Element> | import("react").PointerEvent<Element>>) => void;
    updateTouchData: (event: TouchEvent<Element> & {
        transform?: import("../types").TransformType | undefined;
    }) => void;
    getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][];
}
