{"version":3,"file":"react-use-gesture.cjs.production.min.js","sources":["../src/types.ts","../src/utils.ts","../src/defaults.ts","../src/recognizers/Recognizer.ts","../src/recognizers/CoordinatesRecognizer.ts","../src/recognizers/DragRecognizer.ts","../src/recognizers/ScrollRecognizer.ts","../src/recognizers/WheelRecognizer.ts","../src/recognizers/MoveRecognizer.ts","../src/recognizers/HoverRecognizer.ts","../src/recognizers/DistanceAngleRecognizer.ts","../src/recognizers/PinchRecognizer.ts","../src/recognizers/PinchWheelRecognizer.ts","../src/recognizers/PinchWebKitGestureRecognizer.ts","../src/controllers/GestureController.ts","../src/index.ts"],"sourcesContent":["import React from 'react'\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\nexport type AtLeastOneOf<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U]\n\nexport type Vector2 = [number, number]\nexport type Fn = (...args: any[]) => any\nexport type TransformType = { x(x: number): number; y(y: number): number }\n\nexport type EventOptions = { capture: boolean; passive: boolean }\n\nexport interface GestureConfig {\n  domTarget?: EventTarget | React.RefObject<EventTarget> | null\n  event: EventOptions\n  window?: EventTarget | null\n  pointerEvents: boolean\n  transform: TransformType\n  enabled: boolean\n  drag: boolean\n  pinch: boolean\n  scroll: boolean\n  wheel: boolean\n  hover: boolean\n  move: boolean\n}\n\nexport enum GestureFlag {\n  OnStart = 'start',\n  OnChange = 'change',\n  OnEnd = 'end',\n}\n\nexport type GestureEvent = React.TouchEvent & { scale: number; rotation: number }\nexport type TransformedEvent<\n  T extends React.SyntheticEvent = React.MouseEvent | React.TouchEvent | React.WheelEvent | React.PointerEvent | GestureEvent\n> = T & {\n  transform?: TransformType\n}\n\nexport interface ReactEventHandlers {\n  // Mouse Events\n  onMouseDown?: React.MouseEventHandler\n  onMouseDownCapture?: React.MouseEventHandler\n  onMouseEnter?: React.MouseEventHandler\n  onMouseLeave?: React.MouseEventHandler\n  onMouseMove?: React.MouseEventHandler\n  onMouseMoveCapture?: React.MouseEventHandler\n  onMouseOut?: React.MouseEventHandler\n  onMouseOutCapture?: React.MouseEventHandler\n  onMouseOver?: React.MouseEventHandler\n  onMouseOverCapture?: React.MouseEventHandler\n  onMouseUp?: React.MouseEventHandler\n  onMouseUpCapture?: React.MouseEventHandler\n  // Touch Events\n  onTouchCancel?: React.TouchEventHandler\n  onTouchCancelCapture?: React.TouchEventHandler\n  onTouchEnd?: React.TouchEventHandler\n  onTouchEndCapture?: React.TouchEventHandler\n  onTouchMove?: React.TouchEventHandler\n  onTouchMoveCapture?: React.TouchEventHandler\n  onTouchStart?: React.TouchEventHandler\n  onTouchStartCapture?: React.TouchEventHandler\n\n  // Pointer Events\n  onPointerDown?: React.PointerEventHandler\n  onPointerDownCapture?: React.PointerEventHandler\n  onPointerMove?: React.PointerEventHandler\n  onPointerMoveCapture?: React.PointerEventHandler\n  onPointerUp?: React.PointerEventHandler\n  onPointerUpCapture?: React.PointerEventHandler\n  onPointerCancel?: React.PointerEventHandler\n  onPointerCancelCapture?: React.PointerEventHandler\n  onPointerEnter?: React.PointerEventHandler\n  onPointerEnterCapture?: React.PointerEventHandler\n  onPointerLeave?: React.PointerEventHandler\n  onPointerLeaveCapture?: React.PointerEventHandler\n  onPointerOver?: React.PointerEventHandler\n  onPointerOverCapture?: React.PointerEventHandler\n  onPointerOut?: React.PointerEventHandler\n  onPointerOutCapture?: React.PointerEventHandler\n  onGotPointerCapture?: React.PointerEventHandler\n  onGotPointerCaptureCapture?: React.PointerEventHandler\n  onLostPointerCapture?: React.PointerEventHandler\n  onLostPointerCaptureCapture?: React.PointerEventHandler\n\n  // UI Events\n  onScroll?: React.UIEventHandler\n  onScrollCapture?: React.UIEventHandler\n\n  // Wheel Events\n  onWheel?: React.WheelEventHandler\n  onWheelCapture?: React.WheelEventHandler\n\n  // Cheat mode for Gesture Events\n  onGestureStart?: Fn\n  onGestureChange?: Fn\n  onGestureEnd?: Fn\n}\n\nexport type ReactEventHandlerKey = keyof ReactEventHandlers\n\nexport type GestureKey = 'drag' | 'pinch' | 'move' | 'scroll' | 'wheel' | 'hover'\nexport type StateKey = Exclude<GestureKey, 'hover'>\n\nexport interface SharedGestureState {\n  hovering: boolean\n  scrolling: boolean\n  wheeling: boolean\n  dragging: boolean\n  moving: boolean\n  pinching: boolean\n  touches: number\n  down: boolean\n  buttons: number\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\nexport interface CommonGestureState {\n  event?: TransformedEvent\n  currentTarget?: EventTarget | null\n  pointerId?: number | null\n  values: Vector2\n  velocities: Vector2\n  delta: Vector2\n  initial: Vector2\n  previous: Vector2\n  transform?: TransformType\n  local: Vector2\n  lastLocal: Vector2\n  first: boolean\n  last: boolean\n  active: boolean\n  time?: number\n  cancel?(): void\n  canceled: boolean\n  memo?: any\n  temp?: any // TODO to be removed in future versions\n  args?: any\n}\n\nexport interface Coordinates {\n  xy: Vector2\n  velocity: number\n  vxvy: Vector2\n  distance: number\n  direction: Vector2\n}\n\nexport interface DistanceAngle {\n  da: Vector2\n  vdva: Vector2\n  origin: Vector2\n  turns: number\n}\n\nexport type GestureState<T extends Coordinates | DistanceAngle> = T & CommonGestureState\nexport type FullGestureState<T extends Coordinates | DistanceAngle> = SharedGestureState & GestureState<T>\n\nexport type StateObject = { shared: SharedGestureState } & { [K in StateKey]: GestureState<Coordinates | DistanceAngle> }\n\nexport type Handler<T extends Coordinates | DistanceAngle> = (state: FullGestureState<T>) => any | void\nexport type HandlerKey = 'onDrag' | 'onPinch' | 'onMove' | 'onHover' | 'onScroll' | 'onWheel'\n\nexport type GestureHandlers = {\n  onAction: Handler<Coordinates>\n  onDrag: Handler<Coordinates>\n  onDragStart: Handler<Coordinates>\n  onDragEnd: Handler<Coordinates>\n  onHover: Handler<Coordinates>\n  onMove: Handler<Coordinates>\n  onMoveStart: Handler<Coordinates>\n  onMoveEnd: Handler<Coordinates>\n  onScroll: Handler<Coordinates>\n  onScrollStart: Handler<Coordinates>\n  onScrollEnd: Handler<Coordinates>\n  onWheel: Handler<Coordinates>\n  onWheelStart: Handler<Coordinates>\n  onWheelEnd: Handler<Coordinates>\n  onPinch: Handler<DistanceAngle>\n  onPinchStart: Handler<DistanceAngle>\n  onPinchEnd: Handler<DistanceAngle>\n}\n\n/* Handlers should also accept DomAttributes to prevent overrides */\nexport type GestureHandlersPartial = AtLeastOneOf<GestureHandlers> &\n  Partial<Omit<React.DOMAttributes<Element>, 'onDrag' | 'onScroll' | 'onWheel'>>\n","import React from 'react'\nimport { Fn, Vector2, EventOptions, Coordinates, FullGestureState, DistanceAngle, TransformedEvent } from './types'\n\n// blank function\nexport const noop = () => {}\n\n// returns a function that chains all functions given as parameters\nexport const chainFns = (...fns: Fn[]): Fn => (...args: any[]) => fns.forEach(fn => fn(...args))\n\n// vector add\nexport const addV = <T extends number[]>(v1: T, v2: T): T => <T>v1.map((v, i) => v + v2[i])\n\n// vector substract\nexport const subV = <T extends number[]>(v1: T, v2: T): T => <T>v1.map((v, i) => v - v2[i])\n\nconst setListeners = (add: boolean) => (el: EventTarget, listeners: [string, Fn][], options: EventOptions): void => {\n  const action = add ? 'addEventListener' : 'removeEventListener'\n  listeners.forEach(([type, fn]) => el[action](type, fn, options))\n}\n\nexport const addListeners = setListeners(true)\nexport const removeListeners = setListeners(false)\n\ninterface ModifierKeys {\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\n/**\n * Gets modifier keys from event\n * @param event\n * @returns modifier keys\n */\nexport function getModifierKeys(event: TransformedEvent): ModifierKeys {\n  const { shiftKey, altKey, metaKey, ctrlKey } = event\n  return { shiftKey, altKey, metaKey, ctrlKey }\n}\ntype ScrollEventData = Pick<FullGestureState<Coordinates>, 'values'> & ModifierKeys\n\n/**\n * Gets scroll event data\n * @param event\n * @returns scroll event data\n */\nexport function getScrollEventData(event: TransformedEvent): ScrollEventData {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  const { scrollX, scrollY, scrollLeft, scrollTop } = <Element & Window>event.currentTarget\n  return { values: [scrollX || scrollLeft || 0, scrollY || scrollTop || 0], ...getModifierKeys(event) }\n}\n\ntype WheelEventData = Pick<FullGestureState<Coordinates>, 'values'> & ModifierKeys\n\n/**\n * Gets wheel event data\n * @param event\n * @returns wheel event data\n */\nexport function getWheelEventData(event: TransformedEvent<React.WheelEvent>): WheelEventData {\n  const { deltaX, deltaY } = event\n  //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n  return { values: [deltaX, deltaY], ...getModifierKeys(event) }\n}\ntype PointerEventData = Pick<FullGestureState<Coordinates>, 'values' | 'touches' | 'down' | 'buttons'> & ModifierKeys\n\n/**\n * Gets pointer event data\n * @param event\n * @returns pointer event data\n */\nexport function getPointerEventData(event: React.MouseEvent | React.TouchEvent | React.PointerEvent): PointerEventData {\n  const { touches, buttons, changedTouches } = event as any\n  const touchEvents = touches && touches.length > 0 ? touches : changedTouches && changedTouches.length > 0 ? changedTouches : null\n  const { clientX, clientY } = touchEvents ? touchEvents[0] : event\n  const down = (touchEvents && touchEvents.length > 0) || buttons > 0\n  return {\n    values: [clientX, clientY],\n    touches: (touchEvents && touchEvents.length) || 0,\n    down,\n    buttons,\n    ...getModifierKeys(event),\n  }\n}\n\ntype TwoTouchesEventData = Pick<FullGestureState<DistanceAngle>, 'values' | 'touches' | 'down' | 'origin'> & ModifierKeys\n\n/**\n * Gets two touches event data\n * @param event\n * @returns two touches event data\n */\nexport function getTwoTouchesEventData(event: React.TouchEvent): TwoTouchesEventData {\n  const { touches } = event\n  const dx = touches[1].clientX - touches[0].clientX\n  const dy = touches[1].clientY - touches[0].clientY\n\n  const da: Vector2 = [Math.hypot(dx, dy), -(Math.atan2(dx, dy) * 180) / Math.PI]\n  const origin: Vector2 = [(touches[1].clientX + touches[0].clientX) / 2, (touches[1].clientY + touches[0].clientY) / 2]\n\n  return { values: da, origin, touches: 2, down: touches.length > 0, ...getModifierKeys(event) }\n}\n\n/**\n * Calculates velocity\n * @param diff the difference between current and previous vectors\n * @param delta_t the time delta\n * @param len the length of the diff vector\n * @returns velocity\n */\nexport function calculateVelocity(diff: number[], delta_t: number, len: number): number {\n  len = len || Math.hypot(...diff)\n  return delta_t ? len / delta_t : 0\n}\n\n/**\n * Calculates velocities vector\n * @template T the expected vector type\n * @param diff the previous value\n * @param delta_t the time delta\n * @returns velocities vector\n */\nexport function calculateVelocities<T extends number[]>(diff: T, delta_t: number): T {\n  return delta_t ? <T>diff.map(v => v / delta_t) : <T>Array(diff.length).fill(0)\n}\n\n/**\n * Calculates distance\n * @param delta the difference between current and initial vectors\n * @returns distance\n */\nexport function calculateDistance(delta: number[]): number {\n  return Math.hypot(...delta)\n}\n\n/**\n * Calculates direction\n * @template T the expected vector type\n * @param diff\n * @param len\n * @returns direction\n */\nexport function calculateDirection<T extends number[]>(diff: T, len: number): T {\n  len = len || Math.hypot(...diff) || 1\n  return <T>diff.map(v => v / len)\n}\n\ninterface Kinematics<T extends number[]> {\n  velocities: T\n  velocity: number\n  distance: number\n  direction: T\n}\n\n/**\n * Calculates all kinematics\n * @template T the expected vector type\n * @param delta the difference between current and initial vectors\n * @param diff the difference between current and previous vectors\n * @param delta_t the time delta between current and previous timestamps\n * @returns all kinematics\n */\nexport function calculateAllKinematics<T extends number[]>(delta: T, diff: T, delta_t: number): Kinematics<T> {\n  const len = Math.hypot(...diff)\n\n  return {\n    velocities: calculateVelocities(diff, delta_t),\n    velocity: calculateVelocity(diff, delta_t, len),\n    distance: calculateDistance(delta),\n    direction: calculateDirection(diff, len),\n  }\n}\n\n/**\n * Whether the browser supports GestureEvent (ie Safari)\n * @returns true if the browser supports gesture event\n */\nexport function supportsGestureEvent(): boolean {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: Unreachable code error\n    return 'constructor' in GestureEvent\n  } catch (e) {\n    return false\n  }\n}\n","import { noop } from './utils'\nimport { GestureConfig, HandlerKey, CommonGestureState, Coordinates, DistanceAngle, StateObject, StateKey, GestureKey } from './types'\n\ntype MappedKeys = { [K in GestureKey]: { stateKey: StateKey; handlerKey: HandlerKey } }\n\n/**\n * Some gestures might use the state key from another gesture (i.e. hover)\n * so mappedKeys is a commodity object to get the state key and handler key\n * for every gesture\n */\nexport const mappedKeys: MappedKeys = {\n  drag: { stateKey: 'drag', handlerKey: 'onDrag' },\n  pinch: { stateKey: 'pinch', handlerKey: 'onPinch' },\n  move: { stateKey: 'move', handlerKey: 'onMove' },\n  scroll: { stateKey: 'scroll', handlerKey: 'onScroll' },\n  wheel: { stateKey: 'wheel', handlerKey: 'onWheel' },\n  hover: { stateKey: 'move', handlerKey: 'onHover' },\n}\n\n// default config (will extend user config)\nexport const defaultConfig: GestureConfig = {\n  domTarget: undefined,\n  event: { passive: true, capture: false },\n  pointerEvents: false,\n  window: typeof window !== 'undefined' ? window : undefined,\n  transform: { x: (x: number): number => x, y: (y: number): number => y },\n  enabled: true,\n  drag: true,\n  pinch: true,\n  scroll: true,\n  wheel: true,\n  hover: true,\n  move: true,\n}\n\n// common initial state for all gestures\nexport const initialCommon: CommonGestureState = {\n  event: undefined,\n  currentTarget: undefined,\n  pointerId: undefined,\n  values: [0, 0],\n  velocities: [0, 0],\n  delta: [0, 0],\n  initial: [0, 0],\n  previous: [0, 0],\n  transform: undefined,\n  local: [0, 0],\n  lastLocal: [0, 0],\n  first: false,\n  last: false,\n  active: false,\n  time: undefined,\n  cancel: noop,\n  canceled: false,\n  memo: undefined,\n  args: undefined,\n}\n\n// initial state for coordinates-based gestures\nconst initialCoordinates: Coordinates = { xy: [0, 0], vxvy: [0, 0], velocity: 0, distance: 0, direction: [0, 0] } // xy coordinates\n\n// initial state for distance and angle-based gestures (pinch)\nconst initialDistanceAngle: DistanceAngle = { da: [0, 0], vdva: [0, 0], origin: [0, 0], turns: 0 } // distance and angle\n\n// initial state object (used by the gesture controller)\nexport const initialState: StateObject = {\n  shared: {\n    hovering: false,\n    scrolling: false,\n    wheeling: false,\n    dragging: false,\n    moving: false,\n    pinching: false,\n    touches: 0,\n    buttons: 0,\n    down: false,\n    shiftKey: false,\n    altKey: false,\n    metaKey: false,\n    ctrlKey: false,\n  },\n  move: { ...initialCommon, ...initialCoordinates },\n  drag: { ...initialCommon, ...initialCoordinates },\n  scroll: { ...initialCommon, ...initialCoordinates },\n  wheel: { ...initialCommon, ...initialCoordinates },\n  pinch: { ...initialCommon, ...initialDistanceAngle },\n}\n\n// generic end state for all gestures\nexport const genericEndState = { first: false, last: true, active: false }\n","import { initialState, mappedKeys } from '../defaults'\nimport GestureController from '../controllers/GestureController'\nimport {\n  Coordinates,\n  DistanceAngle,\n  StateKey,\n  GestureState,\n  GestureKey,\n  SharedGestureState,\n  Fn,\n  Vector2,\n  TransformType,\n  ReactEventHandlerKey,\n  GestureFlag,\n  TransformedEvent,\n} from '../types'\n\n/**\n * Recognizer abstract class\n * @template GestureType whether the Recognizer should deal with coordinates or distance / angle\n */\nexport default abstract class Recognizer<GestureType extends Coordinates | DistanceAngle> {\n  protected stateKey: StateKey\n\n  /**\n   * Creates an instance of a gesture recognizer.\n   * @param gestureKey drag, move, hover, pinch, etc.\n   * @param controller the controller attached to the gesture\n   * @param [args] the args that should be passed to the gesture handler\n   */\n  constructor(\n    protected readonly gestureKey: GestureKey,\n    protected readonly controller: GestureController,\n    protected readonly args: any[] = []\n  ) {\n    // mapping this.stateKey to the state key the gesture handles\n    // (ie hover actually deals with the move gesture state)\n    this.stateKey = mappedKeys[gestureKey].stateKey\n  }\n\n  protected isEnabled = (): boolean => {\n    return this.controller.config.enabled && this.controller.config[this.gestureKey]\n  }\n\n  // convenience method to set a timeout for a given gesture\n  protected setTimeout = (callback: (...args: any[]) => void, ms: number = 140, ...args: any[]): void => {\n    this.controller.timeouts[this.stateKey] = window.setTimeout(callback, ms, ...args)\n  }\n\n  // convenience method to clear a timeout for a given gesture\n  protected clearTimeout = () => {\n    clearTimeout(this.controller.timeouts[this.stateKey])\n  }\n\n  // get the controller state for a given gesture\n  protected getState = (): GestureState<GestureType> => this.controller.state[this.stateKey] as GestureState<GestureType>\n  // get the controller shared state\n  protected getSharedState = () => this.controller.state.shared\n  // does the controller config has pointer events enabled\n  protected pointerEventsEnabled = () => this.controller.config.pointerEvents\n  // gets the transform config of the controller\n  protected getTransformConfig = () => this.controller.config.transform\n\n  // convenience method to add window listeners for a given gesture\n  protected addWindowListeners = (listeners: [string, Fn][]) => {\n    this.controller.addWindowListeners(this.stateKey, listeners)\n  }\n\n  // convenience method to remove window listeners for a given gesture\n  protected removeWindowListeners = () => {\n    this.controller.removeWindowListeners(this.stateKey)\n  }\n\n  // should return the bindings for a given gesture\n  public abstract getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][]\n\n  /**\n   * convenience method to update the controller state for a given gesture\n   * @param sharedState shared partial state object\n   * @param gestureState partial state object for the gesture handled by the recognizer\n   * @param [gestureFlag] if set, will also fire the gesture handler set by the user\n   */\n  protected updateState = (\n    sharedState: Partial<SharedGestureState> | null,\n    gestureState: Partial<GestureState<GestureType>>,\n    gestureFlag?: GestureFlag\n  ): void => {\n    this.controller.updateState(sharedState, gestureState, this.gestureKey, gestureFlag)\n  }\n\n  /**\n   * returns the start state for a given gesture\n   * @param values the values of the start state\n   * @param event the event that triggers the gesture start\n   */\n  protected getStartState = (values: Vector2, event: TransformedEvent): GestureState<GestureType> => {\n    const state = this.getState()\n    const initial = initialState[this.stateKey]\n    const transform: TransformType = state.transform || event.transform || this.getTransformConfig()\n    const lastLocal = state.local || initial.local\n\n    return <GestureState<GestureType>>{\n      ...(initial as object),\n      event,\n      values,\n      initial: values,\n      previous: values,\n      local: lastLocal,\n      lastLocal,\n      first: true,\n      active: true,\n      transform,\n      time: event.timeStamp,\n      args: this.args,\n    }\n  }\n}\n","import Recognizer from './Recognizer'\nimport { addV, subV, calculateAllKinematics } from '../utils'\nimport { TransformedEvent, Vector2, TransformType, GestureState, Coordinates } from '../types'\n\n/**\n * Abstract class for coordinates-based gesture recongizers\n */\nexport default abstract class CoordinatesRecognizer extends Recognizer<Coordinates> {\n  /**\n   * Utility function to get kinematics of the gesture\n   * @values values we want to calculate the kinematics from\n   * @event\n   * @returns set of values including delta, velocity, velocities, distance and direction\n   */\n  protected getKinematics = (values: Vector2, event: TransformedEvent): Partial<GestureState<Coordinates>> => {\n    // we get the gesture specific state\n    const state = this.getState()\n    const { values: xy, initial, lastLocal, time = 0 } = state\n    const transform: TransformType = state.transform || event.transform || this.getTransformConfig()\n\n    // delta is the difference between the current and initial value vectors\n    const delta = subV(values, initial).map((v, i) => Object.values(transform)[i](v)) as Vector2\n    // diff is the difference between the current and previous value vectors\n    const diff = subV(values, xy).map((v, i) => Object.values(transform)[i](v)) as Vector2\n\n    const delta_t = event.timeStamp - time\n    const { velocity, velocities, distance, direction } = calculateAllKinematics(delta, diff, delta_t)\n\n    return {\n      event,\n      values,\n      delta,\n      velocity,\n      velocities,\n      distance,\n      direction,\n      local: addV(lastLocal, delta),\n      previous: xy,\n      transform,\n      time: event.timeStamp,\n    }\n  }\n}\n","import { PointerEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { noop, getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class DragRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('drag', controller, args)\n  }\n\n  onStart = (event: TransformedEvent): void => {\n    if (!this.isEnabled()) return\n\n    const { values, ...rest } = getPointerEventData(event)\n    // making sure we're not dragging the element when more than one finger press the screen\n    if (rest.touches > 1) return\n\n    const { currentTarget, pointerId } = event as PointerEvent\n    if (this.pointerEventsEnabled()) {\n      // if pointers events\n      currentTarget && (currentTarget as any).setPointerCapture(pointerId)\n    } else {\n      this.removeWindowListeners()\n      const dragListeners: [string, Fn][] = [\n        ['mousemove', this.onChange],\n        ['mouseup', this.onEnd],\n        ['touchmove', this.onChange],\n        ['touchend', this.onEnd],\n        ['touchcancel', this.onEnd],\n      ]\n      this.addWindowListeners(dragListeners)\n    }\n\n    const startState = this.getStartState(values, event)\n\n    this.updateState(\n      { ...rest, dragging: true, down: true },\n      { ...startState, currentTarget, pointerId, cancel: () => this.onCancel(event) },\n      GestureFlag.OnStart\n    )\n  }\n\n  onChange = (event: TransformedEvent): void => {\n    const { canceled, active } = this.getState()\n    if (canceled || !active) return\n\n    const { values, ...rest } = getPointerEventData(event)\n\n    if (rest.buttons === 0 && rest.touches === 0) {\n      this.onEnd(event)\n      return\n    }\n\n    const kinematics = this.getKinematics(values, event)\n    const cancel = () => this.onCancel(event)\n\n    this.updateState(rest, { ...kinematics, first: false, cancel }, GestureFlag.OnChange)\n  }\n\n  onEnd = (event: TransformedEvent): void => {\n    const state = this.getState()\n    if (!state.active) return\n\n    const { currentTarget, pointerId } = state\n    if (currentTarget && this.pointerEventsEnabled()) (currentTarget as any).releasePointerCapture(pointerId)\n    else this.removeWindowListeners()\n\n    this.updateState({ dragging: false, down: false, buttons: 0, touches: 0 }, { ...genericEndState, event }, GestureFlag.OnEnd)\n  }\n\n  onCancel = (event: TransformedEvent): void => {\n    this.updateState(null, { canceled: true, cancel: noop })\n    requestAnimationFrame(() => this.onEnd(event))\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.pointerEventsEnabled()) {\n      return [['onPointerDown', this.onStart], ['onPointerMove', this.onChange], [['onPointerUp', 'onPointerCancel'], this.onEnd]]\n    }\n    return [[['onMouseDown', 'onTouchStart'], this.onStart]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getScrollEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class ScrollRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('scroll', controller, args)\n  }\n\n  onChange = (event: TransformedEvent): void => {\n    if (!this.isEnabled()) return\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    const { values, ...rest } = getScrollEventData(event)\n\n    if (!this.getState().active) {\n      const startState = this.getStartState(values, event)\n      this.updateState({ scrolling: true, ...rest }, startState, GestureFlag.OnStart)\n    } else {\n      const kinematics = this.getKinematics(values, event)\n      this.updateState(rest, { ...kinematics, first: false }, GestureFlag.OnChange)\n    }\n  }\n\n  onEnd = (): void => {\n    if (!this.getState().active) return\n    this.updateState({ scrolling: false }, { ...genericEndState, velocity: 0, velocities: [0, 0] }, GestureFlag.OnEnd)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onScroll', this.onChange]]\n  }\n}\n","import { WheelEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { addV, getWheelEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class WheelRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('wheel', controller, args)\n  }\n\n  onChange = (event: TransformedEvent<WheelEvent>): void => {\n    if (!this.isEnabled()) return\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    const { values: eventValues, ...rest } = getWheelEventData(event)\n    const values = addV(eventValues, this.getState().values)\n\n    if (!this.getState().active) {\n      const startState = this.getStartState(values, event)\n      this.updateState({ wheeling: true, ...rest }, startState, GestureFlag.OnStart)\n    } else {\n      const kinematics = this.getKinematics(values, event)\n      this.updateState(rest, { ...kinematics, first: false }, GestureFlag.OnChange)\n    }\n  }\n\n  onEnd = (): void => {\n    if (!this.getState().active) return\n    this.updateState({ wheeling: false }, { ...genericEndState, velocity: 0, velocities: [0, 0] }, GestureFlag.OnEnd)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onWheel', this.onChange]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class MoveRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('move', controller, args)\n  }\n\n  onChange = (event: TransformedEvent): void => {\n    if (!this.isEnabled()) return\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    const { values, ...rest } = getPointerEventData(event)\n\n    if (!this.getState().active) {\n      const startState = this.getStartState(values, event)\n      this.updateState({ moving: true, ...rest }, startState, GestureFlag.OnStart)\n    } else {\n      const kinematics = this.getKinematics(values, event)\n      this.updateState(rest, { ...kinematics, first: false }, GestureFlag.OnChange)\n    }\n  }\n\n  onEnd = (): void => {\n    if (!this.getState().active) return\n    this.updateState({ moving: false }, { ...genericEndState, velocity: 0, velocities: [0, 0] }, GestureFlag.OnEnd)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.pointerEventsEnabled()) {\n      return [['onPointerMove', this.onChange]]\n    }\n    return [['onMouseMove', this.onChange]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { GestureFlag, TransformedEvent, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class HoverRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('hover', controller, args)\n  }\n\n  onStart = (event: TransformedEvent): void => {\n    if (!this.isEnabled()) return\n    const { values, ...rest } = getPointerEventData(event)\n    this.updateState({ hovering: true, ...rest }, { values, event, args: this.args }, GestureFlag.OnChange)\n  }\n\n  onEnd = (event: TransformedEvent): void => {\n    if (!this.isEnabled()) return\n    const { values, ...rest } = getPointerEventData(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateState({ hovering: false, moving: false, ...rest }, { ...kinematics, ...genericEndState, velocity: 0, velocities: [0, 0] })\n\n    // when the mouse leaves the element, we also fire the move handler\n    // without waiting for move to end with debounce\n    this.controller.fireGestureHandler('move', GestureFlag.OnEnd)\n    this.controller.fireGestureHandler('hover', GestureFlag.OnChange)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.pointerEventsEnabled()) {\n      return [['onPointerEnter', this.onStart], ['onPointerLeave', this.onEnd]]\n    }\n    return [['onMouseEnter', this.onStart], ['onMouseLeave', this.onEnd]]\n  }\n}\n","import Recognizer from './Recognizer'\nimport { addV, calculateVelocities } from '../utils'\nimport { DistanceAngle, GestureState, Vector2, TransformedEvent } from '../types'\n\n/**\n * Abstract class for distance/angle-based gesture recongizers\n */\nexport default abstract class DistanceAngleRecognizer extends Recognizer<DistanceAngle> {\n  /**\n   * Utility function to get kinematics of the gesture\n   * @d distance\n   * @a angle\n   * @event\n   * @returns set of values including delta, velocities, turns\n   */\n  protected getKinematics = ([d, a]: [number, number?], event: TransformedEvent): Partial<GestureState<DistanceAngle>> => {\n    const state = this.getState()\n    const { values: da, turns, initial, lastLocal, time = 0 } = state\n\n    // angle might not be defined when ctrl wheel is used for zoom only\n    // in that case we set it to the previous angle value\n    a = a === undefined ? da[1] : a\n\n    const diff_d = d - da[0]\n    let diff_a = a - da[1]\n\n    /**\n     * The angle value might jump from 179deg to -179deg when we actually want to\n     * read 181deg to ensure continuity. To make that happen, we detect when the jump\n     * is supsiciously high (ie > 300deg) and increase the `turns` value\n     */\n    const newTurns = Math.abs(diff_a) > 300 ? turns + Math.sign(diff_a) : turns\n\n    // we update the angle difference to its corrected value\n    diff_a -= 360 * newTurns\n    const delta_d = d - initial[0]\n    const delta_a = a - 360 * newTurns - initial[1]\n\n    const delta: Vector2 = [delta_d, delta_a]\n\n    const delta_t = event.timeStamp - time\n    const velocities = calculateVelocities([diff_d, diff_a], delta_t) as Vector2\n\n    return {\n      event,\n      values: [d, a],\n      delta,\n      velocities,\n      turns: newTurns,\n      local: addV(lastLocal, delta),\n      previous: da,\n      time: event.timeStamp,\n    }\n  }\n}\n","import { TouchEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { noop, getTwoTouchesEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class PinchRecognizer extends DistanceAngleRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  onStart = (event: TransformedEvent<TouchEvent>): void => {\n    if (!this.isEnabled() || event.touches.length !== 2) return\n\n    const { values, origin, ...rest } = getTwoTouchesEventData(event)\n\n    const startState = this.getStartState(values, event)\n    this.updateState(\n      { ...rest, pinching: true, down: true },\n      { ...startState, origin, cancel: () => this.onCancel(event) },\n      GestureFlag.OnStart\n    )\n  }\n\n  onChange = (event: TransformedEvent<TouchEvent>): void => {\n    const { canceled, active } = this.getState()\n    if (canceled || !active || event.touches.length !== 2) return\n\n    const { values, origin, ...rest } = getTwoTouchesEventData(event)\n\n    const kinematics = this.getKinematics(values, event)\n    const cancel = () => this.onCancel(event)\n\n    this.updateState(rest, { ...kinematics, origin, first: false, cancel }, GestureFlag.OnChange)\n  }\n\n  onEnd = (event: TransformedEvent<TouchEvent>): void => {\n    if (!this.getState().active) return\n    this.updateState({ pinching: false, down: false, touches: 0 }, { ...genericEndState, event }, GestureFlag.OnEnd)\n  }\n\n  onCancel = (event: TransformedEvent<TouchEvent>): void => {\n    this.updateState(null, { canceled: true, cancel: noop })\n    requestAnimationFrame(() => this.onEnd(event))\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onTouchStart', this.onStart], ['onTouchMove', this.onChange], [['onTouchEnd', 'onTouchCancel'], this.onEnd]]\n  }\n}\n","import { WheelEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { getWheelEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class PinchWheelRecognizer extends DistanceAngleRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  onChange = (event: TransformedEvent<WheelEvent>): void => {\n    if (!this.isEnabled() || !event.ctrlKey) return\n    event.preventDefault()\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    const { values, ...rest } = getWheelEventData(event)\n    const d = this.getState().values[0] - values[1]\n\n    if (!this.getState().active) {\n      const startState = this.getStartState([d, 0], event)\n      this.updateState({ pinching: true, ...rest }, startState, GestureFlag.OnStart)\n    } else {\n      const kinematics = this.getKinematics([d, undefined], event)\n      this.updateState(rest, { ...kinematics, first: false }, GestureFlag.OnChange)\n    }\n  }\n\n  onEnd = (): void => {\n    if (!this.getState().active) return\n    this.updateState({ pinching: false, down: false, touches: 0 }, { ...genericEndState }, GestureFlag.OnEnd)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onWheel', this.onChange]]\n  }\n}\n","import { TouchEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { noop, getTwoTouchesEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, GestureEvent, Fn, Vector2 } from '../types'\nimport { genericEndState } from '../defaults'\n\nconst SCALE_FACTOR = 260\n\nexport default class PinchWebKitGestureRecognizer extends DistanceAngleRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  onStart = (event: TransformedEvent<GestureEvent>): void => {\n    if (!this.isEnabled()) return\n    event.preventDefault()\n\n    const da: Vector2 = [event.scale * SCALE_FACTOR, event.rotation]\n\n    const startState = this.getStartState(da, event)\n    this.updateState({ pinching: true, down: true, touches: 2 }, { ...startState, cancel: () => this.onCancel(event) }, GestureFlag.OnStart)\n  }\n\n  onChange = (event: TransformedEvent<GestureEvent>): void => {\n    const { canceled, active } = this.getState()\n    if (canceled || !active) return\n    event.preventDefault()\n\n    const da: Vector2 = [event.scale * SCALE_FACTOR, event.rotation]\n\n    const kinematics = this.getKinematics(da, event)\n    const cancel = () => this.onCancel(event)\n\n    this.updateState(null, { ...kinematics, first: false, cancel }, GestureFlag.OnChange)\n  }\n\n  onEnd = (event: TransformedEvent): void => {\n    if (!this.getState().active) return\n    event.preventDefault()\n    this.updateState({ pinching: false, down: false, touches: 0 }, { ...genericEndState, event }, GestureFlag.OnEnd)\n  }\n\n  onCancel = (event: TransformedEvent): void => {\n    this.updateState(null, { canceled: true, cancel: noop })\n    requestAnimationFrame(() => this.onEnd(event))\n  }\n\n  updateTouchData = (event: TransformedEvent<TouchEvent>): void => {\n    if (!this.isEnabled() || event.touches.length !== 2) return\n    const { origin } = getTwoTouchesEventData(event)\n    this.updateState(null, { origin })\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [\n      ['onGestureStart', this.onStart],\n      ['onGestureChange', this.onChange],\n      [['onGestureEnd', 'onTouchCancel'], this.onEnd],\n      [['onTouchStart', 'onTouchMove'], this.updateTouchData],\n    ]\n  }\n}\n","import {\n  Coordinates,\n  DistanceAngle,\n  StateKey,\n  StateObject,\n  GestureState,\n  SharedGestureState,\n  GestureKey,\n  FullGestureState,\n  Fn,\n  ReactEventHandlerKey,\n  GestureFlag,\n  ReactEventHandlers,\n  GestureConfig,\n  GestureHandlers,\n  HandlerKey,\n  GestureHandlersPartial,\n} from '../types'\n\nimport { initialState, mappedKeys } from '../defaults'\nimport { addListeners, removeListeners, supportsGestureEvent, chainFns } from '../utils'\n\nimport DragRecognizer from '../recognizers/DragRecognizer'\nimport ScrollRecognizer from '../recognizers/ScrollRecognizer'\nimport WheelRecognizer from '../recognizers/WheelRecognizer'\nimport MoveRecognizer from '../recognizers/MoveRecognizer'\nimport HoverRecognizer from '../recognizers/HoverRecognizer'\nimport PinchRecognizer from '../recognizers/PinchRecognizer'\nimport PinchWheelRecognizer from '../recognizers/PinchWheelRecognizer'\nimport PinchWebKitGestureRecognizer from '../recognizers/PinchWebKitGestureRecognizer'\nimport CoordinatesRecognizer from '../recognizers/CoordinatesRecognizer'\nimport DistanceAngleRecognizer from '../recognizers/DistanceAngleRecognizer'\n\ntype GestureTimeouts = Partial<{ [stateKey in StateKey]: number }>\ntype WindowListeners = Partial<{ [stateKey in StateKey]: [string, Fn][] }>\ntype Bindings = Partial<{ [eventName in ReactEventHandlerKey]: Fn[] | Fn }>\n\n/**\n * Gesture controller will create gesture recognizers (which handle the gesture logic)\n * and keep track of the state for all gestures\n *\n * @template BinderType the type the bind function should return\n */\nexport default class GestureController {\n  public state: StateObject = initialState // state for all gestures\n  public timeouts: GestureTimeouts = {} // keeping track of timeouts for debounced gestures (such as move, scroll, wheel)\n  private bindings: Bindings = {} // an object holding the handlers associated to the gestures\n  private domListeners: [string, Fn][] = [] // when config.domTarget is set, we attach events directly to the dom\n  private windowListeners: WindowListeners = {} // keeps track of window listeners added by gestures (drag only at the moment)\n\n  constructor(public handlers: GestureHandlersPartial, public config: GestureConfig) {}\n\n  /**\n   * Function run on component unmount\n   * Cleans timeouts and removes dom listeners set by the bind function\n   */\n  public clean = (): void => {\n    this.cleanOnBind()\n    Object.values(this.timeouts).forEach(clearTimeout)\n    Object.keys(this.windowListeners).forEach(stateKey => this.removeWindowListeners(<StateKey>stateKey))\n  }\n\n  /**\n   * Function run every time the bind function is run (ie on every render)\n   * Reset the binding object and remove dom listeners attached to config.domTarget\n   */\n  private cleanOnBind = (): void => {\n    this.bindings = {}\n    const { domTarget } = this.config\n    if (domTarget) {\n      removeListeners(<EventTarget>domTarget, this.domListeners, this.config.event)\n      this.domListeners = []\n    }\n  }\n\n  /**\n   * Commodity function to let gesture recognizer update global state\n   * @param sharedState shared partial state object\n   * @param gestureState partial gesture specific state object\n   * @param gestureKey the gesture key ('drag', 'move'...)\n   * @param [gestureFlag] if set, will also fire the gesture handler set by the user\n   */\n  public updateState = (\n    sharedState: Partial<SharedGestureState> | null,\n    gestureState: Partial<GestureState<Coordinates | DistanceAngle>>,\n    gestureKey: GestureKey,\n    gestureFlag?: GestureFlag\n  ): void => {\n    const stateKey = mappedKeys[gestureKey].stateKey\n\n    this.state = {\n      ...this.state,\n      shared: { ...this.state.shared, ...sharedState },\n      [stateKey]: { ...this.state[stateKey], ...(gestureState as object) },\n    }\n\n    if (gestureFlag) {\n      this.fireGestureHandler(gestureKey, gestureFlag)\n    }\n  }\n\n  // fire the gesture handler defined by the user\n  public fireGestureHandler = (gestureKey: GestureKey, gestureFlag: GestureFlag): void => {\n    // gets the state key and handler key from the gesture key\n    // gestureKey: 'hover' -> stateKey: 'move', handlerKey: 'onHover'\n    const { stateKey, handlerKey } = mappedKeys[gestureKey]\n    const state = { ...this.state.shared, ...this.state[stateKey] }\n\n    if (gestureKey === 'pinch') {\n      const pinchState = state as FullGestureState<DistanceAngle>\n      pinchState.da = state.values // legacy state attribute for pinch gestures\n      pinchState.vdva = state.velocities // legacy state attribute for pinch gestures\n    } else {\n      const coordinatesState = state as FullGestureState<Coordinates>\n      coordinatesState.xy = state.values // legacy state attribute for xy gestures\n      coordinatesState.vxvy = state.velocities // legacy state attribute for xy gestures\n    }\n    // TODO to be removed in future versions\n    state.temp = state.memo // legacy temp attribute\n\n    if (gestureFlag === GestureFlag.OnStart) {\n      const handlerStart = `${handlerKey}Start` as keyof GestureHandlers\n      const handler = this.handlers[handlerStart] as any\n      handler && handler(state)\n    }\n\n    // whenever a flag is set, we run the default on[Gesture] function\n    // i.e. GestureFlag.OnStart would trigger both onDragStart and onDrag\n    const handler = this.handlers[handlerKey] as any\n    if (handler) {\n      const newMemo = handler(state)\n      this.state[stateKey].memo = newMemo !== undefined ? newMemo : this.state[stateKey].memo\n    }\n\n    if (gestureFlag === GestureFlag.OnEnd) {\n      const handlerEnd = `${handlerKey}End` as keyof GestureHandlers\n      const handler = this.handlers[handlerEnd] as any\n      handler && handler(state)\n    }\n  }\n\n  /**\n   * Commodity function to let recognizers simply add listeners to config.window\n   * @param stateKey\n   * @param listeners\n   */\n  public addWindowListeners = (stateKey: StateKey, listeners: [string, Fn][]): void => {\n    if (!this.config.window) return\n    // we use this.windowListeners to keep track of the listeners we add\n    this.windowListeners[stateKey] = listeners\n    addListeners(this.config.window, listeners, this.config.event)\n  }\n\n  // commodity function to let recognizers simply remove listeners from config.window\n  public removeWindowListeners = (stateKey: StateKey): void => {\n    if (!this.config.window) return\n    const listeners = this.windowListeners[stateKey]\n    if (listeners) {\n      removeListeners(this.config.window, listeners, this.config.event)\n      delete this.windowListeners[stateKey]\n    }\n  }\n\n  /**\n   * Adds a recognizer to this.bindings\n   * @param recognizer\n   */\n  private addRecognizer = (recognizer: CoordinatesRecognizer | DistanceAngleRecognizer): void => {\n    recognizer.getEventBindings().map(this.addEventBindings)\n  }\n\n  /**\n   * this.bindings is an object which keys match ReactEventHandlerKeys (onMouseMove, onTouchStart...).\n   * Since a recognizer might want to bind a handler function to an event key already used by a previously\n   * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\n   * that key.\n   */\n  private addEventBindings = ([eventNames, fn]: [ReactEventHandlerKey | ReactEventHandlerKey[], Fn]): void => {\n    const eventNamesArray = !Array.isArray(eventNames) ? [eventNames] : eventNames\n\n    eventNamesArray.forEach(eventName => {\n      this.bindings[eventName] = this.bindings[eventName] ? [...(<Fn[]>this.bindings[eventName]), fn] : [fn]\n    })\n  }\n\n  /**\n   * When config.domTarget is set, this function will add dom listeners to it\n   */\n  private addDomTargetListeners = (): void => {\n    const { domTarget } = this.config\n\n    // we iterate on the entries of this.binding\n    // for each event, we chain the array of functions mapped to it\n    // and push it to this.domListeners\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      this.domListeners.push([event.substr(2).toLowerCase(), chainFns(...(<Fn[]>fns))])\n    })\n\n    addListeners(<EventTarget>domTarget, this.domListeners, this.config.event)\n  }\n\n  /**\n   * getBindings will return an object that will be bound by users\n   * to the react component they want to interact with\n   */\n  private getBindings = (): ReactEventHandlers => {\n    const output: ReactEventHandlers = {}\n    const captureString = this.config.event.capture ? 'Capture' : ''\n\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      const fnsArray = Array.isArray(fns) ? fns : [fns]\n      const key = (event + captureString) as ReactEventHandlerKey\n      output[key] = chainFns(...(<Fn[]>fnsArray))\n    })\n\n    return output\n  }\n\n  public bind = (...args: any[]): Fn | ReactEventHandlers => {\n    // if handlers contains {onDragStart, onDrag, onDragEnd, onMoveStart, onMove}\n    // actions will skip on[Gesture][\"Start\"|\"End\"] functions and include\n    // ['onDrag', 'onMove']\n    const actions: Set<HandlerKey | undefined> = new Set(\n      Object.keys(this.handlers)\n        .filter(k => k.indexOf('on') === 0)\n        .map(k => {\n          const match = k.match(/(on[A-Z][a-z]+)/)\n          return match ? <HandlerKey>match[1] : undefined\n        })\n    )\n\n    const { domTarget } = this.config\n\n    const genuineHandlers = { ...this.handlers }\n\n    // cleaning before adding\n    this.cleanOnBind()\n\n    if (actions.has('onDrag')) {\n      this.addRecognizer(new DragRecognizer(this, args))\n      delete genuineHandlers.onDrag\n      delete genuineHandlers.onDragStart\n      delete genuineHandlers.onDragEnd\n    }\n    if (actions.has('onScroll')) {\n      this.addRecognizer(new ScrollRecognizer(this, args))\n      delete genuineHandlers.onScroll\n      delete genuineHandlers.onScrollStart\n      delete genuineHandlers.onScrollEnd\n    }\n    if (actions.has('onWheel')) {\n      this.addRecognizer(new WheelRecognizer(this, args))\n      delete genuineHandlers.onWheel\n      delete genuineHandlers.onWheelStart\n      delete genuineHandlers.onWheelEnd\n    }\n    if (actions.has('onMove')) {\n      this.addRecognizer(new MoveRecognizer(this, args))\n      delete genuineHandlers.onMove\n      delete genuineHandlers.onMoveStart\n      delete genuineHandlers.onMoveEnd\n    }\n    if (actions.has('onHover')) {\n      this.addRecognizer(new HoverRecognizer(this, args))\n      delete genuineHandlers.onHover\n    }\n    if (actions.has('onPinch')) {\n      // since react doesn't have handlers for gesture events we can only use them\n      // domTarget is set (and when the browser supprots them).\n      if (domTarget && supportsGestureEvent()) {\n        this.addRecognizer(new PinchWebKitGestureRecognizer(this, args))\n      } else {\n        this.addRecognizer(new PinchRecognizer(this, args))\n        this.addRecognizer(new PinchWheelRecognizer(this, args))\n      }\n      delete genuineHandlers.onPinch\n      delete genuineHandlers.onPinchStart\n      delete genuineHandlers.onPinchEnd\n    }\n\n    // we also add event bindings for genuine handlers\n    Object.entries(genuineHandlers).map(([event, fn]) => {\n      // we're cheating when it comes to event type :(\n      this.addEventBindings([<ReactEventHandlerKey>event, <Fn>fn])\n    })\n\n    // if config.domTarget is set we add event listeners to it and return the clean function\n    if (domTarget) {\n      this.addDomTargetListeners()\n      return this.clean\n    }\n\n    // if not, we return an object that contains gesture handlers mapped to react handler event keys\n    return this.getBindings()\n  }\n}\n","import React from 'react'\nimport GestureController from './controllers/GestureController'\nimport { Handler, GestureHandlersPartial, GestureConfig, Coordinates, Fn, ReactEventHandlers, DistanceAngle } from './types'\nimport { defaultConfig } from './defaults'\n\n/** API\n * Default Drag:\n * const bind = useGesture(() => { ... })\n *\n * Handlers object:\n * const bind = useGesture({ onDrag: () => { ... }, onMove: () => { ... } })\n *\n * DomTarget:\n * const bind = useGesture({ onScroll: () => { ... } }, { domTarget: window })\n * React.useEffect(bind, [bind])\n */\n\ntype GetBinderTypeFromDomTarget<T extends Partial<GestureConfig>> = T['domTarget'] extends object ? Fn : ReactEventHandlers\n\nexport function useGesture<Config extends Partial<GestureConfig>>(\n  handlers: GestureHandlersPartial | Handler<Coordinates>,\n  config?: Config\n): (...args: any[]) => GetBinderTypeFromDomTarget<Config> {\n  // the gesture controller will keep track of all gesture states\n  const gestureController = React.useRef<GestureController>()\n\n  if (!gestureController.current) {\n    // we initialize the gesture controller once\n    gestureController.current = new GestureController(getDerivedHandlers(handlers), getDerivedConfig(config))\n  }\n\n  React.useEffect(() => {\n    // every time handlers or config change, we let the gesture controller compute\n    // them so that the gesture handlers functions are aware of the changes\n    gestureController.current!.config = getDerivedConfig(config)\n    gestureController.current!.handlers = getDerivedHandlers(handlers)\n  }, [handlers, config])\n\n  // when the user component unmounts, we run our gesture controller clean function\n  React.useEffect(() => gestureController.current!.clean, [])\n\n  // we return the bind function of our controller, which returns an binding object or\n  // a cleaning function depending on whether config.domTarget is set\n  return gestureController.current.bind as (...args: any[]) => GetBinderTypeFromDomTarget<Config>\n}\n\n/* SHORTHAND HANDLERS */\nexport const useDrag = (handler: Handler<Coordinates>, config?: Partial<GestureConfig>) => useGesture({ onDrag: handler }, config)\nexport const useMove = (handler: Handler<Coordinates>, config?: Partial<GestureConfig>) => useGesture({ onMove: handler }, config)\nexport const useHover = (handler: Handler<Coordinates>, config?: Partial<GestureConfig>) => useGesture({ onHover: handler }, config)\nexport const useScroll = (handler: Handler<Coordinates>, config?: Partial<GestureConfig>) => useGesture({ onScroll: handler }, config)\nexport const useWheel = (handler: Handler<Coordinates>, config?: Partial<GestureConfig>) => useGesture({ onWheel: handler }, config)\nexport const usePinch = (handler: Handler<DistanceAngle>, config?: Partial<GestureConfig>) => useGesture({ onPinch: handler }, config)\n\nfunction getDerivedHandlers(handlers: GestureHandlersPartial | Handler<Coordinates>): GestureHandlersPartial {\n  if (typeof handlers === 'function') return { onDrag: handlers }\n\n  const { onAction, ...rest } = handlers\n  const derivedHandlers = rest as GestureHandlersPartial\n\n  if (onAction) derivedHandlers.onDrag = onAction\n\n  return derivedHandlers\n}\n\nfunction getDerivedConfig(config?: Partial<GestureConfig>): GestureConfig {\n  const derivedConfig = { ...defaultConfig, ...config }\n  const { domTarget } = derivedConfig\n  const realDomTarget = domTarget && 'current' in domTarget ? domTarget.current : domTarget\n  derivedConfig.domTarget = realDomTarget\n\n  return derivedConfig\n}\n"],"names":["GestureFlag","noop","chainFns","fns","args","forEach","fn","addV","v1","v2","map","v","i","subV","setListeners","add","el","listeners","options","action","addListeners","removeListeners","getModifierKeys","event","shiftKey","altKey","metaKey","ctrlKey","getWheelEventData","values","deltaX","deltaY","getPointerEventData","touches","buttons","changedTouches","touchEvents","length","clientX","clientY","down","getTwoTouchesEventData","dx","dy","Math","hypot","atan2","PI","origin","calculateVelocity","diff","delta_t","len","calculateVelocities","Array","fill","calculateDistance","delta","calculateDirection","mappedKeys","drag","stateKey","handlerKey","pinch","move","scroll","wheel","hover","defaultConfig","domTarget","undefined","passive","capture","pointerEvents","window","transform","x","y","enabled","initialCommon","currentTarget","pointerId","velocities","initial","previous","local","lastLocal","first","last","active","time","cancel","canceled","memo","initialCoordinates","xy","vxvy","velocity","distance","direction","initialState","shared","hovering","scrolling","wheeling","dragging","moving","pinching","da","vdva","turns","genericEndState","Recognizer","gestureKey","controller","_this","config","callback","ms","timeouts","setTimeout","clearTimeout","state","addWindowListeners","removeWindowListeners","sharedState","gestureState","gestureFlag","updateState","getState","getTransformConfig","timeStamp","CoordinatesRecognizer","Object","calculateAllKinematics","DragRecognizer","isEnabled","rest","pointerEventsEnabled","setPointerCapture","onChange","onEnd","startState","getStartState","onCancel","OnStart","kinematics","getKinematics","OnChange","releasePointerCapture","OnEnd","requestAnimationFrame","getEventBindings","this","onStart","ScrollRecognizer","scrollX","scrollLeft","scrollY","scrollTop","getScrollEventData","WheelRecognizer","eventValues","MoveRecognizer","HoverRecognizer","fireGestureHandler","DistanceAngleRecognizer","d","a","diff_d","diff_a","newTurns","abs","sign","PinchRecognizer","PinchWheelRecognizer","preventDefault","SCALE_FACTOR","PinchWebKitGestureRecognizer","scale","rotation","updateTouchData","GestureController","handlers","cleanOnBind","keys","windowListeners","bindings","domListeners","pinchState","coordinatesState","temp","handler","newMemo","recognizer","addEventBindings","eventNames","isArray","eventName","entries","push","substr","toLowerCase","output","captureString","fnsArray","actions","Set","filter","k","indexOf","match","genuineHandlers","has","addRecognizer","onDrag","onDragStart","onDragEnd","onScroll","onScrollStart","onScrollEnd","onWheel","onWheelStart","onWheelEnd","onMove","onMoveStart","onMoveEnd","onHover","GestureEvent","e","supportsGestureEvent","onPinch","onPinchStart","onPinchEnd","addDomTargetListeners","clean","getBindings","useGesture","gestureController","React","useRef","current","getDerivedHandlers","getDerivedConfig","useEffect","bind","onAction","derivedHandlers","derivedConfig"],"mappings":"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"}