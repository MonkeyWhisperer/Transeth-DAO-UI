import { Coordinates, DistanceAngle, StateKey, StateObject, SharedGestureState, GestureKey, Fn, GestureFlag, ReactEventHandlers, GestureConfig, GestureHandlersPartial } from '../types';
declare type GestureTimeouts = Partial<{
    [stateKey in StateKey]: number;
}>;
/**
 * Gesture controller will create gesture recognizers (which handle the gesture logic)
 * and keep track of the state for all gestures
 *
 * @template BinderType the type the bind function should return
 */
export default class GestureController {
    handlers: GestureHandlersPartial;
    config: GestureConfig;
    state: StateObject;
    timeouts: GestureTimeouts;
    private bindings;
    private domListeners;
    private windowListeners;
    constructor(handlers: GestureHandlersPartial, config: GestureConfig);
    /**
     * Function run on component unmount
     * Cleans timeouts and removes dom listeners set by the bind function
     */
    clean: () => void;
    /**
     * Function run every time the bind function is run (ie on every render)
     * Reset the binding object and remove dom listeners attached to config.domTarget
     */
    private cleanOnBind;
    /**
     * Commodity function to let gesture recognizer update global state
     * @param sharedState shared partial state object
     * @param gestureState partial gesture specific state object
     * @param gestureKey the gesture key ('drag', 'move'...)
     * @param [gestureFlag] if set, will also fire the gesture handler set by the user
     */
    updateState: (sharedState: Partial<SharedGestureState> | null, gestureState: Partial<Coordinates & import("../types").CommonGestureState> | Partial<DistanceAngle & import("../types").CommonGestureState>, gestureKey: GestureKey, gestureFlag?: GestureFlag | undefined) => void;
    fireGestureHandler: (gestureKey: GestureKey, gestureFlag: GestureFlag) => void;
    /**
     * Commodity function to let recognizers simply add listeners to config.window
     * @param stateKey
     * @param listeners
     */
    addWindowListeners: (stateKey: "drag" | "pinch" | "move" | "scroll" | "wheel", listeners: [string, Fn][]) => void;
    removeWindowListeners: (stateKey: "drag" | "pinch" | "move" | "scroll" | "wheel") => void;
    /**
     * Adds a recognizer to this.bindings
     * @param recognizer
     */
    private addRecognizer;
    /**
     * this.bindings is an object which keys match ReactEventHandlerKeys (onMouseMove, onTouchStart...).
     * Since a recognizer might want to bind a handler function to an event key already used by a previously
     * added recognizer, we need to make sure that each event key is an array of all the functions mapped for
     * that key.
     */
    private addEventBindings;
    /**
     * When config.domTarget is set, this function will add dom listeners to it
     */
    private addDomTargetListeners;
    /**
     * getBindings will return an object that will be bound by users
     * to the react component they want to interact with
     */
    private getBindings;
    bind: (...args: any[]) => Fn | ReactEventHandlers;
}
export {};
