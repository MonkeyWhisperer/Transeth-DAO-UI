import React from 'react';
import { Fn, EventOptions, Coordinates, FullGestureState, DistanceAngle, TransformedEvent } from './types';
export declare const noop: () => void;
export declare const chainFns: (...fns: Fn[]) => Fn;
export declare const addV: <T extends number[]>(v1: T, v2: T) => T;
export declare const subV: <T extends number[]>(v1: T, v2: T) => T;
export declare const addListeners: (el: EventTarget, listeners: [string, Fn][], options: EventOptions) => void;
export declare const removeListeners: (el: EventTarget, listeners: [string, Fn][], options: EventOptions) => void;
interface ModifierKeys {
    shiftKey: boolean;
    altKey: boolean;
    metaKey: boolean;
    ctrlKey: boolean;
}
/**
 * Gets modifier keys from event
 * @param event
 * @returns modifier keys
 */
export declare function getModifierKeys(event: TransformedEvent): ModifierKeys;
declare type ScrollEventData = Pick<FullGestureState<Coordinates>, 'values'> & ModifierKeys;
/**
 * Gets scroll event data
 * @param event
 * @returns scroll event data
 */
export declare function getScrollEventData(event: TransformedEvent): ScrollEventData;
declare type WheelEventData = Pick<FullGestureState<Coordinates>, 'values'> & ModifierKeys;
/**
 * Gets wheel event data
 * @param event
 * @returns wheel event data
 */
export declare function getWheelEventData(event: TransformedEvent<React.WheelEvent>): WheelEventData;
declare type PointerEventData = Pick<FullGestureState<Coordinates>, 'values' | 'touches' | 'down' | 'buttons'> & ModifierKeys;
/**
 * Gets pointer event data
 * @param event
 * @returns pointer event data
 */
export declare function getPointerEventData(event: React.MouseEvent | React.TouchEvent | React.PointerEvent): PointerEventData;
declare type TwoTouchesEventData = Pick<FullGestureState<DistanceAngle>, 'values' | 'touches' | 'down' | 'origin'> & ModifierKeys;
/**
 * Gets two touches event data
 * @param event
 * @returns two touches event data
 */
export declare function getTwoTouchesEventData(event: React.TouchEvent): TwoTouchesEventData;
/**
 * Calculates velocity
 * @param diff the difference between current and previous vectors
 * @param delta_t the time delta
 * @param len the length of the diff vector
 * @returns velocity
 */
export declare function calculateVelocity(diff: number[], delta_t: number, len: number): number;
/**
 * Calculates velocities vector
 * @template T the expected vector type
 * @param diff the previous value
 * @param delta_t the time delta
 * @returns velocities vector
 */
export declare function calculateVelocities<T extends number[]>(diff: T, delta_t: number): T;
/**
 * Calculates distance
 * @param delta the difference between current and initial vectors
 * @returns distance
 */
export declare function calculateDistance(delta: number[]): number;
/**
 * Calculates direction
 * @template T the expected vector type
 * @param diff
 * @param len
 * @returns direction
 */
export declare function calculateDirection<T extends number[]>(diff: T, len: number): T;
interface Kinematics<T extends number[]> {
    velocities: T;
    velocity: number;
    distance: number;
    direction: T;
}
/**
 * Calculates all kinematics
 * @template T the expected vector type
 * @param delta the difference between current and initial vectors
 * @param diff the difference between current and previous vectors
 * @param delta_t the time delta between current and previous timestamps
 * @returns all kinematics
 */
export declare function calculateAllKinematics<T extends number[]>(delta: T, diff: T, delta_t: number): Kinematics<T>;
/**
 * Whether the browser supports GestureEvent (ie Safari)
 * @returns true if the browser supports gesture event
 */
export declare function supportsGestureEvent(): boolean;
export {};
