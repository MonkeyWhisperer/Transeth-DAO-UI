import { Handler, GestureHandlersPartial, GestureConfig, Coordinates, Fn, ReactEventHandlers, DistanceAngle } from './types';
/** API
 * Default Drag:
 * const bind = useGesture(() => { ... })
 *
 * Handlers object:
 * const bind = useGesture({ onDrag: () => { ... }, onMove: () => { ... } })
 *
 * DomTarget:
 * const bind = useGesture({ onScroll: () => { ... } }, { domTarget: window })
 * React.useEffect(bind, [bind])
 */
declare type GetBinderTypeFromDomTarget<T extends Partial<GestureConfig>> = T['domTarget'] extends object ? Fn : ReactEventHandlers;
export declare function useGesture<Config extends Partial<GestureConfig>>(handlers: GestureHandlersPartial | Handler<Coordinates>, config?: Config): (...args: any[]) => GetBinderTypeFromDomTarget<Config>;
export declare const useDrag: (handler: Handler<Coordinates>, config?: Partial<GestureConfig> | undefined) => (...args: any[]) => ReactEventHandlers;
export declare const useMove: (handler: Handler<Coordinates>, config?: Partial<GestureConfig> | undefined) => (...args: any[]) => ReactEventHandlers;
export declare const useHover: (handler: Handler<Coordinates>, config?: Partial<GestureConfig> | undefined) => (...args: any[]) => ReactEventHandlers;
export declare const useScroll: (handler: Handler<Coordinates>, config?: Partial<GestureConfig> | undefined) => (...args: any[]) => ReactEventHandlers;
export declare const useWheel: (handler: Handler<Coordinates>, config?: Partial<GestureConfig> | undefined) => (...args: any[]) => ReactEventHandlers;
export declare const usePinch: (handler: Handler<DistanceAngle>, config?: Partial<GestureConfig> | undefined) => (...args: any[]) => ReactEventHandlers;
export {};
