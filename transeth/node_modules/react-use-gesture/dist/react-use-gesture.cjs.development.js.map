{"version":3,"file":"react-use-gesture.cjs.development.js","sources":["../src/types.ts","../src/utils.ts","../src/defaults.ts","../src/recognizers/Recognizer.ts","../src/recognizers/CoordinatesRecognizer.ts","../src/recognizers/DragRecognizer.ts","../src/recognizers/ScrollRecognizer.ts","../src/recognizers/WheelRecognizer.ts","../src/recognizers/MoveRecognizer.ts","../src/recognizers/HoverRecognizer.ts","../src/recognizers/DistanceAngleRecognizer.ts","../src/recognizers/PinchRecognizer.ts","../src/recognizers/PinchWheelRecognizer.ts","../src/recognizers/PinchWebKitGestureRecognizer.ts","../src/controllers/GestureController.ts","../src/index.ts"],"sourcesContent":["import React from 'react'\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\nexport type AtLeastOneOf<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U]\n\nexport type Vector2 = [number, number]\nexport type Fn = (...args: any[]) => any\nexport type TransformType = { x(x: number): number; y(y: number): number }\n\nexport type EventOptions = { capture: boolean; passive: boolean }\n\nexport interface GestureConfig {\n  domTarget?: EventTarget | React.RefObject<EventTarget> | null\n  event: EventOptions\n  window?: EventTarget | null\n  pointerEvents: boolean\n  transform: TransformType\n  enabled: boolean\n  drag: boolean\n  pinch: boolean\n  scroll: boolean\n  wheel: boolean\n  hover: boolean\n  move: boolean\n}\n\nexport enum GestureFlag {\n  OnStart = 'start',\n  OnChange = 'change',\n  OnEnd = 'end',\n}\n\nexport type GestureEvent = React.TouchEvent & { scale: number; rotation: number }\nexport type TransformedEvent<\n  T extends React.SyntheticEvent = React.MouseEvent | React.TouchEvent | React.WheelEvent | React.PointerEvent | GestureEvent\n> = T & {\n  transform?: TransformType\n}\n\nexport interface ReactEventHandlers {\n  // Mouse Events\n  onMouseDown?: React.MouseEventHandler\n  onMouseDownCapture?: React.MouseEventHandler\n  onMouseEnter?: React.MouseEventHandler\n  onMouseLeave?: React.MouseEventHandler\n  onMouseMove?: React.MouseEventHandler\n  onMouseMoveCapture?: React.MouseEventHandler\n  onMouseOut?: React.MouseEventHandler\n  onMouseOutCapture?: React.MouseEventHandler\n  onMouseOver?: React.MouseEventHandler\n  onMouseOverCapture?: React.MouseEventHandler\n  onMouseUp?: React.MouseEventHandler\n  onMouseUpCapture?: React.MouseEventHandler\n  // Touch Events\n  onTouchCancel?: React.TouchEventHandler\n  onTouchCancelCapture?: React.TouchEventHandler\n  onTouchEnd?: React.TouchEventHandler\n  onTouchEndCapture?: React.TouchEventHandler\n  onTouchMove?: React.TouchEventHandler\n  onTouchMoveCapture?: React.TouchEventHandler\n  onTouchStart?: React.TouchEventHandler\n  onTouchStartCapture?: React.TouchEventHandler\n\n  // Pointer Events\n  onPointerDown?: React.PointerEventHandler\n  onPointerDownCapture?: React.PointerEventHandler\n  onPointerMove?: React.PointerEventHandler\n  onPointerMoveCapture?: React.PointerEventHandler\n  onPointerUp?: React.PointerEventHandler\n  onPointerUpCapture?: React.PointerEventHandler\n  onPointerCancel?: React.PointerEventHandler\n  onPointerCancelCapture?: React.PointerEventHandler\n  onPointerEnter?: React.PointerEventHandler\n  onPointerEnterCapture?: React.PointerEventHandler\n  onPointerLeave?: React.PointerEventHandler\n  onPointerLeaveCapture?: React.PointerEventHandler\n  onPointerOver?: React.PointerEventHandler\n  onPointerOverCapture?: React.PointerEventHandler\n  onPointerOut?: React.PointerEventHandler\n  onPointerOutCapture?: React.PointerEventHandler\n  onGotPointerCapture?: React.PointerEventHandler\n  onGotPointerCaptureCapture?: React.PointerEventHandler\n  onLostPointerCapture?: React.PointerEventHandler\n  onLostPointerCaptureCapture?: React.PointerEventHandler\n\n  // UI Events\n  onScroll?: React.UIEventHandler\n  onScrollCapture?: React.UIEventHandler\n\n  // Wheel Events\n  onWheel?: React.WheelEventHandler\n  onWheelCapture?: React.WheelEventHandler\n\n  // Cheat mode for Gesture Events\n  onGestureStart?: Fn\n  onGestureChange?: Fn\n  onGestureEnd?: Fn\n}\n\nexport type ReactEventHandlerKey = keyof ReactEventHandlers\n\nexport type GestureKey = 'drag' | 'pinch' | 'move' | 'scroll' | 'wheel' | 'hover'\nexport type StateKey = Exclude<GestureKey, 'hover'>\n\nexport interface SharedGestureState {\n  hovering: boolean\n  scrolling: boolean\n  wheeling: boolean\n  dragging: boolean\n  moving: boolean\n  pinching: boolean\n  touches: number\n  down: boolean\n  buttons: number\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\nexport interface CommonGestureState {\n  event?: TransformedEvent\n  currentTarget?: EventTarget | null\n  pointerId?: number | null\n  values: Vector2\n  velocities: Vector2\n  delta: Vector2\n  initial: Vector2\n  previous: Vector2\n  transform?: TransformType\n  local: Vector2\n  lastLocal: Vector2\n  first: boolean\n  last: boolean\n  active: boolean\n  time?: number\n  cancel?(): void\n  canceled: boolean\n  memo?: any\n  temp?: any // TODO to be removed in future versions\n  args?: any\n}\n\nexport interface Coordinates {\n  xy: Vector2\n  velocity: number\n  vxvy: Vector2\n  distance: number\n  direction: Vector2\n}\n\nexport interface DistanceAngle {\n  da: Vector2\n  vdva: Vector2\n  origin: Vector2\n  turns: number\n}\n\nexport type GestureState<T extends Coordinates | DistanceAngle> = T & CommonGestureState\nexport type FullGestureState<T extends Coordinates | DistanceAngle> = SharedGestureState & GestureState<T>\n\nexport type StateObject = { shared: SharedGestureState } & { [K in StateKey]: GestureState<Coordinates | DistanceAngle> }\n\nexport type Handler<T extends Coordinates | DistanceAngle> = (state: FullGestureState<T>) => any | void\nexport type HandlerKey = 'onDrag' | 'onPinch' | 'onMove' | 'onHover' | 'onScroll' | 'onWheel'\n\nexport type GestureHandlers = {\n  onAction: Handler<Coordinates>\n  onDrag: Handler<Coordinates>\n  onDragStart: Handler<Coordinates>\n  onDragEnd: Handler<Coordinates>\n  onHover: Handler<Coordinates>\n  onMove: Handler<Coordinates>\n  onMoveStart: Handler<Coordinates>\n  onMoveEnd: Handler<Coordinates>\n  onScroll: Handler<Coordinates>\n  onScrollStart: Handler<Coordinates>\n  onScrollEnd: Handler<Coordinates>\n  onWheel: Handler<Coordinates>\n  onWheelStart: Handler<Coordinates>\n  onWheelEnd: Handler<Coordinates>\n  onPinch: Handler<DistanceAngle>\n  onPinchStart: Handler<DistanceAngle>\n  onPinchEnd: Handler<DistanceAngle>\n}\n\n/* Handlers should also accept DomAttributes to prevent overrides */\nexport type GestureHandlersPartial = AtLeastOneOf<GestureHandlers> &\n  Partial<Omit<React.DOMAttributes<Element>, 'onDrag' | 'onScroll' | 'onWheel'>>\n","import React from 'react'\nimport { Fn, Vector2, EventOptions, Coordinates, FullGestureState, DistanceAngle, TransformedEvent } from './types'\n\n// blank function\nexport const noop = () => {}\n\n// returns a function that chains all functions given as parameters\nexport const chainFns = (...fns: Fn[]): Fn => (...args: any[]) => fns.forEach(fn => fn(...args))\n\n// vector add\nexport const addV = <T extends number[]>(v1: T, v2: T): T => <T>v1.map((v, i) => v + v2[i])\n\n// vector substract\nexport const subV = <T extends number[]>(v1: T, v2: T): T => <T>v1.map((v, i) => v - v2[i])\n\nconst setListeners = (add: boolean) => (el: EventTarget, listeners: [string, Fn][], options: EventOptions): void => {\n  const action = add ? 'addEventListener' : 'removeEventListener'\n  listeners.forEach(([type, fn]) => el[action](type, fn, options))\n}\n\nexport const addListeners = setListeners(true)\nexport const removeListeners = setListeners(false)\n\ninterface ModifierKeys {\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\n/**\n * Gets modifier keys from event\n * @param event\n * @returns modifier keys\n */\nexport function getModifierKeys(event: TransformedEvent): ModifierKeys {\n  const { shiftKey, altKey, metaKey, ctrlKey } = event\n  return { shiftKey, altKey, metaKey, ctrlKey }\n}\ntype ScrollEventData = Pick<FullGestureState<Coordinates>, 'values'> & ModifierKeys\n\n/**\n * Gets scroll event data\n * @param event\n * @returns scroll event data\n */\nexport function getScrollEventData(event: TransformedEvent): ScrollEventData {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  const { scrollX, scrollY, scrollLeft, scrollTop } = <Element & Window>event.currentTarget\n  return { values: [scrollX || scrollLeft || 0, scrollY || scrollTop || 0], ...getModifierKeys(event) }\n}\n\ntype WheelEventData = Pick<FullGestureState<Coordinates>, 'values'> & ModifierKeys\n\n/**\n * Gets wheel event data\n * @param event\n * @returns wheel event data\n */\nexport function getWheelEventData(event: TransformedEvent<React.WheelEvent>): WheelEventData {\n  const { deltaX, deltaY } = event\n  //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n  return { values: [deltaX, deltaY], ...getModifierKeys(event) }\n}\ntype PointerEventData = Pick<FullGestureState<Coordinates>, 'values' | 'touches' | 'down' | 'buttons'> & ModifierKeys\n\n/**\n * Gets pointer event data\n * @param event\n * @returns pointer event data\n */\nexport function getPointerEventData(event: React.MouseEvent | React.TouchEvent | React.PointerEvent): PointerEventData {\n  const { touches, buttons, changedTouches } = event as any\n  const touchEvents = touches && touches.length > 0 ? touches : changedTouches && changedTouches.length > 0 ? changedTouches : null\n  const { clientX, clientY } = touchEvents ? touchEvents[0] : event\n  const down = (touchEvents && touchEvents.length > 0) || buttons > 0\n  return {\n    values: [clientX, clientY],\n    touches: (touchEvents && touchEvents.length) || 0,\n    down,\n    buttons,\n    ...getModifierKeys(event),\n  }\n}\n\ntype TwoTouchesEventData = Pick<FullGestureState<DistanceAngle>, 'values' | 'touches' | 'down' | 'origin'> & ModifierKeys\n\n/**\n * Gets two touches event data\n * @param event\n * @returns two touches event data\n */\nexport function getTwoTouchesEventData(event: React.TouchEvent): TwoTouchesEventData {\n  const { touches } = event\n  const dx = touches[1].clientX - touches[0].clientX\n  const dy = touches[1].clientY - touches[0].clientY\n\n  const da: Vector2 = [Math.hypot(dx, dy), -(Math.atan2(dx, dy) * 180) / Math.PI]\n  const origin: Vector2 = [(touches[1].clientX + touches[0].clientX) / 2, (touches[1].clientY + touches[0].clientY) / 2]\n\n  return { values: da, origin, touches: 2, down: touches.length > 0, ...getModifierKeys(event) }\n}\n\n/**\n * Calculates velocity\n * @param diff the difference between current and previous vectors\n * @param delta_t the time delta\n * @param len the length of the diff vector\n * @returns velocity\n */\nexport function calculateVelocity(diff: number[], delta_t: number, len: number): number {\n  len = len || Math.hypot(...diff)\n  return delta_t ? len / delta_t : 0\n}\n\n/**\n * Calculates velocities vector\n * @template T the expected vector type\n * @param diff the previous value\n * @param delta_t the time delta\n * @returns velocities vector\n */\nexport function calculateVelocities<T extends number[]>(diff: T, delta_t: number): T {\n  return delta_t ? <T>diff.map(v => v / delta_t) : <T>Array(diff.length).fill(0)\n}\n\n/**\n * Calculates distance\n * @param delta the difference between current and initial vectors\n * @returns distance\n */\nexport function calculateDistance(delta: number[]): number {\n  return Math.hypot(...delta)\n}\n\n/**\n * Calculates direction\n * @template T the expected vector type\n * @param diff\n * @param len\n * @returns direction\n */\nexport function calculateDirection<T extends number[]>(diff: T, len: number): T {\n  len = len || Math.hypot(...diff) || 1\n  return <T>diff.map(v => v / len)\n}\n\ninterface Kinematics<T extends number[]> {\n  velocities: T\n  velocity: number\n  distance: number\n  direction: T\n}\n\n/**\n * Calculates all kinematics\n * @template T the expected vector type\n * @param delta the difference between current and initial vectors\n * @param diff the difference between current and previous vectors\n * @param delta_t the time delta between current and previous timestamps\n * @returns all kinematics\n */\nexport function calculateAllKinematics<T extends number[]>(delta: T, diff: T, delta_t: number): Kinematics<T> {\n  const len = Math.hypot(...diff)\n\n  return {\n    velocities: calculateVelocities(diff, delta_t),\n    velocity: calculateVelocity(diff, delta_t, len),\n    distance: calculateDistance(delta),\n    direction: calculateDirection(diff, len),\n  }\n}\n\n/**\n * Whether the browser supports GestureEvent (ie Safari)\n * @returns true if the browser supports gesture event\n */\nexport function supportsGestureEvent(): boolean {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: Unreachable code error\n    return 'constructor' in GestureEvent\n  } catch (e) {\n    return false\n  }\n}\n","import { noop } from './utils'\nimport { GestureConfig, HandlerKey, CommonGestureState, Coordinates, DistanceAngle, StateObject, StateKey, GestureKey } from './types'\n\ntype MappedKeys = { [K in GestureKey]: { stateKey: StateKey; handlerKey: HandlerKey } }\n\n/**\n * Some gestures might use the state key from another gesture (i.e. hover)\n * so mappedKeys is a commodity object to get the state key and handler key\n * for every gesture\n */\nexport const mappedKeys: MappedKeys = {\n  drag: { stateKey: 'drag', handlerKey: 'onDrag' },\n  pinch: { stateKey: 'pinch', handlerKey: 'onPinch' },\n  move: { stateKey: 'move', handlerKey: 'onMove' },\n  scroll: { stateKey: 'scroll', handlerKey: 'onScroll' },\n  wheel: { stateKey: 'wheel', handlerKey: 'onWheel' },\n  hover: { stateKey: 'move', handlerKey: 'onHover' },\n}\n\n// default config (will extend user config)\nexport const defaultConfig: GestureConfig = {\n  domTarget: undefined,\n  event: { passive: true, capture: false },\n  pointerEvents: false,\n  window: typeof window !== 'undefined' ? window : undefined,\n  transform: { x: (x: number): number => x, y: (y: number): number => y },\n  enabled: true,\n  drag: true,\n  pinch: true,\n  scroll: true,\n  wheel: true,\n  hover: true,\n  move: true,\n}\n\n// common initial state for all gestures\nexport const initialCommon: CommonGestureState = {\n  event: undefined,\n  currentTarget: undefined,\n  pointerId: undefined,\n  values: [0, 0],\n  velocities: [0, 0],\n  delta: [0, 0],\n  initial: [0, 0],\n  previous: [0, 0],\n  transform: undefined,\n  local: [0, 0],\n  lastLocal: [0, 0],\n  first: false,\n  last: false,\n  active: false,\n  time: undefined,\n  cancel: noop,\n  canceled: false,\n  memo: undefined,\n  args: undefined,\n}\n\n// initial state for coordinates-based gestures\nconst initialCoordinates: Coordinates = { xy: [0, 0], vxvy: [0, 0], velocity: 0, distance: 0, direction: [0, 0] } // xy coordinates\n\n// initial state for distance and angle-based gestures (pinch)\nconst initialDistanceAngle: DistanceAngle = { da: [0, 0], vdva: [0, 0], origin: [0, 0], turns: 0 } // distance and angle\n\n// initial state object (used by the gesture controller)\nexport const initialState: StateObject = {\n  shared: {\n    hovering: false,\n    scrolling: false,\n    wheeling: false,\n    dragging: false,\n    moving: false,\n    pinching: false,\n    touches: 0,\n    buttons: 0,\n    down: false,\n    shiftKey: false,\n    altKey: false,\n    metaKey: false,\n    ctrlKey: false,\n  },\n  move: { ...initialCommon, ...initialCoordinates },\n  drag: { ...initialCommon, ...initialCoordinates },\n  scroll: { ...initialCommon, ...initialCoordinates },\n  wheel: { ...initialCommon, ...initialCoordinates },\n  pinch: { ...initialCommon, ...initialDistanceAngle },\n}\n\n// generic end state for all gestures\nexport const genericEndState = { first: false, last: true, active: false }\n","import { initialState, mappedKeys } from '../defaults'\nimport GestureController from '../controllers/GestureController'\nimport {\n  Coordinates,\n  DistanceAngle,\n  StateKey,\n  GestureState,\n  GestureKey,\n  SharedGestureState,\n  Fn,\n  Vector2,\n  TransformType,\n  ReactEventHandlerKey,\n  GestureFlag,\n  TransformedEvent,\n} from '../types'\n\n/**\n * Recognizer abstract class\n * @template GestureType whether the Recognizer should deal with coordinates or distance / angle\n */\nexport default abstract class Recognizer<GestureType extends Coordinates | DistanceAngle> {\n  protected stateKey: StateKey\n\n  /**\n   * Creates an instance of a gesture recognizer.\n   * @param gestureKey drag, move, hover, pinch, etc.\n   * @param controller the controller attached to the gesture\n   * @param [args] the args that should be passed to the gesture handler\n   */\n  constructor(\n    protected readonly gestureKey: GestureKey,\n    protected readonly controller: GestureController,\n    protected readonly args: any[] = []\n  ) {\n    // mapping this.stateKey to the state key the gesture handles\n    // (ie hover actually deals with the move gesture state)\n    this.stateKey = mappedKeys[gestureKey].stateKey\n  }\n\n  protected isEnabled = (): boolean => {\n    return this.controller.config.enabled && this.controller.config[this.gestureKey]\n  }\n\n  // convenience method to set a timeout for a given gesture\n  protected setTimeout = (callback: (...args: any[]) => void, ms: number = 140, ...args: any[]): void => {\n    this.controller.timeouts[this.stateKey] = window.setTimeout(callback, ms, ...args)\n  }\n\n  // convenience method to clear a timeout for a given gesture\n  protected clearTimeout = () => {\n    clearTimeout(this.controller.timeouts[this.stateKey])\n  }\n\n  // get the controller state for a given gesture\n  protected getState = (): GestureState<GestureType> => this.controller.state[this.stateKey] as GestureState<GestureType>\n  // get the controller shared state\n  protected getSharedState = () => this.controller.state.shared\n  // does the controller config has pointer events enabled\n  protected pointerEventsEnabled = () => this.controller.config.pointerEvents\n  // gets the transform config of the controller\n  protected getTransformConfig = () => this.controller.config.transform\n\n  // convenience method to add window listeners for a given gesture\n  protected addWindowListeners = (listeners: [string, Fn][]) => {\n    this.controller.addWindowListeners(this.stateKey, listeners)\n  }\n\n  // convenience method to remove window listeners for a given gesture\n  protected removeWindowListeners = () => {\n    this.controller.removeWindowListeners(this.stateKey)\n  }\n\n  // should return the bindings for a given gesture\n  public abstract getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][]\n\n  /**\n   * convenience method to update the controller state for a given gesture\n   * @param sharedState shared partial state object\n   * @param gestureState partial state object for the gesture handled by the recognizer\n   * @param [gestureFlag] if set, will also fire the gesture handler set by the user\n   */\n  protected updateState = (\n    sharedState: Partial<SharedGestureState> | null,\n    gestureState: Partial<GestureState<GestureType>>,\n    gestureFlag?: GestureFlag\n  ): void => {\n    this.controller.updateState(sharedState, gestureState, this.gestureKey, gestureFlag)\n  }\n\n  /**\n   * returns the start state for a given gesture\n   * @param values the values of the start state\n   * @param event the event that triggers the gesture start\n   */\n  protected getStartState = (values: Vector2, event: TransformedEvent): GestureState<GestureType> => {\n    const state = this.getState()\n    const initial = initialState[this.stateKey]\n    const transform: TransformType = state.transform || event.transform || this.getTransformConfig()\n    const lastLocal = state.local || initial.local\n\n    return <GestureState<GestureType>>{\n      ...(initial as object),\n      event,\n      values,\n      initial: values,\n      previous: values,\n      local: lastLocal,\n      lastLocal,\n      first: true,\n      active: true,\n      transform,\n      time: event.timeStamp,\n      args: this.args,\n    }\n  }\n}\n","import Recognizer from './Recognizer'\nimport { addV, subV, calculateAllKinematics } from '../utils'\nimport { TransformedEvent, Vector2, TransformType, GestureState, Coordinates } from '../types'\n\n/**\n * Abstract class for coordinates-based gesture recongizers\n */\nexport default abstract class CoordinatesRecognizer extends Recognizer<Coordinates> {\n  /**\n   * Utility function to get kinematics of the gesture\n   * @values values we want to calculate the kinematics from\n   * @event\n   * @returns set of values including delta, velocity, velocities, distance and direction\n   */\n  protected getKinematics = (values: Vector2, event: TransformedEvent): Partial<GestureState<Coordinates>> => {\n    // we get the gesture specific state\n    const state = this.getState()\n    const { values: xy, initial, lastLocal, time = 0 } = state\n    const transform: TransformType = state.transform || event.transform || this.getTransformConfig()\n\n    // delta is the difference between the current and initial value vectors\n    const delta = subV(values, initial).map((v, i) => Object.values(transform)[i](v)) as Vector2\n    // diff is the difference between the current and previous value vectors\n    const diff = subV(values, xy).map((v, i) => Object.values(transform)[i](v)) as Vector2\n\n    const delta_t = event.timeStamp - time\n    const { velocity, velocities, distance, direction } = calculateAllKinematics(delta, diff, delta_t)\n\n    return {\n      event,\n      values,\n      delta,\n      velocity,\n      velocities,\n      distance,\n      direction,\n      local: addV(lastLocal, delta),\n      previous: xy,\n      transform,\n      time: event.timeStamp,\n    }\n  }\n}\n","import { PointerEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { noop, getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class DragRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('drag', controller, args)\n  }\n\n  onStart = (event: TransformedEvent): void => {\n    if (!this.isEnabled()) return\n\n    const { values, ...rest } = getPointerEventData(event)\n    // making sure we're not dragging the element when more than one finger press the screen\n    if (rest.touches > 1) return\n\n    const { currentTarget, pointerId } = event as PointerEvent\n    if (this.pointerEventsEnabled()) {\n      // if pointers events\n      currentTarget && (currentTarget as any).setPointerCapture(pointerId)\n    } else {\n      this.removeWindowListeners()\n      const dragListeners: [string, Fn][] = [\n        ['mousemove', this.onChange],\n        ['mouseup', this.onEnd],\n        ['touchmove', this.onChange],\n        ['touchend', this.onEnd],\n        ['touchcancel', this.onEnd],\n      ]\n      this.addWindowListeners(dragListeners)\n    }\n\n    const startState = this.getStartState(values, event)\n\n    this.updateState(\n      { ...rest, dragging: true, down: true },\n      { ...startState, currentTarget, pointerId, cancel: () => this.onCancel(event) },\n      GestureFlag.OnStart\n    )\n  }\n\n  onChange = (event: TransformedEvent): void => {\n    const { canceled, active } = this.getState()\n    if (canceled || !active) return\n\n    const { values, ...rest } = getPointerEventData(event)\n\n    if (rest.buttons === 0 && rest.touches === 0) {\n      this.onEnd(event)\n      return\n    }\n\n    const kinematics = this.getKinematics(values, event)\n    const cancel = () => this.onCancel(event)\n\n    this.updateState(rest, { ...kinematics, first: false, cancel }, GestureFlag.OnChange)\n  }\n\n  onEnd = (event: TransformedEvent): void => {\n    const state = this.getState()\n    if (!state.active) return\n\n    const { currentTarget, pointerId } = state\n    if (currentTarget && this.pointerEventsEnabled()) (currentTarget as any).releasePointerCapture(pointerId)\n    else this.removeWindowListeners()\n\n    this.updateState({ dragging: false, down: false, buttons: 0, touches: 0 }, { ...genericEndState, event }, GestureFlag.OnEnd)\n  }\n\n  onCancel = (event: TransformedEvent): void => {\n    this.updateState(null, { canceled: true, cancel: noop })\n    requestAnimationFrame(() => this.onEnd(event))\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.pointerEventsEnabled()) {\n      return [['onPointerDown', this.onStart], ['onPointerMove', this.onChange], [['onPointerUp', 'onPointerCancel'], this.onEnd]]\n    }\n    return [[['onMouseDown', 'onTouchStart'], this.onStart]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getScrollEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class ScrollRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('scroll', controller, args)\n  }\n\n  onChange = (event: TransformedEvent): void => {\n    if (!this.isEnabled()) return\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    const { values, ...rest } = getScrollEventData(event)\n\n    if (!this.getState().active) {\n      const startState = this.getStartState(values, event)\n      this.updateState({ scrolling: true, ...rest }, startState, GestureFlag.OnStart)\n    } else {\n      const kinematics = this.getKinematics(values, event)\n      this.updateState(rest, { ...kinematics, first: false }, GestureFlag.OnChange)\n    }\n  }\n\n  onEnd = (): void => {\n    if (!this.getState().active) return\n    this.updateState({ scrolling: false }, { ...genericEndState, velocity: 0, velocities: [0, 0] }, GestureFlag.OnEnd)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onScroll', this.onChange]]\n  }\n}\n","import { WheelEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { addV, getWheelEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class WheelRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('wheel', controller, args)\n  }\n\n  onChange = (event: TransformedEvent<WheelEvent>): void => {\n    if (!this.isEnabled()) return\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    const { values: eventValues, ...rest } = getWheelEventData(event)\n    const values = addV(eventValues, this.getState().values)\n\n    if (!this.getState().active) {\n      const startState = this.getStartState(values, event)\n      this.updateState({ wheeling: true, ...rest }, startState, GestureFlag.OnStart)\n    } else {\n      const kinematics = this.getKinematics(values, event)\n      this.updateState(rest, { ...kinematics, first: false }, GestureFlag.OnChange)\n    }\n  }\n\n  onEnd = (): void => {\n    if (!this.getState().active) return\n    this.updateState({ wheeling: false }, { ...genericEndState, velocity: 0, velocities: [0, 0] }, GestureFlag.OnEnd)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onWheel', this.onChange]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class MoveRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('move', controller, args)\n  }\n\n  onChange = (event: TransformedEvent): void => {\n    if (!this.isEnabled()) return\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    const { values, ...rest } = getPointerEventData(event)\n\n    if (!this.getState().active) {\n      const startState = this.getStartState(values, event)\n      this.updateState({ moving: true, ...rest }, startState, GestureFlag.OnStart)\n    } else {\n      const kinematics = this.getKinematics(values, event)\n      this.updateState(rest, { ...kinematics, first: false }, GestureFlag.OnChange)\n    }\n  }\n\n  onEnd = (): void => {\n    if (!this.getState().active) return\n    this.updateState({ moving: false }, { ...genericEndState, velocity: 0, velocities: [0, 0] }, GestureFlag.OnEnd)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.pointerEventsEnabled()) {\n      return [['onPointerMove', this.onChange]]\n    }\n    return [['onMouseMove', this.onChange]]\n  }\n}\n","import CoordinatesRecognizer from './CoordinatesRecognizer'\nimport { getPointerEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { GestureFlag, TransformedEvent, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class HoverRecognizer extends CoordinatesRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('hover', controller, args)\n  }\n\n  onStart = (event: TransformedEvent): void => {\n    if (!this.isEnabled()) return\n    const { values, ...rest } = getPointerEventData(event)\n    this.updateState({ hovering: true, ...rest }, { values, event, args: this.args }, GestureFlag.OnChange)\n  }\n\n  onEnd = (event: TransformedEvent): void => {\n    if (!this.isEnabled()) return\n    const { values, ...rest } = getPointerEventData(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateState({ hovering: false, moving: false, ...rest }, { ...kinematics, ...genericEndState, velocity: 0, velocities: [0, 0] })\n\n    // when the mouse leaves the element, we also fire the move handler\n    // without waiting for move to end with debounce\n    this.controller.fireGestureHandler('move', GestureFlag.OnEnd)\n    this.controller.fireGestureHandler('hover', GestureFlag.OnChange)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    if (this.pointerEventsEnabled()) {\n      return [['onPointerEnter', this.onStart], ['onPointerLeave', this.onEnd]]\n    }\n    return [['onMouseEnter', this.onStart], ['onMouseLeave', this.onEnd]]\n  }\n}\n","import Recognizer from './Recognizer'\nimport { addV, calculateVelocities } from '../utils'\nimport { DistanceAngle, GestureState, Vector2, TransformedEvent } from '../types'\n\n/**\n * Abstract class for distance/angle-based gesture recongizers\n */\nexport default abstract class DistanceAngleRecognizer extends Recognizer<DistanceAngle> {\n  /**\n   * Utility function to get kinematics of the gesture\n   * @d distance\n   * @a angle\n   * @event\n   * @returns set of values including delta, velocities, turns\n   */\n  protected getKinematics = ([d, a]: [number, number?], event: TransformedEvent): Partial<GestureState<DistanceAngle>> => {\n    const state = this.getState()\n    const { values: da, turns, initial, lastLocal, time = 0 } = state\n\n    // angle might not be defined when ctrl wheel is used for zoom only\n    // in that case we set it to the previous angle value\n    a = a === undefined ? da[1] : a\n\n    const diff_d = d - da[0]\n    let diff_a = a - da[1]\n\n    /**\n     * The angle value might jump from 179deg to -179deg when we actually want to\n     * read 181deg to ensure continuity. To make that happen, we detect when the jump\n     * is supsiciously high (ie > 300deg) and increase the `turns` value\n     */\n    const newTurns = Math.abs(diff_a) > 300 ? turns + Math.sign(diff_a) : turns\n\n    // we update the angle difference to its corrected value\n    diff_a -= 360 * newTurns\n    const delta_d = d - initial[0]\n    const delta_a = a - 360 * newTurns - initial[1]\n\n    const delta: Vector2 = [delta_d, delta_a]\n\n    const delta_t = event.timeStamp - time\n    const velocities = calculateVelocities([diff_d, diff_a], delta_t) as Vector2\n\n    return {\n      event,\n      values: [d, a],\n      delta,\n      velocities,\n      turns: newTurns,\n      local: addV(lastLocal, delta),\n      previous: da,\n      time: event.timeStamp,\n    }\n  }\n}\n","import { TouchEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { noop, getTwoTouchesEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class PinchRecognizer extends DistanceAngleRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  onStart = (event: TransformedEvent<TouchEvent>): void => {\n    if (!this.isEnabled() || event.touches.length !== 2) return\n\n    const { values, origin, ...rest } = getTwoTouchesEventData(event)\n\n    const startState = this.getStartState(values, event)\n    this.updateState(\n      { ...rest, pinching: true, down: true },\n      { ...startState, origin, cancel: () => this.onCancel(event) },\n      GestureFlag.OnStart\n    )\n  }\n\n  onChange = (event: TransformedEvent<TouchEvent>): void => {\n    const { canceled, active } = this.getState()\n    if (canceled || !active || event.touches.length !== 2) return\n\n    const { values, origin, ...rest } = getTwoTouchesEventData(event)\n\n    const kinematics = this.getKinematics(values, event)\n    const cancel = () => this.onCancel(event)\n\n    this.updateState(rest, { ...kinematics, origin, first: false, cancel }, GestureFlag.OnChange)\n  }\n\n  onEnd = (event: TransformedEvent<TouchEvent>): void => {\n    if (!this.getState().active) return\n    this.updateState({ pinching: false, down: false, touches: 0 }, { ...genericEndState, event }, GestureFlag.OnEnd)\n  }\n\n  onCancel = (event: TransformedEvent<TouchEvent>): void => {\n    this.updateState(null, { canceled: true, cancel: noop })\n    requestAnimationFrame(() => this.onEnd(event))\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onTouchStart', this.onStart], ['onTouchMove', this.onChange], [['onTouchEnd', 'onTouchCancel'], this.onEnd]]\n  }\n}\n","import { WheelEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { getWheelEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, Fn } from '../types'\nimport { genericEndState } from '../defaults'\n\nexport default class PinchWheelRecognizer extends DistanceAngleRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  onChange = (event: TransformedEvent<WheelEvent>): void => {\n    if (!this.isEnabled() || !event.ctrlKey) return\n    event.preventDefault()\n\n    this.clearTimeout()\n    this.setTimeout(this.onEnd)\n\n    const { values, ...rest } = getWheelEventData(event)\n    const d = this.getState().values[0] - values[1]\n\n    if (!this.getState().active) {\n      const startState = this.getStartState([d, 0], event)\n      this.updateState({ pinching: true, ...rest }, startState, GestureFlag.OnStart)\n    } else {\n      const kinematics = this.getKinematics([d, undefined], event)\n      this.updateState(rest, { ...kinematics, first: false }, GestureFlag.OnChange)\n    }\n  }\n\n  onEnd = (): void => {\n    if (!this.getState().active) return\n    this.updateState({ pinching: false, down: false, touches: 0 }, { ...genericEndState }, GestureFlag.OnEnd)\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [['onWheel', this.onChange]]\n  }\n}\n","import { TouchEvent } from 'react'\nimport DistanceAngleRecognizer from './DistanceAngleRecognizer'\nimport { noop, getTwoTouchesEventData } from '../utils'\nimport GestureController from '../controllers/GestureController'\nimport { TransformedEvent, GestureFlag, ReactEventHandlerKey, GestureEvent, Fn, Vector2 } from '../types'\nimport { genericEndState } from '../defaults'\n\nconst SCALE_FACTOR = 260\n\nexport default class PinchWebKitGestureRecognizer extends DistanceAngleRecognizer {\n  constructor(controller: GestureController, args: any[]) {\n    super('pinch', controller, args)\n  }\n\n  onStart = (event: TransformedEvent<GestureEvent>): void => {\n    if (!this.isEnabled()) return\n    event.preventDefault()\n\n    const da: Vector2 = [event.scale * SCALE_FACTOR, event.rotation]\n\n    const startState = this.getStartState(da, event)\n    this.updateState({ pinching: true, down: true, touches: 2 }, { ...startState, cancel: () => this.onCancel(event) }, GestureFlag.OnStart)\n  }\n\n  onChange = (event: TransformedEvent<GestureEvent>): void => {\n    const { canceled, active } = this.getState()\n    if (canceled || !active) return\n    event.preventDefault()\n\n    const da: Vector2 = [event.scale * SCALE_FACTOR, event.rotation]\n\n    const kinematics = this.getKinematics(da, event)\n    const cancel = () => this.onCancel(event)\n\n    this.updateState(null, { ...kinematics, first: false, cancel }, GestureFlag.OnChange)\n  }\n\n  onEnd = (event: TransformedEvent): void => {\n    if (!this.getState().active) return\n    event.preventDefault()\n    this.updateState({ pinching: false, down: false, touches: 0 }, { ...genericEndState, event }, GestureFlag.OnEnd)\n  }\n\n  onCancel = (event: TransformedEvent): void => {\n    this.updateState(null, { canceled: true, cancel: noop })\n    requestAnimationFrame(() => this.onEnd(event))\n  }\n\n  updateTouchData = (event: TransformedEvent<TouchEvent>): void => {\n    if (!this.isEnabled() || event.touches.length !== 2) return\n    const { origin } = getTwoTouchesEventData(event)\n    this.updateState(null, { origin })\n  }\n\n  getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][] {\n    return [\n      ['onGestureStart', this.onStart],\n      ['onGestureChange', this.onChange],\n      [['onGestureEnd', 'onTouchCancel'], this.onEnd],\n      [['onTouchStart', 'onTouchMove'], this.updateTouchData],\n    ]\n  }\n}\n","import {\n  Coordinates,\n  DistanceAngle,\n  StateKey,\n  StateObject,\n  GestureState,\n  SharedGestureState,\n  GestureKey,\n  FullGestureState,\n  Fn,\n  ReactEventHandlerKey,\n  GestureFlag,\n  ReactEventHandlers,\n  GestureConfig,\n  GestureHandlers,\n  HandlerKey,\n  GestureHandlersPartial,\n} from '../types'\n\nimport { initialState, mappedKeys } from '../defaults'\nimport { addListeners, removeListeners, supportsGestureEvent, chainFns } from '../utils'\n\nimport DragRecognizer from '../recognizers/DragRecognizer'\nimport ScrollRecognizer from '../recognizers/ScrollRecognizer'\nimport WheelRecognizer from '../recognizers/WheelRecognizer'\nimport MoveRecognizer from '../recognizers/MoveRecognizer'\nimport HoverRecognizer from '../recognizers/HoverRecognizer'\nimport PinchRecognizer from '../recognizers/PinchRecognizer'\nimport PinchWheelRecognizer from '../recognizers/PinchWheelRecognizer'\nimport PinchWebKitGestureRecognizer from '../recognizers/PinchWebKitGestureRecognizer'\nimport CoordinatesRecognizer from '../recognizers/CoordinatesRecognizer'\nimport DistanceAngleRecognizer from '../recognizers/DistanceAngleRecognizer'\n\ntype GestureTimeouts = Partial<{ [stateKey in StateKey]: number }>\ntype WindowListeners = Partial<{ [stateKey in StateKey]: [string, Fn][] }>\ntype Bindings = Partial<{ [eventName in ReactEventHandlerKey]: Fn[] | Fn }>\n\n/**\n * Gesture controller will create gesture recognizers (which handle the gesture logic)\n * and keep track of the state for all gestures\n *\n * @template BinderType the type the bind function should return\n */\nexport default class GestureController {\n  public state: StateObject = initialState // state for all gestures\n  public timeouts: GestureTimeouts = {} // keeping track of timeouts for debounced gestures (such as move, scroll, wheel)\n  private bindings: Bindings = {} // an object holding the handlers associated to the gestures\n  private domListeners: [string, Fn][] = [] // when config.domTarget is set, we attach events directly to the dom\n  private windowListeners: WindowListeners = {} // keeps track of window listeners added by gestures (drag only at the moment)\n\n  constructor(public handlers: GestureHandlersPartial, public config: GestureConfig) {}\n\n  /**\n   * Function run on component unmount\n   * Cleans timeouts and removes dom listeners set by the bind function\n   */\n  public clean = (): void => {\n    this.cleanOnBind()\n    Object.values(this.timeouts).forEach(clearTimeout)\n    Object.keys(this.windowListeners).forEach(stateKey => this.removeWindowListeners(<StateKey>stateKey))\n  }\n\n  /**\n   * Function run every time the bind function is run (ie on every render)\n   * Reset the binding object and remove dom listeners attached to config.domTarget\n   */\n  private cleanOnBind = (): void => {\n    this.bindings = {}\n    const { domTarget } = this.config\n    if (domTarget) {\n      removeListeners(<EventTarget>domTarget, this.domListeners, this.config.event)\n      this.domListeners = []\n    }\n  }\n\n  /**\n   * Commodity function to let gesture recognizer update global state\n   * @param sharedState shared partial state object\n   * @param gestureState partial gesture specific state object\n   * @param gestureKey the gesture key ('drag', 'move'...)\n   * @param [gestureFlag] if set, will also fire the gesture handler set by the user\n   */\n  public updateState = (\n    sharedState: Partial<SharedGestureState> | null,\n    gestureState: Partial<GestureState<Coordinates | DistanceAngle>>,\n    gestureKey: GestureKey,\n    gestureFlag?: GestureFlag\n  ): void => {\n    const stateKey = mappedKeys[gestureKey].stateKey\n\n    this.state = {\n      ...this.state,\n      shared: { ...this.state.shared, ...sharedState },\n      [stateKey]: { ...this.state[stateKey], ...(gestureState as object) },\n    }\n\n    if (gestureFlag) {\n      this.fireGestureHandler(gestureKey, gestureFlag)\n    }\n  }\n\n  // fire the gesture handler defined by the user\n  public fireGestureHandler = (gestureKey: GestureKey, gestureFlag: GestureFlag): void => {\n    // gets the state key and handler key from the gesture key\n    // gestureKey: 'hover' -> stateKey: 'move', handlerKey: 'onHover'\n    const { stateKey, handlerKey } = mappedKeys[gestureKey]\n    const state = { ...this.state.shared, ...this.state[stateKey] }\n\n    if (gestureKey === 'pinch') {\n      const pinchState = state as FullGestureState<DistanceAngle>\n      pinchState.da = state.values // legacy state attribute for pinch gestures\n      pinchState.vdva = state.velocities // legacy state attribute for pinch gestures\n    } else {\n      const coordinatesState = state as FullGestureState<Coordinates>\n      coordinatesState.xy = state.values // legacy state attribute for xy gestures\n      coordinatesState.vxvy = state.velocities // legacy state attribute for xy gestures\n    }\n    // TODO to be removed in future versions\n    state.temp = state.memo // legacy temp attribute\n\n    if (gestureFlag === GestureFlag.OnStart) {\n      const handlerStart = `${handlerKey}Start` as keyof GestureHandlers\n      const handler = this.handlers[handlerStart] as any\n      handler && handler(state)\n    }\n\n    // whenever a flag is set, we run the default on[Gesture] function\n    // i.e. GestureFlag.OnStart would trigger both onDragStart and onDrag\n    const handler = this.handlers[handlerKey] as any\n    if (handler) {\n      const newMemo = handler(state)\n      this.state[stateKey].memo = newMemo !== undefined ? newMemo : this.state[stateKey].memo\n    }\n\n    if (gestureFlag === GestureFlag.OnEnd) {\n      const handlerEnd = `${handlerKey}End` as keyof GestureHandlers\n      const handler = this.handlers[handlerEnd] as any\n      handler && handler(state)\n    }\n  }\n\n  /**\n   * Commodity function to let recognizers simply add listeners to config.window\n   * @param stateKey\n   * @param listeners\n   */\n  public addWindowListeners = (stateKey: StateKey, listeners: [string, Fn][]): void => {\n    if (!this.config.window) return\n    // we use this.windowListeners to keep track of the listeners we add\n    this.windowListeners[stateKey] = listeners\n    addListeners(this.config.window, listeners, this.config.event)\n  }\n\n  // commodity function to let recognizers simply remove listeners from config.window\n  public removeWindowListeners = (stateKey: StateKey): void => {\n    if (!this.config.window) return\n    const listeners = this.windowListeners[stateKey]\n    if (listeners) {\n      removeListeners(this.config.window, listeners, this.config.event)\n      delete this.windowListeners[stateKey]\n    }\n  }\n\n  /**\n   * Adds a recognizer to this.bindings\n   * @param recognizer\n   */\n  private addRecognizer = (recognizer: CoordinatesRecognizer | DistanceAngleRecognizer): void => {\n    recognizer.getEventBindings().map(this.addEventBindings)\n  }\n\n  /**\n   * this.bindings is an object which keys match ReactEventHandlerKeys (onMouseMove, onTouchStart...).\n   * Since a recognizer might want to bind a handler function to an event key already used by a previously\n   * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\n   * that key.\n   */\n  private addEventBindings = ([eventNames, fn]: [ReactEventHandlerKey | ReactEventHandlerKey[], Fn]): void => {\n    const eventNamesArray = !Array.isArray(eventNames) ? [eventNames] : eventNames\n\n    eventNamesArray.forEach(eventName => {\n      this.bindings[eventName] = this.bindings[eventName] ? [...(<Fn[]>this.bindings[eventName]), fn] : [fn]\n    })\n  }\n\n  /**\n   * When config.domTarget is set, this function will add dom listeners to it\n   */\n  private addDomTargetListeners = (): void => {\n    const { domTarget } = this.config\n\n    // we iterate on the entries of this.binding\n    // for each event, we chain the array of functions mapped to it\n    // and push it to this.domListeners\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      this.domListeners.push([event.substr(2).toLowerCase(), chainFns(...(<Fn[]>fns))])\n    })\n\n    addListeners(<EventTarget>domTarget, this.domListeners, this.config.event)\n  }\n\n  /**\n   * getBindings will return an object that will be bound by users\n   * to the react component they want to interact with\n   */\n  private getBindings = (): ReactEventHandlers => {\n    const output: ReactEventHandlers = {}\n    const captureString = this.config.event.capture ? 'Capture' : ''\n\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      const fnsArray = Array.isArray(fns) ? fns : [fns]\n      const key = (event + captureString) as ReactEventHandlerKey\n      output[key] = chainFns(...(<Fn[]>fnsArray))\n    })\n\n    return output\n  }\n\n  public bind = (...args: any[]): Fn | ReactEventHandlers => {\n    // if handlers contains {onDragStart, onDrag, onDragEnd, onMoveStart, onMove}\n    // actions will skip on[Gesture][\"Start\"|\"End\"] functions and include\n    // ['onDrag', 'onMove']\n    const actions: Set<HandlerKey | undefined> = new Set(\n      Object.keys(this.handlers)\n        .filter(k => k.indexOf('on') === 0)\n        .map(k => {\n          const match = k.match(/(on[A-Z][a-z]+)/)\n          return match ? <HandlerKey>match[1] : undefined\n        })\n    )\n\n    const { domTarget } = this.config\n\n    const genuineHandlers = { ...this.handlers }\n\n    // cleaning before adding\n    this.cleanOnBind()\n\n    if (actions.has('onDrag')) {\n      this.addRecognizer(new DragRecognizer(this, args))\n      delete genuineHandlers.onDrag\n      delete genuineHandlers.onDragStart\n      delete genuineHandlers.onDragEnd\n    }\n    if (actions.has('onScroll')) {\n      this.addRecognizer(new ScrollRecognizer(this, args))\n      delete genuineHandlers.onScroll\n      delete genuineHandlers.onScrollStart\n      delete genuineHandlers.onScrollEnd\n    }\n    if (actions.has('onWheel')) {\n      this.addRecognizer(new WheelRecognizer(this, args))\n      delete genuineHandlers.onWheel\n      delete genuineHandlers.onWheelStart\n      delete genuineHandlers.onWheelEnd\n    }\n    if (actions.has('onMove')) {\n      this.addRecognizer(new MoveRecognizer(this, args))\n      delete genuineHandlers.onMove\n      delete genuineHandlers.onMoveStart\n      delete genuineHandlers.onMoveEnd\n    }\n    if (actions.has('onHover')) {\n      this.addRecognizer(new HoverRecognizer(this, args))\n      delete genuineHandlers.onHover\n    }\n    if (actions.has('onPinch')) {\n      // since react doesn't have handlers for gesture events we can only use them\n      // domTarget is set (and when the browser supprots them).\n      if (domTarget && supportsGestureEvent()) {\n        this.addRecognizer(new PinchWebKitGestureRecognizer(this, args))\n      } else {\n        this.addRecognizer(new PinchRecognizer(this, args))\n        this.addRecognizer(new PinchWheelRecognizer(this, args))\n      }\n      delete genuineHandlers.onPinch\n      delete genuineHandlers.onPinchStart\n      delete genuineHandlers.onPinchEnd\n    }\n\n    // we also add event bindings for genuine handlers\n    Object.entries(genuineHandlers).map(([event, fn]) => {\n      // we're cheating when it comes to event type :(\n      this.addEventBindings([<ReactEventHandlerKey>event, <Fn>fn])\n    })\n\n    // if config.domTarget is set we add event listeners to it and return the clean function\n    if (domTarget) {\n      this.addDomTargetListeners()\n      return this.clean\n    }\n\n    // if not, we return an object that contains gesture handlers mapped to react handler event keys\n    return this.getBindings()\n  }\n}\n","import React from 'react'\nimport GestureController from './controllers/GestureController'\nimport { Handler, GestureHandlersPartial, GestureConfig, Coordinates, Fn, ReactEventHandlers, DistanceAngle } from './types'\nimport { defaultConfig } from './defaults'\n\n/** API\n * Default Drag:\n * const bind = useGesture(() => { ... })\n *\n * Handlers object:\n * const bind = useGesture({ onDrag: () => { ... }, onMove: () => { ... } })\n *\n * DomTarget:\n * const bind = useGesture({ onScroll: () => { ... } }, { domTarget: window })\n * React.useEffect(bind, [bind])\n */\n\ntype GetBinderTypeFromDomTarget<T extends Partial<GestureConfig>> = T['domTarget'] extends object ? Fn : ReactEventHandlers\n\nexport function useGesture<Config extends Partial<GestureConfig>>(\n  handlers: GestureHandlersPartial | Handler<Coordinates>,\n  config?: Config\n): (...args: any[]) => GetBinderTypeFromDomTarget<Config> {\n  // the gesture controller will keep track of all gesture states\n  const gestureController = React.useRef<GestureController>()\n\n  if (!gestureController.current) {\n    // we initialize the gesture controller once\n    gestureController.current = new GestureController(getDerivedHandlers(handlers), getDerivedConfig(config))\n  }\n\n  React.useEffect(() => {\n    // every time handlers or config change, we let the gesture controller compute\n    // them so that the gesture handlers functions are aware of the changes\n    gestureController.current!.config = getDerivedConfig(config)\n    gestureController.current!.handlers = getDerivedHandlers(handlers)\n  }, [handlers, config])\n\n  // when the user component unmounts, we run our gesture controller clean function\n  React.useEffect(() => gestureController.current!.clean, [])\n\n  // we return the bind function of our controller, which returns an binding object or\n  // a cleaning function depending on whether config.domTarget is set\n  return gestureController.current.bind as (...args: any[]) => GetBinderTypeFromDomTarget<Config>\n}\n\n/* SHORTHAND HANDLERS */\nexport const useDrag = (handler: Handler<Coordinates>, config?: Partial<GestureConfig>) => useGesture({ onDrag: handler }, config)\nexport const useMove = (handler: Handler<Coordinates>, config?: Partial<GestureConfig>) => useGesture({ onMove: handler }, config)\nexport const useHover = (handler: Handler<Coordinates>, config?: Partial<GestureConfig>) => useGesture({ onHover: handler }, config)\nexport const useScroll = (handler: Handler<Coordinates>, config?: Partial<GestureConfig>) => useGesture({ onScroll: handler }, config)\nexport const useWheel = (handler: Handler<Coordinates>, config?: Partial<GestureConfig>) => useGesture({ onWheel: handler }, config)\nexport const usePinch = (handler: Handler<DistanceAngle>, config?: Partial<GestureConfig>) => useGesture({ onPinch: handler }, config)\n\nfunction getDerivedHandlers(handlers: GestureHandlersPartial | Handler<Coordinates>): GestureHandlersPartial {\n  if (typeof handlers === 'function') return { onDrag: handlers }\n\n  const { onAction, ...rest } = handlers\n  const derivedHandlers = rest as GestureHandlersPartial\n\n  if (onAction) derivedHandlers.onDrag = onAction\n\n  return derivedHandlers\n}\n\nfunction getDerivedConfig(config?: Partial<GestureConfig>): GestureConfig {\n  const derivedConfig = { ...defaultConfig, ...config }\n  const { domTarget } = derivedConfig\n  const realDomTarget = domTarget && 'current' in domTarget ? domTarget.current : domTarget\n  derivedConfig.domTarget = realDomTarget\n\n  return derivedConfig\n}\n"],"names":["GestureFlag","noop","chainFns","fns","args","forEach","fn","addV","v1","v2","map","v","i","subV","setListeners","add","el","listeners","options","action","type","addListeners","removeListeners","getModifierKeys","event","shiftKey","altKey","metaKey","ctrlKey","getScrollEventData","currentTarget","scrollX","scrollY","scrollLeft","scrollTop","values","getWheelEventData","deltaX","deltaY","getPointerEventData","touches","buttons","changedTouches","touchEvents","length","clientX","clientY","down","getTwoTouchesEventData","dx","dy","da","Math","hypot","atan2","PI","origin","calculateVelocity","diff","delta_t","len","calculateVelocities","Array","fill","calculateDistance","delta","calculateDirection","calculateAllKinematics","velocities","velocity","distance","direction","supportsGestureEvent","GestureEvent","e","mappedKeys","drag","stateKey","handlerKey","pinch","move","scroll","wheel","hover","defaultConfig","domTarget","undefined","passive","capture","pointerEvents","window","transform","x","y","enabled","initialCommon","pointerId","initial","previous","local","lastLocal","first","last","active","time","cancel","canceled","memo","initialCoordinates","xy","vxvy","initialDistanceAngle","vdva","turns","initialState","shared","hovering","scrolling","wheeling","dragging","moving","pinching","genericEndState","Recognizer","gestureKey","controller","config","callback","ms","timeouts","setTimeout","clearTimeout","state","addWindowListeners","removeWindowListeners","sharedState","gestureState","gestureFlag","updateState","getState","getTransformConfig","timeStamp","CoordinatesRecognizer","Object","DragRecognizer","isEnabled","rest","pointerEventsEnabled","setPointerCapture","dragListeners","onChange","onEnd","startState","getStartState","onCancel","OnStart","kinematics","getKinematics","OnChange","releasePointerCapture","OnEnd","requestAnimationFrame","getEventBindings","onStart","ScrollRecognizer","WheelRecognizer","eventValues","MoveRecognizer","HoverRecognizer","fireGestureHandler","DistanceAngleRecognizer","d","a","diff_d","diff_a","newTurns","abs","sign","delta_d","delta_a","PinchRecognizer","PinchWheelRecognizer","preventDefault","SCALE_FACTOR","PinchWebKitGestureRecognizer","scale","rotation","updateTouchData","GestureController","handlers","cleanOnBind","keys","windowListeners","bindings","domListeners","pinchState","coordinatesState","temp","handlerStart","handler","newMemo","handlerEnd","recognizer","addEventBindings","eventNames","eventNamesArray","isArray","eventName","entries","push","substr","toLowerCase","output","captureString","fnsArray","key","actions","Set","filter","k","indexOf","match","genuineHandlers","has","addRecognizer","onDrag","onDragStart","onDragEnd","onScroll","onScrollStart","onScrollEnd","onWheel","onWheelStart","onWheelEnd","onMove","onMoveStart","onMoveEnd","onHover","onPinch","onPinchStart","onPinchEnd","addDomTargetListeners","clean","getBindings","useGesture","gestureController","React","useRef","current","getDerivedHandlers","getDerivedConfig","useEffect","bind","useDrag","useMove","useHover","useScroll","useWheel","usePinch","onAction","derivedHandlers","derivedConfig","realDomTarget"],"mappings":"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"}