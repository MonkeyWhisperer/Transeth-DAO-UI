{"version":3,"sources":["../src/Transport.js"],"names":["TransportError","TransportStatusError","StatusCodes","getAltStatusMessage","Transport","exchangeTimeout","_events","send","cla","ins","p1","p2","data","Buffer","alloc","statusList","OK","length","exchange","concat","from","response","sw","readUInt16BE","some","s","exchangeAtomicImpl","f","exchangeBusyPromise","resolveBusy","busyPromise","Promise","r","res","_appAPIlock","eventName","cb","on","removeListener","event","args","emit","console","warn","self","methods","scrambleKey","methodName","decorateAppAPIMethod","ctx","reject","setScrambleKey","apply","openTimeout","listenTimeout","resolve","found","sub","listen","next","unsubscribe","listenTimeoutId","clearTimeout","open","e","descriptor","then","error","complete","ErrorMessage_NoDeviceFound","setTimeout","ErrorMessage_ListenTimeout"],"mappings":"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","file":"Transport.js","sourcesContent":["//@flow\n\nimport EventEmitter from \"events\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  TransportError,\n  StatusCodes,\n  getAltStatusMessage,\n  TransportStatusError\n} from \"@ledgerhq/errors\";\n\nexport {\n  TransportError,\n  TransportStatusError,\n  StatusCodes,\n  getAltStatusMessage\n};\n\n/**\n */\nexport type Subscription = { unsubscribe: () => void };\n\n/**\n */\nexport type Device = Object;\n\n/**\n * type: add or remove event\n * descriptor: a parameter that can be passed to open(descriptor)\n * deviceModel: device info on the model (is it a nano s, nano x, ...)\n * device: transport specific device info\n */\nexport type DescriptorEvent<Descriptor> = {\n  type: \"add\" | \"remove\",\n  descriptor: Descriptor,\n  deviceModel?: ?DeviceModel,\n  device?: Device\n};\n/**\n */\nexport type Observer<Ev> = $ReadOnly<{\n  next: (event: Ev) => mixed,\n  error: (e: any) => mixed,\n  complete: () => mixed\n}>;\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nexport default class Transport<Descriptor> {\n  exchangeTimeout: number = 30000;\n\n  /**\n   * Statically check if a transport is supported on the user's platform/browser.\n   */\n  static +isSupported: () => Promise<boolean>;\n\n  /**\n   * List once all available descriptors. For a better granularity, checkout `listen()`.\n   * @return a promise of descriptors\n   * @example\n   * TransportFoo.list().then(descriptors => ...)\n   */\n  static +list: () => Promise<Array<Descriptor>>;\n\n  /**\n   * Listen all device events for a given Transport. The method takes an Obverver of DescriptorEvent and returns a Subscription (according to Observable paradigm https://github.com/tc39/proposal-observable )\n   * a DescriptorEvent is a `{ descriptor, type }` object. type can be `\"add\"` or `\"remove\"` and descriptor is a value you can pass to `open(descriptor)`.\n   * each listen() call will first emit all potential device already connected and then will emit events can come over times,\n   * for instance if you plug a USB device after listen() or a bluetooth device become discoverable.\n   * @param observer is an object with a next, error and complete function (compatible with observer pattern)\n   * @return a Subscription object on which you can `.unsubscribe()` to stop listening descriptors.\n   * @example\nconst sub = TransportFoo.listen({\n  next: e => {\n    if (e.type===\"add\") {\n      sub.unsubscribe();\n      const transport = await TransportFoo.open(e.descriptor);\n      ...\n    }\n  },\n  error: error => {},\n  complete: () => {}\n})\n   */\n  static +listen: (\n    observer: Observer<DescriptorEvent<Descriptor>>\n  ) => Subscription;\n\n  /**\n   * attempt to create a Transport instance with potentially a descriptor.\n   * @param descriptor: the descriptor to open the transport with.\n   * @param timeout: an optional timeout\n   * @return a Promise of Transport instance\n   * @example\nTransportFoo.open(descriptor).then(transport => ...)\n   */\n  static +open: (\n    descriptor: Descriptor,\n    timeout?: number\n  ) => Promise<Transport<Descriptor>>;\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  +exchange: (apdu: Buffer) => Promise<Buffer>;\n\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n  +setScrambleKey: (key: string) => void;\n\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n  +close: () => Promise<void>;\n\n  _events = new EventEmitter();\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName: string, cb: Function) {\n    this._events.on(eventName, cb);\n  }\n\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n  off(eventName: string, cb: Function) {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event: string, ...args: *) {\n    this._events.emit(event, ...args);\n  }\n\n  /**\n   * Enable or not logs of the binary exchange\n   */\n  setDebugMode() {\n    console.warn(\n      \"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\"\n    );\n  }\n\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n  setExchangeTimeout(exchangeTimeout: number) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n  send = async (\n    cla: number,\n    ins: number,\n    p1: number,\n    p2: number,\n    data: Buffer = Buffer.alloc(0),\n    statusList: Array<number> = [StatusCodes.OK]\n  ): Promise<Buffer> => {\n    if (data.length >= 256) {\n      throw new TransportError(\n        \"data.length exceed 256 bytes limit. Got: \" + data.length,\n        \"DataLengthTooBig\"\n      );\n    }\n    const response = await this.exchange(\n      Buffer.concat([\n        Buffer.from([cla, ins, p1, p2]),\n        Buffer.from([data.length]),\n        data\n      ])\n    );\n    const sw = response.readUInt16BE(response.length - 2);\n    if (!statusList.some(s => s === sw)) {\n      throw new TransportStatusError(sw);\n    }\n    return response;\n  };\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\nTransportFoo.create().then(transport => ...)\n   */\n  static create(\n    openTimeout?: number = 3000,\n    listenTimeout?: number\n  ): Promise<Transport<Descriptor>> {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: e => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: e => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          if (!found) {\n            reject(\n              new TransportError(\n                this.ErrorMessage_NoDeviceFound,\n                \"NoDeviceFound\"\n              )\n            );\n          }\n        }\n      });\n      const listenTimeoutId = listenTimeout\n        ? setTimeout(() => {\n            sub.unsubscribe();\n            reject(\n              new TransportError(\n                this.ErrorMessage_ListenTimeout,\n                \"ListenTimeout\"\n              )\n            );\n          }, listenTimeout)\n        : null;\n    });\n  }\n\n  exchangeBusyPromise: ?Promise<void>;\n\n  // $FlowFixMe\n  exchangeAtomicImpl = async f => {\n    if (this.exchangeBusyPromise) {\n      throw new TransportError(\"Transport race condition\", \"RaceCondition\");\n    }\n    let resolveBusy;\n    const busyPromise = new Promise(r => {\n      resolveBusy = r;\n    });\n    this.exchangeBusyPromise = busyPromise;\n    try {\n      const res = await f();\n      return res;\n    } finally {\n      if (resolveBusy) resolveBusy();\n      this.exchangeBusyPromise = null;\n    }\n  };\n\n  decorateAppAPIMethods(\n    self: Object,\n    methods: Array<string>,\n    scrambleKey: string\n  ) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(\n        methodName,\n        self[methodName],\n        self,\n        scrambleKey\n      );\n    }\n  }\n\n  _appAPIlock = null;\n  decorateAppAPIMethod<R, A: any[]>(\n    methodName: string,\n    f: (...args: A) => Promise<R>,\n    ctx: *,\n    scrambleKey: string\n  ): (...args: A) => Promise<R> {\n    return async (...args) => {\n      const { _appAPIlock } = this;\n      if (_appAPIlock) {\n        return Promise.reject(\n          new TransportError(\n            \"Ledger Device is busy (lock \" + _appAPIlock + \")\",\n            \"TransportLocked\"\n          )\n        );\n      }\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n  static ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  static ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n}\n"]}