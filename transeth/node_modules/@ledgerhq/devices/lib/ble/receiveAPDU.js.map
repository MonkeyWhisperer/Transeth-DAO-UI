{"version":3,"sources":["../../src/ble/receiveAPDU.js"],"names":["TagId","receiveAPDU","rawStream","create","notifiedIndex","notifiedDataLength","notifiedData","Buffer","alloc","sub","subscribe","complete","o","error","unsubscribe","String","e","next","tag","value","readUInt8","index","readUInt16BE","data","slice","toString","concat","length"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AAEA,IAAMA,QAAQ,IAAd;;AAEA;;;AACO,IAAMC,oCAAc,SAAdA,WAAc,CACzBC,SADyB;AAAA,SAGzB,iBAAWC,MAAX,CAAkB,aAAK;AACrB,QAAIC,gBAAgB,CAApB;AACA,QAAIC,qBAAqB,CAAzB;AACA,QAAIC,eAAeC,OAAOC,KAAP,CAAa,CAAb,CAAnB;;AAEA,QAAMC,MAAMP,UAAUQ,SAAV,CAAoB;AAC9BC,gBAAU,oBAAM;AACdC,UAAEC,KAAF,CAAQ,gCAAR;AACAJ,YAAIK,WAAJ;AACD,OAJ6B;AAK9BD,aAAO,kBAAK;AACV,uBAAI,WAAJ,EAAiB,oBAAoBE,OAAOC,CAAP,CAArC;AACAJ,UAAEC,KAAF,CAAQG,CAAR;AACAP,YAAIK,WAAJ;AACD,OAT6B;AAU9BG,YAAM,qBAAS;AACb,YAAMC,MAAMC,MAAMC,SAAN,CAAgB,CAAhB,CAAZ;AACA,YAAMC,QAAQF,MAAMG,YAAN,CAAmB,CAAnB,CAAd;AACA,YAAIC,OAAOJ,MAAMK,KAAN,CAAY,CAAZ,CAAX;;AAEA,YAAIN,QAAQlB,KAAZ,EAAmB;AACjBY,YAAEC,KAAF,CACE,2BAAmB,iBAAiBK,IAAIO,QAAJ,CAAa,EAAb,CAApC,EAAsD,YAAtD,CADF;AAGA;AACD;;AAED,YAAIrB,kBAAkBiB,KAAtB,EAA6B;AAC3BT,YAAEC,KAAF,CACE,2BACE,gEACEQ,KADF,GAEE,gBAFF,GAGEjB,aAJJ,EAKE,iBALF,CADF;AASA;AACD;;AAED,YAAIiB,UAAU,CAAd,EAAiB;AACfhB,+BAAqBkB,KAAKD,YAAL,CAAkB,CAAlB,CAArB;AACAC,iBAAOA,KAAKC,KAAL,CAAW,CAAX,CAAP;AACD;AACDpB;AACAE,uBAAeC,OAAOmB,MAAP,CAAc,CAACpB,YAAD,EAAeiB,IAAf,CAAd,CAAf;AACA,YAAIjB,aAAaqB,MAAb,GAAsBtB,kBAA1B,EAA8C;AAC5CO,YAAEC,KAAF,CACE,2BACE,+DACEP,aAAaqB,MADf,GAEE,gBAFF,GAGEtB,kBAJJ,EAKE,gBALF,CADF;AASA;AACD;AACD,YAAIC,aAAaqB,MAAb,KAAwBtB,kBAA5B,EAAgD;AAC9CO,YAAEK,IAAF,CAAOX,YAAP;AACAM,YAAED,QAAF;AACAF,cAAIK,WAAJ;AACD;AACF;AA1D6B,KAApB,CAAZ;;AA6DA,WAAO,YAAM;AACXL,UAAIK,WAAJ;AACD,KAFD;AAGD,GArED,CAHyB;AAAA,CAApB","file":"receiveAPDU.js","sourcesContent":["// @flow\n\nimport { TransportError, DisconnectedDevice } from \"@ledgerhq/errors\";\nimport { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\n\nconst TagId = 0x05;\n\n// operator that transform the input raw stream into one apdu response and finishes\nexport const receiveAPDU = (\n  rawStream: Observable<Buffer>\n): Observable<Buffer> =>\n  Observable.create(o => {\n    let notifiedIndex = 0;\n    let notifiedDataLength = 0;\n    let notifiedData = Buffer.alloc(0);\n\n    const sub = rawStream.subscribe({\n      complete: () => {\n        o.error(new DisconnectedDevice());\n        sub.unsubscribe();\n      },\n      error: e => {\n        log(\"ble-error\", \"in receiveAPDU \" + String(e));\n        o.error(e);\n        sub.unsubscribe();\n      },\n      next: value => {\n        const tag = value.readUInt8(0);\n        const index = value.readUInt16BE(1);\n        let data = value.slice(3);\n\n        if (tag !== TagId) {\n          o.error(\n            new TransportError(\"Invalid tag \" + tag.toString(16), \"InvalidTag\")\n          );\n          return;\n        }\n\n        if (notifiedIndex !== index) {\n          o.error(\n            new TransportError(\n              \"BLE: Invalid sequence number. discontinued chunk. Received \" +\n                index +\n                \" but expected \" +\n                notifiedIndex,\n              \"InvalidSequence\"\n            )\n          );\n          return;\n        }\n\n        if (index === 0) {\n          notifiedDataLength = data.readUInt16BE(0);\n          data = data.slice(2);\n        }\n        notifiedIndex++;\n        notifiedData = Buffer.concat([notifiedData, data]);\n        if (notifiedData.length > notifiedDataLength) {\n          o.error(\n            new TransportError(\n              \"BLE: received too much data. discontinued chunk. Received \" +\n                notifiedData.length +\n                \" but expected \" +\n                notifiedDataLength,\n              \"BLETooMuchData\"\n            )\n          );\n          return;\n        }\n        if (notifiedData.length === notifiedDataLength) {\n          o.next(notifiedData);\n          o.complete();\n          sub.unsubscribe();\n        }\n      }\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  });\n"]}