"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nodeHid = require("node-hid");

var _nodeHid2 = _interopRequireDefault(_nodeHid);

var _hwTransportNodeHidNoevents = require("@ledgerhq/hw-transport-node-hid-noevents");

var _hwTransportNodeHidNoevents2 = _interopRequireDefault(_hwTransportNodeHidNoevents);

var _devices = require("@ledgerhq/devices");

var _errors = require("@ledgerhq/errors");

var _listenDevices2 = require("./listenDevices");

var _listenDevices3 = _interopRequireDefault(_listenDevices2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var listenDevicesDebounce = 500;
var listenDevicesPollingSkip = function listenDevicesPollingSkip() {
  return false;
};

/**
 * node-hid Transport implementation
 * @example
 * import TransportNodeHid from "@ledgerhq/hw-transport-node-hid";
 * ...
 * TransportNodeHid.create().then(transport => ...)
 */

var TransportNodeHid = function (_TransportNodeHidNoEv) {
  _inherits(TransportNodeHid, _TransportNodeHidNoEv);

  function TransportNodeHid() {
    _classCallCheck(this, TransportNodeHid);

    return _possibleConstructorReturn(this, (TransportNodeHid.__proto__ || Object.getPrototypeOf(TransportNodeHid)).apply(this, arguments));
  }

  _createClass(TransportNodeHid, null, [{
    key: "open",


    /**
     * if path="" is not provided, the library will take the first device
     */


    /**
     *
     */


    /**
     *
     */

    /**
     *
     */
    value: function open(path) {
      return Promise.resolve().then(function () {
        if (path) {
          return new TransportNodeHid(new _nodeHid2.default.HID(path));
        }
        var device = (0, _hwTransportNodeHidNoevents.getDevices)()[0];
        if (!device) throw new _errors.TransportError("NoDevice", "NoDevice");
        return new TransportNodeHid(new _nodeHid2.default.HID(device.path));
      });
    }

    /**
     */


    /**
     *
     */


    /**
     *
     */

  }]);

  return TransportNodeHid;
}(_hwTransportNodeHidNoevents2.default);

TransportNodeHid.isSupported = _hwTransportNodeHidNoevents2.default.isSupported;
TransportNodeHid.list = _hwTransportNodeHidNoevents2.default.list;

TransportNodeHid.setListenDevicesDebounce = function (delay) {
  listenDevicesDebounce = delay;
};

TransportNodeHid.setListenDevicesPollingSkip = function (conditionToSkip) {
  listenDevicesPollingSkip = conditionToSkip;
};

TransportNodeHid.setListenDevicesDebug = function () {
  console.warn("setListenDevicesDebug is deprecated. Use @ledgerhq/logs instead. No logs will get emitted there anymore.");
};

TransportNodeHid.listen = function (observer) {
  var unsubscribed = false;
  Promise.resolve((0, _hwTransportNodeHidNoevents.getDevices)()).then(function (devices) {
    // this needs to run asynchronously so the subscription is defined during this phase
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = devices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var device = _step.value;

        if (!unsubscribed) {
          var descriptor = device.path;
          var deviceModel = (0, _devices.identifyUSBProductId)(device.productId);
          observer.next({ type: "add", descriptor: descriptor, device: device, deviceModel: deviceModel });
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });

  var _listenDevices = (0, _listenDevices3.default)(listenDevicesDebounce, listenDevicesPollingSkip),
      events = _listenDevices.events,
      stop = _listenDevices.stop;

  var onAdd = function onAdd(device) {
    if (unsubscribed || !device) return;
    var deviceModel = (0, _devices.identifyUSBProductId)(device.productId);
    observer.next({
      type: "add",
      descriptor: device.path,
      deviceModel: deviceModel,
      device: device
    });
  };
  var onRemove = function onRemove(device) {
    if (unsubscribed || !device) return;
    var deviceModel = (0, _devices.identifyUSBProductId)(device.productId);
    observer.next({
      type: "remove",
      descriptor: device.path,
      deviceModel: deviceModel,
      device: device
    });
  };
  events.on("add", onAdd);
  events.on("remove", onRemove);
  function unsubscribe() {
    unsubscribed = true;
    events.removeListener("add", onAdd);
    events.removeListener("remove", onRemove);
    stop();
  }
  return { unsubscribe: unsubscribe };
};

exports.default = TransportNodeHid;
//# sourceMappingURL=TransportNodeHid.js.map