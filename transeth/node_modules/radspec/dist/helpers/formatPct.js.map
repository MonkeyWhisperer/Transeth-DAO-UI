{"version":3,"sources":["../../src/helpers/formatPct.js"],"names":["value","base","precision","valueBn","BN","baseBn","oneHundred","formattedAmount","mul","type"],"mappings":"4QAGe,IACb;;;;;;;KAQA,MAAOA,KAAP,CAAcC,IAAI,CAAG,qBAAO,EAAP,CAArB,CAAiCC,SAAS,CAAG,CAA7C,GAAmD,MAC3CC,CAAAA,OAAO,CAAG,GAAIC,YAAJ,CAAOJ,KAAP,CADiC,CAE3CK,MAAM,CAAG,GAAID,YAAJ,CAAOH,IAAP,CAFkC,CAI3CK,UAAU,CAAG,qBAAO,CAAP,CAJ8B,CAK3CC,eAAe,CAAG,uBAASJ,OAAO,CAACK,GAAR,CAAYF,UAAZ,CAAT,CAAkCD,MAAlC,EAAiDH,SAAjD,CALyB,CAOjD,MAAO,CACLO,IAAI,CAAE,QADD,CAELT,KAAK,CAAG,GAAEO,eAAgB,EAFrB,CAIR,C","sourcesContent":["import BN from 'bn.js'\nimport { formatBN, tenPow } from './lib/formatBN'\n\nexport default () =>\n  /**\n   * Format a percentage amount\n   *\n   * @param {*} value The number to be formatted as a percentage\n   * @param {*} [base=10^18] The number that is considered to be 100% when calculating the percentage\n   * @param {*} [precision=2] The number of decimal places to format to\n   * @return {Promise<radspec/evaluator/TypedValue>}\n   */\n  async (value, base = tenPow(18), precision = 2) => {\n    const valueBn = new BN(value)\n    const baseBn = new BN(base)\n\n    const oneHundred = tenPow(2)\n    const formattedAmount = formatBN(valueBn.mul(oneHundred), baseBn, Number(precision))\n\n    return {\n      type: 'string',\n      value: `${formattedAmount}`\n    }\n  }\n"],"file":"formatPct.js"}