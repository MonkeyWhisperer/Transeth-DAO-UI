"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _bn=_interopRequireDefault(require("bn.js"));Object.defineProperty(exports,"__esModule",{value:!0}),exports.formatBN=exports.tenPow=void 0;function sameFraction(first,second){// Check that these two values are the same.
// Note that leading zeros ARE meaningful, and so we do the comparision after
// appending a one as the first digit.
//
// For example, .001 and .00100 are the same value, but .0001 and .001 are not.
return first=first.replace(/0+$/,""),second=second.replace(/0+$/,""),new _bn.default(`1${first}`).eq(new _bn.default(`1${second}`))}const tenPow=x=>new _bn.default(10).pow(new _bn.default(x));exports.tenPow=tenPow;const formatBN=(amount,base,precision,fixed=!1)=>{// Inspired by: https://github.com/ethjs/ethjs-unit/blob/35d870eae1c32c652da88837a71e252a63a83ebb/src/index.js#L83
const baseLength=base.toString().length,whole=amount.div(base).toString();let fraction=amount.mod(base).toString();const zeros="0".repeat(Math.max(0,baseLength-fraction.length-1));fraction=`${zeros}${fraction}`;const fractionWithoutTrailingZeros=fraction.replace(/0+$/,""),fractionAfterPrecision=(fixed?fraction:fractionWithoutTrailingZeros).slice(0,precision);if(!fixed&&(""===fractionAfterPrecision||0===parseInt(fractionAfterPrecision,10)))return whole;const prefix=sameFraction(fractionAfterPrecision,fraction)?"":"~";return`${prefix}${whole}.${fractionAfterPrecision}`};exports.formatBN=formatBN;
//# sourceMappingURL=formatBN.js.map