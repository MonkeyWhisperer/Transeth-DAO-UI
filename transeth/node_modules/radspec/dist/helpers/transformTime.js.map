{"version":3,"sources":["../../src/helpers/transformTime.js"],"names":["BEST_UNIT","ADD_UNIT_FN","Map","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addYears","DISALLOWED_FROM_UNITS","Set","time","toUnit","fromUnit","has","Error","addTime","get","zeroDate","Date","duration","type","value","unit"],"mappings":"4xBAUMA,CAAAA,SAAS,CAAG,M,CAEZC,WAAW,CAAG,GAAIC,CAAAA,GAAJ,CAAQ,CAC1B,CAAC,aAAD,CAAgBC,wBAAhB,CAD0B,CAE1B,CAAC,QAAD,CAAWC,mBAAX,CAF0B,CAG1B,CAAC,QAAD,CAAWC,mBAAX,CAH0B,CAI1B,CAAC,MAAD,CAASC,iBAAT,CAJ0B,CAK1B,CAAC,KAAD,CAAQC,gBAAR,CAL0B,CAM1B,CAAC,MAAD,CAASC,iBAAT,CAN0B,CAO1B,CAAC,OAAD,CAAUC,kBAAV,CAP0B,CAQ1B,CAAC,MAAD,CAASC,iBAAT,CAR0B,CAAR,C,CAUdC,qBAAqB,CAAG,GAAIC,CAAAA,GAAJ,CAAQ,CAAC,aAAD,CAAR,C,cAEf,IACb;;;;;;;;KASA,MAAOC,IAAP,CAAaC,MAAM,CAAGd,SAAtB,CAAiCe,QAAQ,CAAG,QAA5C,GAAyD,CACvD,GAAIJ,qBAAqB,CAACK,GAAtB,CAA0BD,QAA1B,GAAuC,CAACd,WAAW,CAACe,GAAZ,CAAgBD,QAAhB,CAA5C,CACE,KAAM,IAAIE,CAAAA,KAAJ,CAAW,8BAA6BF,QAAS,kCAAjD,CAAN,CAGF,GAAID,MAAM,GAAKd,SAAX,EAAwB,CAACC,WAAW,CAACe,GAAZ,CAAgBF,MAAhB,CAA7B,CACE,KAAM,IAAIG,CAAAA,KAAJ,CAAW,8BAA6BH,MAAO,gCAA/C,CAAN,CANqD,KASjDI,CAAAA,OAAO,CAAGjB,WAAW,CAACkB,GAAZ,CAAgBJ,QAAhB,CATuC,CAWjDK,QAAQ,CAAG,GAAIC,CAAAA,IAAJ,CAAS,CAAT,CAXsC,CAYjDC,QAAQ,CAAGJ,OAAO,CAACE,QAAD,EAAkBP,IAAlB,CAZ+B,CAcvD,MAAO,CACLU,IAAI,CAAE,QADD,CAELC,KAAK,CAAE,kCAAqBJ,QAArB,CAA+BE,QAA/B,CAAyCR,MAAM,GAAKd,SAAX,CAA0C,EAA1C,CAAuB,CAAEyB,IAAI,CAAEX,MAAR,CAAhE,CAFF,CAIR,C","sourcesContent":["import addMilliseconds from 'date-fns/addMilliseconds'\nimport addSeconds from 'date-fns/addSeconds'\nimport addMinutes from 'date-fns/addMinutes'\nimport addHours from 'date-fns/addHours'\nimport addDays from 'date-fns/addDays'\nimport addWeeks from 'date-fns/addWeeks'\nimport addMonths from 'date-fns/addMonths'\nimport addYears from 'date-fns/addYears'\nimport formatDistanceStrict from 'date-fns/formatDistanceStrict'\n\nconst BEST_UNIT = 'best'\n\nconst ADD_UNIT_FN = new Map([\n  ['millisecond', addMilliseconds],\n  ['second', addSeconds],\n  ['minute', addMinutes],\n  ['hour', addHours],\n  ['day', addDays],\n  ['week', addWeeks],\n  ['month', addMonths],\n  ['year', addYears]\n])\nconst DISALLOWED_FROM_UNITS = new Set(['millisecond'])\n\nexport default () =>\n  /**\n   * Transform between time units.\n   *\n   * @param {*} time The base time amount\n   * @param {string} [toUnit] The unit to convert the time to (supported units: 'second', 'minute', 'hour', 'day', 'week', 'month', 'year')\n   *                          Defaults to using the \"best\" unit\n   * @param {string} [fromUnit='second'] The unit to convert the time from (supported units: 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'year')\n   * @return {Promise<radspec/evaluator/TypedValue>}\n   */\n  async (time, toUnit = BEST_UNIT, fromUnit = 'second') => {\n    if (DISALLOWED_FROM_UNITS.has(fromUnit) || !ADD_UNIT_FN.has(fromUnit)) {\n      throw new Error(`@transformTime: Time unit '${fromUnit}' is not supported as a fromUnit`)\n    }\n\n    if (toUnit !== BEST_UNIT && !ADD_UNIT_FN.has(toUnit)) {\n      throw new Error(`@transformTime: Time unit '${toUnit}' is not supported as a toUnit`)\n    }\n\n    const addTime = ADD_UNIT_FN.get(fromUnit)\n\n    const zeroDate = new Date(0)\n    const duration = addTime(zeroDate, Number(time))\n\n    return {\n      type: 'string',\n      value: formatDistanceStrict(zeroDate, duration, toUnit !== BEST_UNIT ? { unit: toUnit } : {})\n    }\n  }\n"],"file":"transformTime.js"}