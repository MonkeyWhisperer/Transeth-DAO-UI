{"version":3,"file":"index.js","sources":["../../src/index.js"],"sourcesContent":["// This component + hook pair can be used to know that a component is in the\n// tree of another component. It works by using a Map containing named contexts.\n\nimport React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\n\n// List of contexts, created as they are requested\nconst insideContexts = new Map()\n\n// Creates the required context if it doesn’t exist.\nfunction getContext(name) {\n  if (!insideContexts.has(name)) {\n    insideContexts.set(name, React.createContext({ inside: false, data: null }))\n  }\n  return insideContexts.get(name)\n}\n\n// Use this component to declare a new “inside context”, by name.\nfunction Inside({ children, data, name }) {\n  const Context = getContext(name)\n  return (\n    <Context.Provider value={{ inside: true, data }}>\n      {children}\n    </Context.Provider>\n  )\n}\n\nInside.propTypes = {\n  children: PropTypes.node,\n  data: PropTypes.any,\n  name: PropTypes.string.isRequired,\n}\n\n// Use this hook to know if a given component is somewhere\n// in the tree of an <Inside> declared with the same name.\nfunction useInside(name) {\n  const { inside, data } = useContext(getContext(name))\n  return [inside, data]\n}\n\nexport { Inside, useInside }\n"],"names":["insideContexts","Map","getContext","name","has","set","React","createContext","inside","data","get","Inside","children","Context","Provider","value","propTypes","PropTypes","node","any","string","isRequired","useContext"],"mappings":"mMAOA,MAAMA,EAAiB,IAAIC,IAG3B,SAASC,EAAWC,UACbH,EAAeI,IAAID,IACtBH,EAAeK,IAAIF,EAAMG,EAAMC,cAAc,CAAEC,QAAQ,EAAOC,KAAM,QAE/DT,EAAeU,IAAIP,GAI5B,SAASQ,GAAOC,SAAEA,EAAFH,KAAYA,EAAZN,KAAkBA,UAC1BU,EAAUX,EAAWC,UAEzBG,gBAACO,EAAQC,UAASC,MAAO,CAAEP,QAAQ,EAAMC,KAAAA,IACtCG,GAKPD,EAAOK,UAAY,CACjBJ,SAAUK,EAAUC,KACpBT,KAAMQ,EAAUE,IAChBhB,KAAMc,EAAUG,OAAOC,+CAKzB,SAAmBlB,SACXK,OAAEA,EAAFC,KAAUA,GAASa,aAAWpB,EAAWC,UACxC,CAACK,EAAQC"}