"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const encoder_1 = __importDefault(require("./src/encoder"));
const subgraph_1 = __importDefault(require("./src/subgraph"));
/**
 * @dev This encoder basically provides an EVM script to migrate all the funds of a DAO to a specific recipient.
 * Funds are fetched from a Vault subgraph, considered an external dependency. This encoder assumes the outputted EVM
 * scripts will be executed through a Voting app, either directly or through a Token Manager app. Additionally, it
 * supports 3 types of DAO layouts in terms of its roles for the asset transfers:
 *  1. Vault: The Voting app has permissions to transfer the Vault's assets.
 *  2. Agent: Same as 1, the Voting app has permissions to transfer the Agent's assets.
 *  3. Finance: The Voting app has permissions to execute payments on the Finance app which has permissions to transfer the Vault's or Agent's assets.
 *
 *  This layouts are specified through the `dao` parameter where the `vault` property is used to indicate the Vault or
 *  Agent app address holding the funds, and `voting` the address of the Voting app. Then, `finance` and `tokenManager`
 *  are both optional to tell whether the assets transfer should be performed through the Finance app and to tell if
 *  the vote should go through the Token Manager respectively.
 *  Finally, `address` is simply used to indicate the DAO address and the `executor` to tell the recipient of the funds.
 */
exports.default = (network, dao) => __awaiter(void 0, void 0, void 0, function* () {
    const assets = yield subgraph_1.default.getAssets(network, dao);
    if (assets.length == 0) {
        return null;
    }
    const script = encoder_1.default.encodeTransferAllCallScript(dao, assets, dao.executor);
    return encoder_1.default.encodeNewVote(dao, script, dao.executor);
});
