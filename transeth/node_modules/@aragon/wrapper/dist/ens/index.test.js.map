{"version":3,"sources":["../../src/ens/index.test.js"],"names":["test","beforeEach","t","ethjsEnsStub","sinon","stub","ens","proxyquire","noCallThru","load","context","afterEach","always","restore","options","provider","sendAsync","prototype","lookup","returns","result","resolve","is","getCall","args","resolveAddressForNode","deepEqual"],"mappings":"sPAIAA,aAAKC,UAAL,CAAgBC,CAAC,EAAI,MACbC,CAAAA,YAAY,CAAGC,eAAMC,IAAN,EADF,CAEbC,GAAG,CAAGC,oBAAWC,UAAX,GAAwBC,IAAxB,CAA6B,SAA7B,CAAwC,CAClD,YAAaN,YADqC,CAAxC,CAFO,CAMnBD,CAAC,CAACQ,OAAF,CAAY,CACVJ,GADU,CAEVH,YAFU,CAIb,CAVD,C,CAYAH,aAAKW,SAAL,CAAeC,MAAf,CAAsB,IAAM,CAC1BR,eAAMS,OAAN,EACD,CAFD,C,CAIA,iBAAK,oBAAL,CAA4BX,CAAD,EAAO,MAC1B,CAAEI,GAAF,CAAOH,YAAP,EAAwBD,CAAC,CAACQ,OADA,CAI1BI,OAAO,CAAG,CACdC,QAAQ,CAAE,CACRC,SAAS,CAAE,CADH,CADI,CAJgB,CAGhC;AAMAb,YAAY,CAACc,SAAb,CAAuBC,MAAvB,CAAgCd,eAAMC,IAAN,GAAac,OAAb,CAAqB,MAArB,CATA,CAUhC;AACA,KAAMC,CAAAA,MAAM,CAAGd,GAAG,CAACe,OAAJ,CAAY,YAAZ,CAA0BP,OAA1B,CAAf,CACA;AACAZ,CAAC,CAACoB,EAAF,CAAKF,MAAL,CAAa,MAAb,CAbgC,CAchClB,CAAC,CAACoB,EAAF,CAAKnB,YAAY,CAACc,SAAb,CAAuBC,MAAvB,CAA8BK,OAA9B,CAAsC,CAAtC,EAAyCC,IAAzC,CAA8C,CAA9C,CAAL,CAAuD,YAAvD,CAdgC,CAehCtB,CAAC,CAACoB,EAAF,CAAKnB,YAAY,CAACoB,OAAb,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B,CAA7B,CAAL,CAAsCV,OAAtC,CACD,CAhBD,C,CAkBA,iBAAK,iCAAL,CAAyCZ,CAAD,EAAO,MACvC,CAAEI,GAAF,CAAOH,YAAP,EAAwBD,CAAC,CAACQ,OADa,CAG7C;AAMAP,YAAY,CAACc,SAAb,CAAuBQ,qBAAvB,CAA+CrB,eAAMC,IAAN,GAAac,OAAb,CAAqB,MAArB,CATF,CAU7C;AACA,KAAMC,CAAAA,MAAM,CAAGd,GAAG,CAACe,OAAJ,CAAY,MAAZ,CAAf,CACA;AACAnB,CAAC,CAACoB,EAAF,CAAKF,MAAL,CAAa,MAAb,CAb6C,CAc7ClB,CAAC,CAACoB,EAAF,CAAKnB,YAAY,CAACc,SAAb,CAAuBQ,qBAAvB,CAA6CF,OAA7C,CAAqD,CAArD,EAAwDC,IAAxD,CAA6D,CAA7D,CAAL,CAAsE,MAAtE,CAd6C,CAe7CtB,CAAC,CAACwB,SAAF,CAAYvB,YAAY,CAACoB,OAAb,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B,CAA7B,CAAZ,CAXqB,CACnBT,QAAQ,CAAE,CACRC,SAAS,OADD,CADS,CAWrB,CACD,CAhBD,C","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport proxyquire from 'proxyquire'\n\ntest.beforeEach(t => {\n  const ethjsEnsStub = sinon.stub()\n  const ens = proxyquire.noCallThru().load('./index', {\n    'ethjs-ens': ethjsEnsStub\n  })\n\n  t.context = {\n    ens,\n    ethjsEnsStub\n  }\n})\n\ntest.afterEach.always(() => {\n  sinon.restore()\n})\n\ntest('should lookup name', (t) => {\n  const { ens, ethjsEnsStub } = t.context\n\n  // arrange\n  const options = {\n    provider: {\n      sendAsync: 2\n    }\n  }\n  ethjsEnsStub.prototype.lookup = sinon.stub().returns('0x01')\n  // act\n  const result = ens.resolve('aragon.eth', options)\n  // assert\n  t.is(result, '0x01')\n  t.is(ethjsEnsStub.prototype.lookup.getCall(0).args[0], 'aragon.eth')\n  t.is(ethjsEnsStub.getCall(0).args[0], options)\n})\n\ntest('should resolve address for node', (t) => {\n  const { ens, ethjsEnsStub } = t.context\n\n  // arrange\n  const hackyOptions = {\n    provider: {\n      sendAsync: undefined\n    }\n  }\n  ethjsEnsStub.prototype.resolveAddressForNode = sinon.stub().returns('0x02')\n  // act\n  const result = ens.resolve('node')\n  // assert\n  t.is(result, '0x02')\n  t.is(ethjsEnsStub.prototype.resolveAddressForNode.getCall(0).args[0], 'node')\n  t.deepEqual(ethjsEnsStub.getCall(0).args[0], hackyOptions)\n})\n"],"file":"index.test.js"}