{"version":3,"sources":["../src/interfaces.test.js"],"names":["test","afterEach","always","sinon","restore","t","plan","forEach","abiName","result","true","Array","isArray","emptyResult","is","artifactName","availableMappings","namespace","appIds","appId","abi","emptyDueToUnknownMapping","emptyDueToUnknownApp","false"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport { getAbi, getArtifact, getAppInfo, hasAppInfo } from './interfaces'\nimport { apmAppId } from './utils/apps'\n\ntest.afterEach.always(() => {\n  sinon.restore()\n})\n\ntest('interfaces: getAbi', async (t) => {\n  t.plan(12)\n  // arrange\n  const availableABIs = [\n    'aragon/ACL',\n    'aragon/AppProxy',\n    'aragon/ERCProxy',\n    'aragon/Forwarder',\n    'aragon/ForwarderFee',\n    'aragon/Kernel',\n    'aragon/EVM Script Registry',\n    'apm/APM Registry',\n    'apm/Repo',\n    'apm/ENS Subdomain Registrar',\n    'standard/ERC20'\n  ]\n  // assert\n  availableABIs.forEach(abiName => {\n    const result = getAbi(abiName)\n    t.true(Array.isArray(result), abiName)\n  })\n\n  const emptyResult = getAbi()\n  t.is(emptyResult, null)\n})\n\ntest('interfaces: getArtifact', async (t) => {\n  t.plan(13)\n  // arrange\n  const availableArtifacts = [\n    'aragon/ACL',\n    'aragon/Kernel',\n    'aragon/EVM Script Registry',\n    'apm/APM Registry',\n    'apm/Repo',\n    'apm/ENS Subdomain Registrar'\n  ]\n  // assert\n  availableArtifacts.forEach(artifactName => {\n    const result = getArtifact(artifactName)\n    t.true('functions' in result)\n    t.true('roles' in result)\n  })\n\n  const emptyResult = getArtifact()\n  t.is(emptyResult, null)\n})\n\ntest('interfaces: getAppInfo', async (t) => {\n  t.plan(29)\n  // arrange\n  const availableMappings = [\n    ['aragon', [\n      apmAppId('acl'),\n      apmAppId('evmreg'),\n      apmAppId('kernel')\n    ]],\n    ['apm', [\n      apmAppId('apm-registry'),\n      apmAppId('apm-repo'),\n      apmAppId('apm-enssub'),\n      apmAppId('apm-registry.open'),\n      apmAppId('apm-repo.open'),\n      apmAppId('apm-enssub.open')\n    ]]\n  ]\n  // assert\n  availableMappings.forEach(([namespace, appIds]) => {\n    appIds.forEach((appId) => {\n      const result = getAppInfo(appId, namespace)\n      t.true(Array.isArray(result.abi))\n      t.true('functions' in result)\n      t.true('roles' in result)\n    })\n  })\n\n  const emptyDueToUnknownMapping = getAppInfo(apmAppId('acl'), 'wrongNamespace')\n  t.is(emptyDueToUnknownMapping, null)\n\n  const emptyDueToUnknownApp = getAppInfo(apmAppId('wrongApp'), 'aragon')\n  t.is(emptyDueToUnknownApp, null)\n})\n\ntest('interfaces: hasAppInfo', async (t) => {\n  t.plan(11)\n  const availableMappings = [\n    ['aragon', [\n      apmAppId('acl'),\n      apmAppId('evmreg'),\n      apmAppId('kernel')\n    ]],\n    ['apm', [\n      apmAppId('apm-registry'),\n      apmAppId('apm-repo'),\n      apmAppId('apm-enssub'),\n      apmAppId('apm-registry.open'),\n      apmAppId('apm-repo.open'),\n      apmAppId('apm-enssub.open')\n    ]]\n  ]\n  // assert\n  availableMappings.forEach(([namespace, appIds]) => {\n    appIds.forEach((appId) => {\n      t.true(hasAppInfo(appId, namespace))\n    })\n  })\n\n  t.false(hasAppInfo(apmAppId('acl'), 'wrongNamespace'))\n  t.false(hasAppInfo(apmAppId('wrongApp'), 'aragon'))\n})\n"],"file":"interfaces.test.js"}