"use strict";var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_ava=_interopRequireDefault(require("ava")),_proxyquire=_interopRequireDefault(require("proxyquire")),_sinon=_interopRequireDefault(require("sinon")),eventsUtils=_interopRequireWildcard(require("../../utils/events"));_ava.default.beforeEach(t=>{const utilsStub={events:eventsUtils},pastEvents=(0,_proxyquire.default)("./past-events",{"../../utils":utilsStub}).default;t.context={pastEvents,utilsStub}}),(0,_ava.default)("should invoke proxy.pastEvents with the correct options",async t=>{const{pastEvents}=t.context;t.plan(2);// arrange
const mockObservable=Symbol("mockObservable"),proxyStub={pastEvents:_sinon.default.stub().returns(mockObservable)},pastEventsObservable=pastEvents({params:["allEvents",{fromBlock:5}]},proxyStub);// assert
t.true(proxyStub.pastEvents.calledOnceWithExactly(["allEvents"],{fromBlock:5})),t.is(pastEventsObservable,mockObservable)}),(0,_ava.default)("should invoke proxy.pastEvents with the correct options for aragonAPIv1",async t=>{const{pastEvents}=t.context;t.plan(2);// arrange
const mockObservable=Symbol("mockObservable"),proxyStub={pastEvents:_sinon.default.stub().returns(mockObservable)},pastEventsObservable=pastEvents({params:[5,10]},proxyStub);// assert
t.true(proxyStub.pastEvents.calledOnceWith(null,{fromBlock:5,toBlock:10})),t.is(pastEventsObservable,mockObservable)}),(0,_ava.default)("should invoke proxy.pastEvents with the correct options for aragonAPIv1 when no fromBlock is passed",async t=>{const{pastEvents}=t.context;t.plan(2);// arrange
const mockObservable=Symbol("mockObservable"),proxyStub={pastEvents:_sinon.default.stub().returns(mockObservable)},pastEventsObservable=pastEvents({params:[]},proxyStub);// assert
t.true(proxyStub.pastEvents.calledOnceWith(null,{fromBlock:void 0,toBlock:void 0})),t.is(pastEventsObservable,mockObservable)});
//# sourceMappingURL=past-events.test.js.map