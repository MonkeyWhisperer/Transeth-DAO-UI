"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0// force cache invalidation
}),exports.default=_default;var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty")),_rxjs=require("rxjs"),_operators=require("rxjs/operators"),_utils=require("../../utils");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable})),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null==arguments[i]?{}:arguments[i],i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key])}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))});return target}// Extract just a few important details about the current app to decrease API surface area
function transformAppInformation(app={},getContentPathFn){const{abi,appId,content,contractAddress,icons,identifier,isForwarder,kernelAddress,name,proxyAddress,roles}=app;let iconsWithBaseUrl;try{iconsWithBaseUrl=icons.map(icon=>_objectSpread(_objectSpread({},icon),{},{src:getContentPathFn(content,icon.src)}))}catch(_){}return{abi,identifier,kernelAddress,name,appAddress:proxyAddress,appId:appId,appImplementationAddress:contractAddress,icons:iconsWithBaseUrl,isForwarder:!!isForwarder,roles}}function _default(request,proxy,wrapper){const operation=request.params[0];let appCategory=request.params[1];// Backwards compatibility with initial RPC API (no parameters passed)
if("all"!==appCategory&&"current"!==appCategory&&(appCategory="all"),void 0===operation)return wrapper.apps;const appWithIdentifier$=(0,_rxjs.combineLatest)(wrapper.apps,wrapper.appIdentifiers).pipe((0,_operators.map)(([apps,identifiers])=>apps.map(app=>_objectSpread(_objectSpread({},app),{},{identifier:identifiers[app.proxyAddress]})))),getContentPathFn=wrapper.apm.getContentPath,app$="current"===appCategory?appWithIdentifier$.pipe((0,_operators.map)(apps=>apps.find(app=>(0,_utils.addressesEqual)(app.proxyAddress,proxy.address))),(0,_operators.map)(app=>transformAppInformation(app,getContentPathFn))):appWithIdentifier$.pipe((0,_operators.map)(apps=>apps.map(app=>transformAppInformation(app,getContentPathFn))));return"observe"===operation?app$:"get"===operation?app$.pipe((0,_operators.first)()):Promise.reject(new Error("Invalid get apps operation"))}
//# sourceMappingURL=get-apps.js.map