{"version":3,"sources":["../../../src/rpc/handlers/events.test.js"],"names":["test","beforeEach","t","utilsStub","events","eventsUtils","default","context","plan","mockObservable","Symbol","proxyStub","sinon","stub","returns","eventsObservable","params","fromBlock","true","calledOnceWithExactly","is","calledOnceWith"],"mappings":"0YAMAA,aAAKC,UAAL,CAAgBC,CAAC,EAAI,MACbC,CAAAA,SAAS,CAAG,CAChBC,MAAM,CAAEC,WADQ,CADC,CAIbD,MAAM,CAAG,wBAAW,UAAX,CAAuB,CACpC,cAAeD,SADqB,CAAvB,EAEZG,OANgB,CAQnBJ,CAAC,CAACK,OAAF,CAAY,CACVH,MADU,CAEVD,SAFU,CAIb,CAZD,C,CAcA,iBAAK,qDAAL,CAA4D,KAAOD,CAAAA,CAAP,EAAa,CACvE,KAAM,CAAEE,MAAF,EAAaF,CAAC,CAACK,OAArB,CAEAL,CAAC,CAACM,IAAF,CAAO,CAAP,CAHuE,CAIvE;AAJuE,KAKjEC,CAAAA,cAAc,CAAGC,MAAM,CAAC,gBAAD,CAL0C,CAMjEC,SAAS,CAAG,CAChBP,MAAM,CAAEQ,eAAMC,IAAN,GAAaC,OAAb,CAAqBL,cAArB,CADQ,CANqD,CAajEM,gBAAgB,CAAGX,MAAM,CAJX,CAClBY,MAAM,CAAE,CAAC,WAAD,CAAc,CAAEC,SAAS,CAAE,CAAb,CAAd,CADU,CAIW,CAAcN,SAAd,CAbwC,CAcvE;AACAT,CAAC,CAACgB,IAAF,CAAOP,SAAS,CAACP,MAAV,CAAiBe,qBAAjB,CAAuC,CAAC,WAAD,CAAvC,CAAsD,CAAEF,SAAS,CAAE,CAAb,CAAtD,CAAP,CAfuE,CAgBvEf,CAAC,CAACkB,EAAF,CAAKL,gBAAL,CAAuBN,cAAvB,CACD,CAjBD,C,CAmBA,iBAAK,qEAAL,CAA4E,KAAOP,CAAAA,CAAP,EAAa,CACvF,KAAM,CAAEE,MAAF,EAAaF,CAAC,CAACK,OAArB,CAEAL,CAAC,CAACM,IAAF,CAAO,CAAP,CAHuF,CAIvF;AAJuF,KAKjFC,CAAAA,cAAc,CAAGC,MAAM,CAAC,gBAAD,CAL0D,CAMjFC,SAAS,CAAG,CAChBP,MAAM,CAAEQ,eAAMC,IAAN,GAAaC,OAAb,CAAqBL,cAArB,CADQ,CANqE,CAcjFM,gBAAgB,CAAGX,MAAM,CAJX,CAClBY,MAAM,CAAE,CAAC,CAAD,CADU,CAIW,CAAcL,SAAd,CAdwD,CAevF;AACAT,CAAC,CAACgB,IAAF,CAAOP,SAAS,CAACP,MAAV,CAAiBiB,cAAjB,CAAgC,IAAhC,CAAsC,CAAEJ,SAAS,CAAE,CAAb,CAAtC,CAAP,CAhBuF,CAiBvFf,CAAC,CAACkB,EAAF,CAAKL,gBAAL,CAAuBN,cAAvB,CACD,CAlBD,C,CAoBA,iBAAK,iGAAL,CAAwG,KAAOP,CAAAA,CAAP,EAAa,CACnH,KAAM,CAAEE,MAAF,EAAaF,CAAC,CAACK,OAArB,CAEAL,CAAC,CAACM,IAAF,CAAO,CAAP,CAHmH,CAInH;AAJmH,KAK7GC,CAAAA,cAAc,CAAGC,MAAM,CAAC,gBAAD,CALsF,CAM7GC,SAAS,CAAG,CAChBP,MAAM,CAAEQ,eAAMC,IAAN,GAAaC,OAAb,CAAqBL,cAArB,CADQ,CANiG,CAc7GM,gBAAgB,CAAGX,MAAM,CAJX,CAClBY,MAAM,CAAE,EADU,CAIW,CAAcL,SAAd,CAdoF,CAenH;AACAT,CAAC,CAACgB,IAAF,CAAOP,SAAS,CAACP,MAAV,CAAiBiB,cAAjB,CAAgC,IAAhC,CAAsC,CAAEJ,SAAS,OAAX,CAAtC,CAAP,CAhBmH,CAiBnHf,CAAC,CAACkB,EAAF,CAAKL,gBAAL,CAAuBN,cAAvB,CACD,CAlBD,C","sourcesContent":["import test from 'ava'\nimport proxyquire from 'proxyquire'\nimport sinon from 'sinon'\n\nimport * as eventsUtils from '../../utils/events'\n\ntest.beforeEach(t => {\n  const utilsStub = {\n    events: eventsUtils\n  }\n  const events = proxyquire('./events', {\n    '../../utils': utilsStub\n  }).default\n\n  t.context = {\n    events,\n    utilsStub\n  }\n})\n\ntest('should invoke proxy.events with the correct options', async (t) => {\n  const { events } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    events: sinon.stub().returns(mockObservable)\n  }\n  const requestStub = {\n    params: ['allEvents', { fromBlock: 5 }]\n  }\n  // act\n  const eventsObservable = events(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.events.calledOnceWithExactly(['allEvents'], { fromBlock: 5 }))\n  t.is(eventsObservable, mockObservable)\n})\n\ntest('should invoke proxy.events with the correct options for aragonAPIv1', async (t) => {\n  const { events } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    events: sinon.stub().returns(mockObservable)\n  }\n  // aragonAPIv1 only passes the fromBlock\n  const requestStub = {\n    params: [5]\n  }\n  // act\n  const eventsObservable = events(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.events.calledOnceWith(null, { fromBlock: 5 }))\n  t.is(eventsObservable, mockObservable)\n})\n\ntest('should invoke proxy.events with the correct options for aragonAPIv1 when no fromBlock is passed', async (t) => {\n  const { events } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    events: sinon.stub().returns(mockObservable)\n  }\n  // aragonAPIv1 does not need to pass the fromBlock\n  const requestStub = {\n    params: []\n  }\n  // act\n  const eventsObservable = events(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.events.calledOnceWith(null, { fromBlock: undefined }))\n  t.is(eventsObservable, mockObservable)\n})\n"],"file":"events.test.js"}