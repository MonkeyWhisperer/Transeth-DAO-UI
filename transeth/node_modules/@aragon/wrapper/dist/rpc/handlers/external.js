"use strict";Object.defineProperty(exports,"__esModule",{value:!0// force cache invalidation
}),exports.call=call,exports.events=events,exports.intent=intent,exports.pastEvents=pastEvents;var _rxjs=require("rxjs"),_operators=require("rxjs/operators"),_configuration=require("../../configuration"),configurationKeys=_interopRequireWildcard(require("../../configuration/keys")),_events=require("../../utils/events");function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!=key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}function call(request,proxy,wrapper){const web3=wrapper.web3,[address,methodAbiFragment,...params]=request.params,contract=new web3.eth.Contract([methodAbiFragment],address);return contract.methods[methodAbiFragment.name](...params).call()}async function intent(request,proxy,wrapper){const[address,methodAbiFragment,...params]=request.params,transactionPath=await wrapper.getExternalTransactionPath(address,methodAbiFragment,params);return wrapper.performTransactionPath(transactionPath,{external:!0})}function events(request,proxy,wrapper){const web3=wrapper.web3,[address,jsonInterface]=request.params,contract=new web3.eth.Contract(jsonInterface,address);// `external_events` RPC compatibility with aragonAPI versions:
//   - aragonAPIv2: `'external_events', [address, jsonInterface, eventNames, eventOptions]`
//   - aragonAPIv1: `'external_events', [address, jsonInterface, fromBlock (optional)]`
let eventNames,eventOptions;4===request.params.length?(eventNames=(0,_events.getEventNames)(request.params[2]),eventOptions=request.params[3]):3>=request.params.length&&(eventNames=["allEvents"],eventOptions={fromBlock:request.params[2]}),null==eventOptions.fromBlock&&(eventOptions.fromBlock=proxy.initializationBlock);let eventSource=1===eventNames.length?(0,_rxjs.fromEvent)(contract.events[eventNames[0]](eventOptions),"data"):(0,_rxjs.fromEvent)(this.contract.events.allEvents(eventOptions),"data").pipe((0,_operators.filter)(event=>eventNames.includes(event.event)));const eventDelay=(0,_configuration.getConfiguration)(configurationKeys.SUBSCRIPTION_EVENT_DELAY)||0;// Small optimization: don't pipe a delay if we don't have to
return eventDelay?eventSource.pipe((0,_operators.delay)(eventDelay)):eventSource}function pastEvents(request,proxy,wrapper){const web3=wrapper.web3,[address,jsonInterface]=request.params,contract=new web3.eth.Contract(jsonInterface,address);// `external_past_events` RPC compatibility with aragonAPI versions:
//   - aragonAPIv2: `'external_past_events', [address, jsonInterface, eventNames, eventOptions]`
//   - aragonAPIv1: `'external_past_events', [address, jsonInterface, eventOptions]`
let eventNames,eventOptions;// The `from`s only unpack the returned Promises (and not the array inside them!)
return(4===request.params.length?(eventNames=(0,_events.getEventNames)(request.params[2]),eventOptions=request.params[3]):3===request.params.length&&(eventNames=["allEvents"],eventOptions=request.params[2]),null==eventOptions.fromBlock&&(eventOptions.fromBlock=proxy.initializationBlock),1===eventNames.length)?(0,_configuration.getConfiguration)(configurationKeys.PAST_EVENTS_BLOCK_SIZE)?(eventOptions.blockSizeLimit=(0,_configuration.getConfiguration)(configurationKeys.PAST_EVENTS_BLOCK_SIZE),(0,_rxjs.from)((0,_events.getPastEventsByBatch)({options:eventOptions,contract:contract,eventName:eventNames[0]}))):(0,_rxjs.from)(contract.getPastEvents(eventNames[0],eventOptions)):(0,_rxjs.from)(contract.getPastEvents("allEvents",eventOptions).then(events=>events.filter(event=>eventNames.includes(event.event))))}
//# sourceMappingURL=external.js.map