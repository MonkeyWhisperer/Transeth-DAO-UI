{"version":3,"sources":["../../../src/rpc/handlers/past-events.test.js"],"names":["test","beforeEach","t","utilsStub","events","eventsUtils","pastEvents","default","context","plan","mockObservable","Symbol","proxyStub","sinon","stub","returns","pastEventsObservable","params","fromBlock","true","calledOnceWithExactly","is","calledOnceWith","toBlock"],"mappings":"0YAMAA,aAAKC,UAAL,CAAgBC,CAAC,EAAI,MACbC,CAAAA,SAAS,CAAG,CAChBC,MAAM,CAAEC,WADQ,CADC,CAIbC,UAAU,CAAG,wBAAW,eAAX,CAA4B,CAC7C,cAAeH,SAD8B,CAA5B,EAEhBI,OANgB,CAQnBL,CAAC,CAACM,OAAF,CAAY,CACVF,UADU,CAEVH,SAFU,CAIb,CAZD,C,CAcA,iBAAK,yDAAL,CAAgE,KAAOD,CAAAA,CAAP,EAAa,CAC3E,KAAM,CAAEI,UAAF,EAAiBJ,CAAC,CAACM,OAAzB,CAEAN,CAAC,CAACO,IAAF,CAAO,CAAP,CAH2E,CAI3E;AAJ2E,KAKrEC,CAAAA,cAAc,CAAGC,MAAM,CAAC,gBAAD,CAL8C,CAMrEC,SAAS,CAAG,CAChBN,UAAU,CAAEO,eAAMC,IAAN,GAAaC,OAAb,CAAqBL,cAArB,CADI,CANyD,CAarEM,oBAAoB,CAAGV,UAAU,CAJnB,CAClBW,MAAM,CAAE,CAAC,WAAD,CAAc,CAAEC,SAAS,CAAE,CAAb,CAAd,CADU,CAImB,CAAcN,SAAd,CAboC,CAc3E;AACAV,CAAC,CAACiB,IAAF,CAAOP,SAAS,CAACN,UAAV,CAAqBc,qBAArB,CAA2C,CAAC,WAAD,CAA3C,CAA0D,CAAEF,SAAS,CAAE,CAAb,CAA1D,CAAP,CAf2E,CAgB3EhB,CAAC,CAACmB,EAAF,CAAKL,oBAAL,CAA2BN,cAA3B,CACD,CAjBD,C,CAmBA,iBAAK,yEAAL,CAAgF,KAAOR,CAAAA,CAAP,EAAa,CAC3F,KAAM,CAAEI,UAAF,EAAiBJ,CAAC,CAACM,OAAzB,CAEAN,CAAC,CAACO,IAAF,CAAO,CAAP,CAH2F,CAI3F;AAJ2F,KAKrFC,CAAAA,cAAc,CAAGC,MAAM,CAAC,gBAAD,CAL8D,CAMrFC,SAAS,CAAG,CAChBN,UAAU,CAAEO,eAAMC,IAAN,GAAaC,OAAb,CAAqBL,cAArB,CADI,CANyE,CAcrFM,oBAAoB,CAAGV,UAAU,CAJnB,CAClBW,MAAM,CAAE,CAAC,CAAD,CAAI,EAAJ,CADU,CAImB,CAAcL,SAAd,CAdoD,CAe3F;AACAV,CAAC,CAACiB,IAAF,CAAOP,SAAS,CAACN,UAAV,CAAqBgB,cAArB,CAAoC,IAApC,CAA0C,CAAEJ,SAAS,CAAE,CAAb,CAAgBK,OAAO,CAAE,EAAzB,CAA1C,CAAP,CAhB2F,CAiB3FrB,CAAC,CAACmB,EAAF,CAAKL,oBAAL,CAA2BN,cAA3B,CACD,CAlBD,C,CAoBA,iBAAK,qGAAL,CAA4G,KAAOR,CAAAA,CAAP,EAAa,CACvH,KAAM,CAAEI,UAAF,EAAiBJ,CAAC,CAACM,OAAzB,CAEAN,CAAC,CAACO,IAAF,CAAO,CAAP,CAHuH,CAIvH;AAJuH,KAKjHC,CAAAA,cAAc,CAAGC,MAAM,CAAC,gBAAD,CAL0F,CAMjHC,SAAS,CAAG,CAChBN,UAAU,CAAEO,eAAMC,IAAN,GAAaC,OAAb,CAAqBL,cAArB,CADI,CANqG,CAcjHM,oBAAoB,CAAGV,UAAU,CAJnB,CAClBW,MAAM,CAAE,EADU,CAImB,CAAcL,SAAd,CAdgF,CAevH;AACAV,CAAC,CAACiB,IAAF,CAAOP,SAAS,CAACN,UAAV,CAAqBgB,cAArB,CAAoC,IAApC,CAA0C,CAAEJ,SAAS,OAAX,CAAwBK,OAAO,OAA/B,CAA1C,CAAP,CAhBuH,CAiBvHrB,CAAC,CAACmB,EAAF,CAAKL,oBAAL,CAA2BN,cAA3B,CACD,CAlBD,C","sourcesContent":["import test from 'ava'\nimport proxyquire from 'proxyquire'\nimport sinon from 'sinon'\n\nimport * as eventsUtils from '../../utils/events'\n\ntest.beforeEach(t => {\n  const utilsStub = {\n    events: eventsUtils\n  }\n  const pastEvents = proxyquire('./past-events', {\n    '../../utils': utilsStub\n  }).default\n\n  t.context = {\n    pastEvents,\n    utilsStub\n  }\n})\n\ntest('should invoke proxy.pastEvents with the correct options', async (t) => {\n  const { pastEvents } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    pastEvents: sinon.stub().returns(mockObservable)\n  }\n  const requestStub = {\n    params: ['allEvents', { fromBlock: 5 }]\n  }\n  // act\n  const pastEventsObservable = pastEvents(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.pastEvents.calledOnceWithExactly(['allEvents'], { fromBlock: 5 }))\n  t.is(pastEventsObservable, mockObservable)\n})\n\ntest('should invoke proxy.pastEvents with the correct options for aragonAPIv1', async (t) => {\n  const { pastEvents } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    pastEvents: sinon.stub().returns(mockObservable)\n  }\n  // aragonAPIv1 only passes the fromBlock\n  const requestStub = {\n    params: [5, 10]\n  }\n  // act\n  const pastEventsObservable = pastEvents(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.pastEvents.calledOnceWith(null, { fromBlock: 5, toBlock: 10 }))\n  t.is(pastEventsObservable, mockObservable)\n})\n\ntest('should invoke proxy.pastEvents with the correct options for aragonAPIv1 when no fromBlock is passed', async (t) => {\n  const { pastEvents } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    pastEvents: sinon.stub().returns(mockObservable)\n  }\n  // aragonAPIv1 does not need to pass the fromBlock\n  const requestStub = {\n    params: []\n  }\n  // act\n  const pastEventsObservable = pastEvents(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.pastEvents.calledOnceWith(null, { fromBlock: undefined, toBlock: undefined }))\n  t.is(pastEventsObservable, mockObservable)\n})\n"],"file":"past-events.test.js"}