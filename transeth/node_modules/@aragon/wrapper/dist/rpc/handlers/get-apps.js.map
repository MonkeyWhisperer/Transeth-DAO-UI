{"version":3,"sources":["../../../src/rpc/handlers/get-apps.js"],"names":["transformAppInformation","app","getContentPathFn","abi","appId","content","contractAddress","icons","identifier","isForwarder","kernelAddress","name","proxyAddress","roles","iconsWithBaseUrl","map","icon","src","_","appAddress","appImplementationAddress","request","proxy","wrapper","operation","params","appCategory","apps","appWithIdentifier$","appIdentifiers","pipe","identifiers","apm","getContentPath","app$","find","address","Promise","reject","Error"],"mappings":"oJA6duB;g+BAzdvB;AACA,QAASA,CAAAA,uBAAT,CAAkCC,GAAG,CAAG,EAAxC,CAA4CC,gBAA5C,CAA8D,CAC5D,KAAM,CACJC,GADI,CAEJC,KAFI,CAGJC,OAHI,CAIJC,eAJI,CAKJC,KALI,CAMJC,UANI,CAOJC,WAPI,CAQJC,aARI,CASJC,IATI,CAUJC,YAVI,CAWJC,KAXI,EAYFZ,GAZJ,CAcA,GAAIa,CAAAA,gBAAJ,CACA,GAAI,CACFA,gBAAgB,CAAGP,KAAK,CAACQ,GAAN,CAAWC,IAAD,iCACrBA,IADqB,MACfC,GAAG,CAAEf,gBAAgB,CAACG,OAAD,CAAUW,IAAI,CAACC,GAAf,CADN,EAAV,CAGpB,CAAC,MAAOC,CAAP,CAAU,CAAE,CAEd,MAAO,CACLf,GADK,CAELK,UAFK,CAGLE,aAHK,CAILC,IAJK,CAKLQ,UAAU,CAAEP,YALP,CAMLR,KAAK,CAAEA,KANF,CAOLgB,wBAAwB,CAAEd,eAPrB,CAQLC,KAAK,CAAEO,gBARF,CASLL,WAAW,GAAUA,WAThB,CAULI,KAVK,CAYR,CAEc,kBAAUQ,OAAV,CAAmBC,KAAnB,CAA0BC,OAA1B,CAAmC,CAChD,KAAMC,CAAAA,SAAS,CAAGH,OAAO,CAACI,MAAR,CAAe,CAAf,CAAlB,CACA,GAAIC,CAAAA,WAAW,CAAGL,OAAO,CAACI,MAAR,CAAe,CAAf,CAAlB,CAKA;AACA,GALoB,KAAhB,GAAAC,WAAW,EAA8B,SAAhB,GAAAA,WAK7B,GAJEA,WAAW,CAAG,KAIhB,EAAI,SAAAF,SAAJ,CACE,MAAOD,CAAAA,OAAO,CAACI,IAAf,CAT8C,KAY1CC,CAAAA,kBAAkB,CAAG,wBAAcL,OAAO,CAACI,IAAtB,CAA4BJ,OAAO,CAACM,cAApC,EAAoDC,IAApD,CACzB,mBAAI,CAAC,CAACH,IAAD,CAAOI,WAAP,CAAD,GACFJ,IAAI,CAACZ,GAAL,CAAUd,GAAD,iCAEFA,GAFE,MAGLO,UAAU,CAAEuB,WAAW,CAAC9B,GAAG,CAACW,YAAL,CAHlB,EAAT,CADF,CADyB,CAZqB,CAuB1CV,gBAAgB,CAAGqB,OAAO,CAACS,GAAR,CAAYC,cAvBW,CAwB1CC,IAAI,CAAmB,SAAhB,GAAAR,WAAW,CACpBE,kBAAkB,CAACE,IAAnB,CACA,mBAAIH,IAAI,EAAIA,IAAI,CAACQ,IAAL,CAAUlC,GAAG,EAAI,0BAAeA,GAAG,CAACW,YAAnB,CAAiCU,KAAK,CAACc,OAAvC,CAAjB,CAAZ,CADA,CAEA,mBAAKnC,GAAD,EAASD,uBAAuB,CAACC,GAAD,CAAMC,gBAAN,CAApC,CAFA,CADoB,CAKpB0B,kBAAkB,CAACE,IAAnB,CACA,mBAAKH,IAAD,EAAUA,IAAI,CAACZ,GAAL,CAAUd,GAAD,EAASD,uBAAuB,CAACC,GAAD,CAAMC,gBAAN,CAAzC,CAAd,CADA,CA7B4C,OAgC9B,SAAd,GAAAsB,SAhC4C,CAiCvCU,IAjCuC,CAmC9B,KAAd,GAAAV,SAnC4C,CAoCvCU,IAAI,CAACJ,IAAL,CAAU,sBAAV,CApCuC,CAuCzCO,OAAO,CAACC,MAAR,CACL,GAAIC,CAAAA,KAAJ,CAAU,4BAAV,CADK,CAGR","sourcesContent":["import { combineLatest } from 'rxjs'\nimport { first, map } from 'rxjs/operators'\nimport { addressesEqual } from '../../utils'\n\n// Extract just a few important details about the current app to decrease API surface area\nfunction transformAppInformation (app = {}, getContentPathFn) {\n  const {\n    abi,\n    appId,\n    content,\n    contractAddress,\n    icons,\n    identifier,\n    isForwarder,\n    kernelAddress,\n    name,\n    proxyAddress,\n    roles\n  } = app\n\n  let iconsWithBaseUrl\n  try {\n    iconsWithBaseUrl = icons.map((icon) =>\n      ({ ...icon, src: getContentPathFn(content, icon.src) })\n    )\n  } catch (_) {}\n\n  return {\n    abi,\n    identifier,\n    kernelAddress,\n    name,\n    appAddress: proxyAddress,\n    appId: appId,\n    appImplementationAddress: contractAddress,\n    icons: iconsWithBaseUrl,\n    isForwarder: Boolean(isForwarder),\n    roles\n  }\n}\n\nexport default function (request, proxy, wrapper) {\n  const operation = request.params[0]\n  let appCategory = request.params[1]\n  if (appCategory !== 'all' && appCategory !== 'current') {\n    appCategory = 'all'\n  }\n\n  // Backwards compatibility with initial RPC API (no parameters passed)\n  if (operation === undefined) {\n    return wrapper.apps\n  }\n\n  const appWithIdentifier$ = combineLatest(wrapper.apps, wrapper.appIdentifiers).pipe(\n    map(([apps, identifiers]) =>\n      apps.map((app) =>\n        ({\n          ...app,\n          identifier: identifiers[app.proxyAddress]\n        })\n      )\n    )\n  )\n\n  const getContentPathFn = wrapper.apm.getContentPath\n  const app$ = appCategory === 'current'\n    ? appWithIdentifier$.pipe(\n      map(apps => apps.find(app => addressesEqual(app.proxyAddress, proxy.address))),\n      map((app) => transformAppInformation(app, getContentPathFn))\n    )\n    : appWithIdentifier$.pipe(\n      map((apps) => apps.map((app) => transformAppInformation(app, getContentPathFn)))\n    )\n  if (operation === 'observe') {\n    return app$\n  }\n  if (operation === 'get') {\n    return app$.pipe(first())\n  }\n\n  return Promise.reject(\n    new Error('Invalid get apps operation')\n  )\n}\n"],"file":"get-apps.js"}