"use strict";var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_ava=_interopRequireDefault(require("ava")),_index=_interopRequireWildcard(require("./index"));(0,_ava.default)("AppContextPool starts empty",async t=>{// arrange
const pool=new _index.default;// assert
t.false(pool.hasApp("0x12"))}),(0,_ava.default)("AppContextPool can create new app context when retrieving a context for first time",async t=>{// arrange
const pool=new _index.default;// act
// assert
t.false(pool.hasApp("0x12")),pool.get("0x12",_index.APP_CONTEXTS.PATH),t.true(pool.hasApp("0x12"))}),(0,_ava.default)("AppContextPool can create new app context when emitting initial value",async t=>{// arrange
const pool=new _index.default;// act
// assert
t.false(pool.hasApp("0x12")),pool.emit("0x12",_index.APP_CONTEXTS.PATH,"/vote"),t.true(pool.hasApp("0x12"))}),(0,_ava.default)("AppContextPool can read and write values to path context",async t=>{// arrange
const pool=new _index.default,context=pool.get("0x12",_index.APP_CONTEXTS.PATH);let counter=0;// act
context.subscribe(val=>{0===counter?t.is(val,null):1===counter?t.is(val,"/first"):2===counter?t.is(val,"/second"):t.fail("too many emissions"),counter++}),pool.emit("0x12",_index.APP_CONTEXTS.PATH,"/first"),pool.emit("0x12",_index.APP_CONTEXTS.PATH,"/second")}),(0,_ava.default)("AppContextPool can read and write values to trigger context",async t=>{// arrange
const pool=new _index.default,context=pool.get("0x12",_index.APP_CONTEXTS.TRIGGER);let counter=0;// act
context.subscribe(val=>{0===counter?(t.is(val.event,"first"),t.deepEqual(val.returnValues,{})):1===counter?(t.is(val.event,"second"),t.deepEqual(val.returnValues,{})):t.fail("too many emissions"),counter++}),pool.emit("0x12",_index.APP_CONTEXTS.TRIGGER,{event:"first",returnValues:{}}),pool.emit("0x12",_index.APP_CONTEXTS.TRIGGER,{event:"second",returnValues:{}})});
//# sourceMappingURL=index.test.js.map