{"version":3,"sources":["../../src/apps/index.test.js"],"names":["t","pool","AppContextPool","false","hasApp","get","APP_CONTEXTS","PATH","true","emit","context","counter","subscribe","val","is","fail","TRIGGER","event","deepEqual","returnValues"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport AppContextPool, { APP_CONTEXTS } from './index'\n\ntest('AppContextPool starts empty', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  const pool = new AppContextPool()\n  // assert\n  t.false(pool.hasApp(appAddress))\n})\n\ntest('AppContextPool can create new app context when retrieving a context for first time', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  const pool = new AppContextPool()\n  t.false(pool.hasApp(appAddress))\n  // act\n  pool.get(appAddress, APP_CONTEXTS.PATH)\n  // assert\n  t.true(pool.hasApp(appAddress))\n})\n\ntest('AppContextPool can create new app context when emitting initial value', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  const pool = new AppContextPool()\n  t.false(pool.hasApp(appAddress))\n  // act\n  pool.emit(appAddress, APP_CONTEXTS.PATH, '/vote')\n  // assert\n  t.true(pool.hasApp(appAddress))\n})\n\ntest('AppContextPool can read and write values to path context', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  const pool = new AppContextPool()\n  // assert\n  const context = pool.get(appAddress, APP_CONTEXTS.PATH)\n  let counter = 0\n  context.subscribe(val => {\n    if (counter === 0) {\n      t.is(val, null)\n    } else if (counter === 1) {\n      t.is(val, '/first')\n    } else if (counter === 2) {\n      t.is(val, '/second')\n    } else {\n      t.fail('too many emissions')\n    }\n    counter++\n  })\n  // act\n  pool.emit(appAddress, APP_CONTEXTS.PATH, '/first')\n  pool.emit(appAddress, APP_CONTEXTS.PATH, '/second')\n})\n\ntest('AppContextPool can read and write values to trigger context', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  const pool = new AppContextPool()\n  // assert\n  const context = pool.get(appAddress, APP_CONTEXTS.TRIGGER)\n  let counter = 0\n  context.subscribe(val => {\n    if (counter === 0) {\n      t.is(val.event, 'first')\n      t.deepEqual(val.returnValues, {})\n    } else if (counter === 1) {\n      t.is(val.event, 'second')\n      t.deepEqual(val.returnValues, {})\n    } else {\n      t.fail('too many emissions')\n    }\n    counter++\n  })\n  // act\n  pool.emit(appAddress, APP_CONTEXTS.TRIGGER, { event: 'first', returnValues: {} })\n  pool.emit(appAddress, APP_CONTEXTS.TRIGGER, { event: 'second', returnValues: {} })\n})\n"],"file":"index.test.js"}