{"version":3,"sources":["../../src/apps/index.js"],"names":["contextInstantiators","path","BehaviorSubject","trigger","Subject","AppContext","constructor","appAddress","Object","entries","forEach","context","instantiator","get","Error","APP_CONTEXTS","keys","reduce","contexts","toUpperCase","AppContextPool","Map","hasApp","has","appContext","set","emit","value","next"],"mappings":"mUAEA,KAAMA,CAAAA,oBAAoB,CAAG,CAC3BC,IAAI,CAAE,IAAM,GAAIC,sBAAJ,CAAoB,IAApB,CADe,CAE3BC,OAAO,CAAE,IAAM,GAAIC,cAFQ,CAA7B,CAKA,KAAMC,CAAAA,UAAW,CACfC,WAAW,CAAEC,UAAF,CAAc,CACvB,KAAKA,UAAL,CAAkBA,UADK,CAGvBC,MAAM,CAACC,OAAP,CAAeT,oBAAf,EAAqCU,OAArC,CAA6C,CAAC,CAACC,OAAD,CAAUC,YAAV,CAAD,GAA6B,CACxE,KAAKD,OAAL,EAAgBC,YAAY,EAC7B,CAFD,CAGD,CACDC,GAAG,CAAEF,OAAF,CAAW,CACZ,GAAI,CAAC,KAAKA,OAAL,CAAL,CACE,KAAM,IAAIG,CAAAA,KAAJ,CAAW,oCAAmCH,OAAQ,QAAO,KAAKJ,UAAW,EAA7E,CAAN,CAEF,MAAO,MAAKI,OAAL,CACR,CAbc,CAgBV,KAAMI,CAAAA,YAAY,CAAGP,MAAM,CAACQ,IAAP,CAAYhB,oBAAZ,EAAkCiB,MAAlC,CAAyC,CAACC,QAAD,CAAWP,OAAX,IACnEO,QAAQ,CAACP,OAAO,CAACQ,WAAR,EAAD,CAAR,CAAkCR,OADiC,CAE5DO,QAF4D,CAAzC,CAGzB,EAHyB,CAArB,C,+DAKQ,KAAME,CAAAA,cAAe,wDACnB,GAAIC,CAAAA,GADe,GAGlCC,MAAM,CAAEf,UAAF,CAAc,CAClB,MAAO,sDAAkBgB,GAAlB,CAAsBhB,UAAtB,CACR,CAEDM,GAAG,CAAEN,UAAF,CAAcI,OAAd,CAAuB,CACxB,GAAIa,CAAAA,UAAU,CAAG,sDAAkBX,GAAlB,CAAsBN,UAAtB,CAAjB,CAMA,MALKiB,CAAAA,UAKL,GAJEA,UAAU,CAAG,GAAInB,CAAAA,UAInB,CAHE,sDAAkBoB,GAAlB,CAAsBlB,UAAtB,CAAkCiB,UAAlC,CAGF,EAAOA,UAAU,CAACX,GAAX,CAAeF,OAAf,CACR,CAEDe,IAAI,CAAEnB,UAAF,CAAcI,OAAd,CAAuBgB,KAAvB,CAA8B,CAChC,KAAKd,GAAL,CAASN,UAAT,CAAqBI,OAArB,EAA8BiB,IAA9B,CAAmCD,KAAnC,CACD,CAnBiC,C","sourcesContent":["import { BehaviorSubject, Subject } from 'rxjs'\n\nconst contextInstantiators = {\n  path: () => new BehaviorSubject(null),\n  trigger: () => new Subject()\n}\n\nclass AppContext {\n  constructor (appAddress) {\n    this.appAddress = appAddress\n\n    Object.entries(contextInstantiators).forEach(([context, instantiator]) => {\n      this[context] = instantiator()\n    })\n  }\n  get (context) {\n    if (!this[context]) {\n      throw new Error(`Could not find internal context '${context}' on ${this.appAddress}`)\n    }\n    return this[context]\n  }\n}\n\nexport const APP_CONTEXTS = Object.keys(contextInstantiators).reduce((contexts, context) => {\n  contexts[context.toUpperCase()] = context\n  return contexts\n}, {})\n\nexport default class AppContextPool {\n  #appContexts = new Map()\n\n  hasApp (appAddress) {\n    return this.#appContexts.has(appAddress)\n  }\n\n  get (appAddress, context) {\n    let appContext = this.#appContexts.get(appAddress)\n    if (!appContext) {\n      appContext = new AppContext()\n      this.#appContexts.set(appAddress, appContext)\n    }\n\n    return appContext.get(context)\n  }\n\n  emit (appAddress, context, value) {\n    this.get(appAddress, context).next(value)\n  }\n}\n"],"file":"index.js"}