{"version":3,"sources":["../../src/utils/callscript.js"],"names":["CALLSCRIPT_ID","decodeSegment","script","to","substring","dataLength","parseInt","data","segment","scriptLeft","decodeCallScript","isCallScript","Error","scriptData","segments","length","push","encodeCallScript","actions","reduce","address","abi","encodeParameter","toString","slice","scriptId"],"mappings":"gGAAA,gE,oDA6duB;sJA3dhB,KAAMA,CAAAA,aAAa,CAAG,YAAtB,C,mCAEP,QAASC,CAAAA,aAAT,CAAwBC,MAAxB,CAAgC,CAC9B;AACA,KAAMC,CAAAA,EAAE,CAAI,KAAID,MAAM,CAACE,SAAP,CAAiB,CAAjB,CAAoB,EAApB,CAAwB,EAAxC,CACAF,MAAM,CAAGA,MAAM,CAACE,SAAP,CAAiB,EAAjB,CAHqB,CAK9B;AACA,KAAMC,CAAAA,UAAU,CAAiD,CAA9C,CAAAC,QAAQ,CAAE,KAAIJ,MAAM,CAACE,SAAP,CAAiB,CAAjB,CAAoB,CAApB,CAAuB,EAA7B,CAAgC,EAAhC,CAA3B,CACAF,MAAM,CAAGA,MAAM,CAACE,SAAP,CAAiB,CAAjB,CAPqB,CAQ9B,KAAMG,CAAAA,IAAI,CAAI,KAAIL,MAAM,CAACE,SAAP,CAAiB,CAAjB,CAAoBC,UAApB,CAAgC,EAAlD,CAEA;AAGA,MAFAH,CAAAA,MAAM,CAAGA,MAAM,CAACE,SAAP,CAAiBC,UAAjB,CAET,CAAO,CACLG,OAAO,CAAE,CACPL,EADO,CAEPI,IAFO,CADJ,CAKLE,UAAU,CAAEP,MALP,CAOR,CAED;;;;;;;;;;GAWO,QAASQ,CAAAA,gBAAT,CAA2BR,MAA3B,CAAmC,CACxC,GAAI,CAACS,YAAY,CAACT,MAAD,CAAjB,CACE,KAAM,IAAIU,CAAAA,KAAJ,CAAW,sBAAqBV,MAAO,EAAvC,CAAN,CAGF,GAAIW,CAAAA,UAAU,CAAGX,MAAM,CAACE,SAAP,CAAiB,EAAjB,CAAjB,CACA,KAAMU,CAAAA,QAAQ,CAAG,EAAjB,CANwC,KAQb,CAApB,CAAAD,UAAU,CAACE,MARsB,EAQV,CAC5B,KAAM,CAAEP,OAAF,CAAWC,UAAX,EAA0BR,aAAa,CAACY,UAAD,CAA7C,CACAC,QAAQ,CAACE,IAAT,CAAcR,OAAd,CAF4B,CAG5BK,UAAU,CAAGJ,UACd,CACD,MAAOK,CAAAA,QACR,CAED;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BO,QAASG,CAAAA,gBAAT,CAA2BC,OAA3B,CAAoC,CACzC,MAAOA,CAAAA,OAAO,CAACC,MAAR,CAAe,CAACjB,MAAD,CAAS,CAAEC,EAAF,CAAMI,IAAN,CAAT,GAA0B,MACxCa,CAAAA,OAAO,CAAGC,oBAAIC,eAAJ,CAAoB,SAApB,CAA+BnB,EAA/B,CAD8B,CAExCE,UAAU,CAAGgB,oBAAIC,eAAJ,CAAoB,SAApB,CAA+B,CAACf,IAAI,CAACQ,MAAL,CAAc,CAAf,EAAoB,CAAnD,EAAsDQ,QAAtD,CAA+D,KAA/D,CAF2B,CAI9C,MAAOrB,CAAAA,MAAM,CAAGkB,OAAO,CAACI,KAAR,CAAc,EAAd,CAAT,CAA6BnB,UAAU,CAACmB,KAAX,CAAiB,EAAjB,CAA7B,CAAoDjB,IAAI,CAACiB,KAAL,CAAW,CAAX,CAC5D,CALM,CAKJxB,aALI,CAMR,CAED;;;;;GAMO,QAASW,CAAAA,YAAT,CAAuBT,MAAvB,CAA+B,CACpC;AACA,KAAMuB,CAAAA,QAAQ,CAAGvB,MAAM,CAACE,SAAP,CAAiB,CAAjB,CAAoB,EAApB,CAAjB,CACA,MAAOqB,CAAAA,QAAQ,GAAKzB,aACrB","sourcesContent":["import abi from 'web3-eth-abi'\n\nexport const CALLSCRIPT_ID = '0x00000001'\n\nfunction decodeSegment (script) {\n  // Get address\n  const to = `0x${script.substring(0, 40)}`\n  script = script.substring(40)\n\n  // Get data\n  const dataLength = parseInt(`0x${script.substring(0, 8)}`, 16) * 2\n  script = script.substring(8)\n  const data = `0x${script.substring(0, dataLength)}`\n\n  // Return rest of script for processing\n  script = script.substring(dataLength)\n\n  return {\n    segment: {\n      to,\n      data\n    },\n    scriptLeft: script\n  }\n}\n\n/**\n * Decode a call script bytes string into its actions.\n *\n * Will return an array containing objects with:\n *\n *  - `to`: to address\n *  - `data`: call data\n *\n * @param {string} actions\n * @returns {Array<Object>}\n */\nexport function decodeCallScript (script) {\n  if (!isCallScript(script)) {\n    throw new Error(`Not a call script: ${script}`)\n  }\n\n  let scriptData = script.substring(10)\n  const segments = []\n\n  while (scriptData.length > 0) {\n    const { segment, scriptLeft } = decodeSegment(scriptData)\n    segments.push(segment)\n    scriptData = scriptLeft\n  }\n  return segments\n}\n\n/**\n * Encode a call script\n *\n * ```\n * CallScriptAction {\n *   to: string;\n *   data: string;\n * }\n * ```\n *\n * Example:\n *\n * input:\n * [\n *  { to: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, data: 0x11111111 },\n *  { to: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, data: 0x2222222222 }\n * ]\n *\n * output:\n * 0x00000001\n *   aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000411111111\n *   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb000000052222222222\n *\n *\n * @param {Array<CallScriptAction>} actions\n * @returns {string}\n */\nexport function encodeCallScript (actions) {\n  return actions.reduce((script, { to, data }) => {\n    const address = abi.encodeParameter('address', to)\n    const dataLength = abi.encodeParameter('uint256', (data.length - 2) / 2).toString('hex')\n\n    return script + address.slice(26) + dataLength.slice(58) + data.slice(2)\n  }, CALLSCRIPT_ID)\n}\n\n/**\n * Checks whether a EVMScript bytes string is a call script.\n *\n * @param {string} actions\n * @returns {bool}\n */\nexport function isCallScript (script) {\n  // Get script identifier (0x prefix + bytes4)\n  const scriptId = script.substring(0, 10)\n  return scriptId === CALLSCRIPT_ID\n}\n"],"file":"callscript.js"}