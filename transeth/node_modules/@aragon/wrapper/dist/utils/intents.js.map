{"version":3,"sources":["../../src/utils/intents.js"],"names":["doIntentPathsMatch","intentPaths","individualPaths","map","path","to","slice","join","Set","size","filterAndDecodeAppUpgradeIntents","intents","wrapper","kernelApp","getApp","kernelProxy","address","filter","intent","data","_","namespace"],"mappings":"aAAA,+C,oDA6duB;2HAvdhB,QAASA,CAAAA,kBAAT,CAA6BC,WAA7B,CAA0C,CAC/C,KAAMC,CAAAA,eAAe,CAAGD,WACtB;AADiC,CAEhCE,GAFqB,CAEjBC,IAAI,EACPA,IAAI,CAACD,GAAL,CAAS,CAAC,CAAEE,EAAF,CAAD,GAAYA,EAArB,CAHoB,CAKtB;AALsB,CAMrBF,GANqB,CAMjBC,IAAI,EAAIA,IAAI,CAACE,KAAL,CAAW,CAAX,CAAc,CAAC,CAAf,CANS,CAOtB;AAPsB,CAQrBH,GARqB,CAQjBC,IAAI,EAAIA,IAAI,CAACG,IAAL,CAAU,GAAV,CARS,CAAxB,CAUA;AACA;AACA;AACA,MAA2C,EAApC,GAAC,GAAIC,CAAAA,GAAJ,CAAQN,eAAR,CAAD,CAA2BO,IAA3B,IAAiDP,eAAe,CAAC,CAAD,CACxE,CAEM,cAAeQ,CAAAA,gCAAf,CAAiDC,OAAjD,CAA0DC,OAA1D,CAAmE,CACxE,KAAMC,CAAAA,SAAS,CAAG,KAAMD,CAAAA,OAAO,CAACE,MAAR,CAAeF,OAAO,CAACG,WAAR,CAAoBC,OAAnC,CAAxB,CAEA,MAAOL,CAAAA,OACL;AADY,CAEXM,MAFI,CAEIC,MAAD,EAAY,iCAAqBL,SAArB,CAAgCK,MAAhC,CAFf,CAGL;AAHK,CAIJf,GAJI,CAICe,MAAD,EAAY,CACf,GAAI,CACF,MAAO,yCAA6BA,MAAM,CAACC,IAApC,CACR,CAAC,MAAOC,CAAP,CAAU,CAAE,CAEd,MAAO,EACR,CAVI,CAWL;AAXK,CAYJH,MAZI,CAYG,CAAC,CAAEI,SAAF,CAAD,GAAmB,qCAAyBA,SAAzB,CAZtB,CAaR","sourcesContent":["import {\n  decodeKernelSetAppParameters,\n  isKernelAppCodeNamespace,\n  isKernelSetAppIntent\n} from '../core/aragonOS/kernel'\n\nexport function doIntentPathsMatch (intentPaths) {\n  const individualPaths = intentPaths\n    // Map each path to just be an array of destination addresses\n    .map(path =>\n      path.map(({ to }) => to)\n    )\n    // Ignore the final intent target, as the path is everything \"before\" that target\n    .map(path => path.slice(0, -1))\n    // Take each array of destination addresses and create a single string\n    .map(path => path.join('.'))\n\n  // Check if they all match by seeing if a unique set of the individual path\n  // strings is a single path\n  // Also make sure that there was indeed an actual path found\n  return (new Set(individualPaths)).size === 1 && Boolean(individualPaths[0])\n}\n\nexport async function filterAndDecodeAppUpgradeIntents (intents, wrapper) {\n  const kernelApp = await wrapper.getApp(wrapper.kernelProxy.address)\n\n  return intents\n    // Filter for setApp() calls to the kernel\n    .filter((intent) => isKernelSetAppIntent(kernelApp, intent))\n    // Try to decode setApp() params\n    .map((intent) => {\n      try {\n        return decodeKernelSetAppParameters(intent.data)\n      } catch (_) {}\n\n      return {}\n    })\n    // Filter for changes to APP_BASES_NAMESPACE\n    .filter(({ namespace }) => isKernelAppCodeNamespace(namespace))\n}\n"],"file":"intents.js"}