{"version":3,"sources":["../../src/utils/apps.js"],"names":["apmAppId","appName","findAppMethod","app","methodTestFn","allowDeprecated","deprecatedFunctions","functions","method","Array","isArray","find","deprecatedFunctionsFromVersions","Object","values","every","allDeprecatedFunctions","concat","findAppMethodFromData","data","methodId","substring","sig","findAppMethodFromSignature","methodSignature","fullMethodSignature","includes","methodName","split","knownAppIds"],"mappings":"iEA6duB;kPA1dhB,KAAMA,CAAAA,QAAQ,CAAGC,OAAO,EAAI,yBAAU,GAAEA,OAAQ,eAApB,CAA5B,C,0BAEP,QAASC,CAAAA,aAAT,CAAwBC,GAAxB,CAA6BC,YAA7B,CAA2C,CAAEC,eAAF,EAAsB,EAAjE,CAAqE,CACnE,KAAM,CAAEC,mBAAF,CAAuBC,SAAvB,EAAqCJ,GAAG,EAAI,EAAlD,CAEA,GAAIK,CAAAA,MAAJ,CACA;AAKA,GAJIC,KAAK,CAACC,OAAN,CAAcH,SAAd,CAIJ,GAHEC,MAAM,CAAGD,SAAS,CAACI,IAAV,CAAeP,YAAf,CAGX,EAAI,CAACI,MAAD,EAAWH,eAAf,CAAgC,CAC9B;AACA,KAAMO,CAAAA,+BAA+B,CAAGC,MAAM,CAACC,MAAP,CAAcR,mBAAmB,EAAI,EAArC,CAAxC,CACA,GAAIM,+BAA+B,CAACG,KAAhC,CAAsCN,KAAK,CAACC,OAA5C,CAAJ,CAA0D,CACxD;AACA,KAAMM,CAAAA,sBAAsB,CAAG,GAAGC,MAAH,CAAU,GAAGL,+BAAb,CAA/B,CACAJ,MAAM,CAAGQ,sBAAsB,CAACL,IAAvB,CAA4BP,YAA5B,CACV,CACF,CAED,MAAOI,CAAAA,MACR,CAED;;;;;;;;;GAUO,QAASU,CAAAA,qBAAT,CAAgCf,GAAhC,CAAqCgB,IAArC,CAA2C,CAAEd,eAAe,GAAjB,EAA6B,EAAxE,CAA4E,CACjF,KAAMe,CAAAA,QAAQ,CAAGD,IAAI,CAACE,SAAL,CAAe,CAAf,CAAkB,EAAlB,CAAjB,CACA,MAAOnB,CAAAA,aAAa,CAClBC,GADkB,CAElBK,MAAM,EAAI,4BAAaA,MAAM,CAACc,GAApB,EAAyBD,SAAzB,CAAmC,CAAnC,CAAsC,EAAtC,IAA8CD,QAFtC,CAGlB,CAAEf,eAAF,CAHkB,CAKrB,CAED;;;;;;;;GASO,QAASkB,CAAAA,0BAAT,CAAqCpB,GAArC,CAA0CqB,eAA1C,CAA2D,CAAEnB,eAAe,GAAjB,EAA6B,EAAxF,CAA4F,CACjG;AACA,KAAMoB,CAAAA,mBAAmB,CACvB,EAAQD,eAAR,EAA4BA,eAAe,CAACE,QAAhB,CAAyB,GAAzB,CAA5B,EAA6DF,eAAe,CAACE,QAAhB,CAAyB,GAAzB,CAD/D,CAGA,MAAOxB,CAAAA,aAAa,CAClBC,GADkB,CAElBK,MAAM,EAAI,CACR;AACA,GAAIiB,mBAAJ,CACE,MAAOjB,CAAAA,MAAM,CAACc,GAAP,GAAeE,eAAtB,CAGF;AACA,KAAMG,CAAAA,UAAU,CAAGnB,MAAM,CAACc,GAAP,CAAWM,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAnB,CACA,MAAOD,CAAAA,UAAU,GAAKH,eACvB,CAXiB,CAYlB,CAAEnB,eAAF,CAZkB,CAcrB,CAEM,KAAMwB,CAAAA,WAAW,CAAG,CACzB7B,QAAQ,CAAC,SAAD,CADiB,CAEzBA,QAAQ,CAAC,eAAD,CAFiB,CAGzBA,QAAQ,CAAC,OAAD,CAHiB,CAIzBA,QAAQ,CAAC,QAAD,CAJiB,CAApB,C","sourcesContent":["import { hash as namehash } from 'eth-ens-namehash'\nimport { soliditySha3 } from 'web3-utils'\n\nexport const apmAppId = appName => namehash(`${appName}.aragonpm.eth`)\n\nfunction findAppMethod (app, methodTestFn, { allowDeprecated } = {}) {\n  const { deprecatedFunctions, functions } = app || {}\n\n  let method\n  // First try to find the method in the current functions\n  if (Array.isArray(functions)) {\n    method = functions.find(methodTestFn)\n  }\n\n  if (!method && allowDeprecated) {\n    // The current functions didn't have it; try with each deprecated version's functions\n    const deprecatedFunctionsFromVersions = Object.values(deprecatedFunctions || {})\n    if (deprecatedFunctionsFromVersions.every(Array.isArray)) {\n      // Flatten all the deprecated functions\n      const allDeprecatedFunctions = [].concat(...deprecatedFunctionsFromVersions)\n      method = allDeprecatedFunctions.find(methodTestFn)\n    }\n  }\n\n  return method\n}\n\n/**\n * Find the method descriptor corresponding to the data component of a\n * transaction sent to `app`.\n *\n * @param  {Object} app App artifact\n * @param  {Object} data Data component of a transaction to app\n * @param  {Object} options Options\n * @param  {boolean} [options.allowDeprecated] Allow deprecated functions to be returned. Defaults to true.\n * @return {Object|void} Method with radspec notice and function signature, or undefined if none was found\n */\nexport function findAppMethodFromData (app, data, { allowDeprecated = true } = {}) {\n  const methodId = data.substring(2, 10)\n  return findAppMethod(\n    app,\n    method => soliditySha3(method.sig).substring(2, 10) === methodId,\n    { allowDeprecated }\n  )\n}\n\n/**\n * Find the method descriptor corresponding to an app's method signature.\n *\n * @param  {Object} app App artifact\n * @param  {string} methodSignature Method signature to be called\n * @param  {Object} options Options\n * @param  {boolean} [options.allowDeprecated] Allow deprecated functions to be returned. Defaults to true.\n * @return {Object|void} Method with radspec notice and function signature, or undefined if none was found\n */\nexport function findAppMethodFromSignature (app, methodSignature, { allowDeprecated = true } = {}) {\n  // Is the given method a full signature, e.g. 'foo(arg1,arg2,...)'\n  const fullMethodSignature =\n    Boolean(methodSignature) && methodSignature.includes('(') && methodSignature.includes(')')\n\n  return findAppMethod(\n    app,\n    method => {\n      // Note that fallback functions have the signature 'fallback' in an app's artifact.json\n      if (fullMethodSignature) {\n        return method.sig === methodSignature\n      }\n\n      // If full signature isn't given, just match against the method names\n      const methodName = method.sig.split('(')[0]\n      return methodName === methodSignature\n    },\n    { allowDeprecated }\n  )\n}\n\nexport const knownAppIds = [\n  apmAppId('finance'),\n  apmAppId('token-manager'),\n  apmAppId('vault'),\n  apmAppId('voting')\n]\n"],"file":"apps.js"}