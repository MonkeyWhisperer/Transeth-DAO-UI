{"version":3,"sources":["../../src/utils/index.js"],"names":["ANY_ENTITY","addressesEqual","first","second","toLowerCase","includesAddress","arr","address","some","a","makeAddressMapProxy","target","targetLowerCaseKeys","Object","entries","forEach","val","Proxy","get","property","set","value","getCacheKey","location","makeProxy","interfaceName","web3","options","abi","makeProxyFromABI","appProxyEventsAbi","filter","type","makeProxyFromAppABI","appAbi","appAbiWithProxyEvents","concat","ContractProxy"],"mappings":"oJA6duB;knBAzdhB,KAAMA,CAAAA,UAAU,CAAG,4CAAnB,CAEP;gEACO,QAASC,CAAAA,cAAT,CAAyBC,KAAzB,CAAgCC,MAAhC,CAAwC,CAG7C,MAFAD,CAAAA,KAAK,CAAGA,KAAK,EAAIA,KAAK,CAACE,WAAN,EAEjB,CADAD,MAAM,CAAGA,MAAM,EAAIA,MAAM,CAACC,WAAP,EACnB,CAAOF,KAAK,GAAKC,MAClB,CAED;AACO,QAASE,CAAAA,eAAT,CAA0BC,GAA1B,CAA+BC,OAA/B,CAAwC,CAC7C,MAAOD,CAAAA,GAAG,CAACE,IAAJ,CAASC,CAAC,EAAIR,cAAc,CAACQ,CAAD,CAAIF,OAAJ,CAA5B,CACR,CAED;AACO,QAASG,CAAAA,mBAAT,CAA8BC,MAAM,CAAG,EAAvC,CAA2C,CAChD,KAAMC,CAAAA,mBAAmB,CAAG,EAA5B,CAKA,MAJAC,CAAAA,MAAM,CAACC,OAAP,CAAeH,MAAf,EAAuBI,OAAvB,CAA+B,CAAC,CAACR,OAAD,CAAUS,GAAV,CAAD,GAAoB,CACjDJ,mBAAmB,CAACL,OAAO,CAACH,WAAR,EAAD,CAAnB,CAA6CY,GAC9C,CAFD,CAIA,CAAO,GAAIC,CAAAA,KAAJ,CAAUL,mBAAV,CAA+B,CACpCM,GAAG,CAAEP,MAAF,CAAUQ,QAAV,CAA8B,OAC3BA,CAAAA,QAAQ,GAAIR,CAAAA,MADe,CAEtBA,MAAM,CAACQ,QAAD,CAFgB,CAKP,QAApB,QAAOA,CAAAA,QAAP,EAAgC,yBAAUA,QAAV,CALL,CAOtBR,MAAM,CAACQ,QAAQ,CAACf,WAAT,EAAD,CAPgB,OAShC,CAVmC,CAWpCgB,GAAG,CAAET,MAAF,CAAUQ,QAAV,CAAoBE,KAApB,CAAqC,CAMtC,MALwB,QAApB,QAAOF,CAAAA,QAAP,EAAgC,yBAAUA,QAAV,CAKpC,CAJER,MAAM,CAACQ,QAAQ,CAACf,WAAT,EAAD,CAAN,CAAiCiB,KAInC,CAFEV,MAAM,CAACQ,QAAD,CAAN,CAAmBE,KAErB,GACD,CAlBmC,CAA/B,CAoBR,CAED;;;;;GAMO,QAASC,CAAAA,WAAT,CAAsBf,OAAtB,CAA+BgB,QAA/B,CAAyC,CAC9C,MAAQ,GAAEhB,OAAQ,IAAGgB,QAAS,EAC/B,CAEM,QAASC,CAAAA,SAAT,CAAoBjB,OAApB,CAA6BkB,aAA7B,CAA4CC,IAA5C,CAAkDC,OAAlD,CAA2D,CAChE,KAAMC,CAAAA,GAAG,CAAG,uBAAQ,UAASH,aAAc,EAA/B,CAAZ,CACA,MAAOI,CAAAA,gBAAgB,CAACtB,OAAD,CAAUqB,GAAV,CAAeF,IAAf,CAAqBC,OAArB,CACxB,CAED,KAAMG,CAAAA,iBAAiB,CAAG,uBAAO,iBAAP,EAA0BC,MAA1B,CAAiC,CAAC,CAAEC,IAAF,CAAD,GAAuB,OAAT,GAAAA,IAA/C,CAA1B,CACO,QAASC,CAAAA,mBAAT,CAA8B1B,OAA9B,CAAuC2B,MAAvC,CAA+CR,IAA/C,CAAqDC,OAArD,CAA8D,CACnE,KAAMQ,CAAAA,qBAAqB,CAAG,GAAGC,MAAH,CAAUF,MAAV,CAAkBJ,iBAAlB,CAA9B,CACA,MAAOD,CAAAA,gBAAgB,CAACtB,OAAD,CAAU4B,qBAAV,CAAiCT,IAAjC,CAAuCC,OAAvC,CACxB,CAEM,QAASE,CAAAA,gBAAT,CAA2BtB,OAA3B,CAAoCqB,GAApC,CAAyCF,IAAzC,CAA+CC,OAA/C,CAAwD,CAC7D,MAAO,IAAIU,eAAJ,CAAkB9B,OAAlB,CAA2BqB,GAA3B,CAAgCF,IAAhC,CAAsCC,OAAtC,CACR","sourcesContent":["import { isAddress } from 'web3-utils'\nimport ContractProxy from '../core/proxy'\nimport { getAbi } from '../interfaces'\n\nexport const ANY_ENTITY = '0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF'\n\n// Check address equality without checksums\nexport function addressesEqual (first, second) {\n  first = first && first.toLowerCase()\n  second = second && second.toLowerCase()\n  return first === second\n}\n\n// \"Safer\" version of [].includes() for addresses\nexport function includesAddress (arr, address) {\n  return arr.some(a => addressesEqual(a, address))\n}\n\n// Address map that ensures consistent non-checksummed interpretations of addresses\nexport function makeAddressMapProxy (target = {}) {\n  const targetLowerCaseKeys = {}\n  Object.entries(target).forEach(([address, val]) => {\n    targetLowerCaseKeys[address.toLowerCase()] = val\n  })\n\n  return new Proxy(targetLowerCaseKeys, {\n    get (target, property, receiver) {\n      if (property in target) {\n        return target[property]\n      }\n\n      if (typeof property === 'string' && isAddress(property)) {\n        // Our set handler will ensure any addresses are stored in all lowercase\n        return target[property.toLowerCase()]\n      }\n    },\n    set (target, property, value, receiver) {\n      if (typeof property === 'string' && isAddress(property)) {\n        target[property.toLowerCase()] = value\n      } else {\n        target[property] = value\n      }\n      return true\n    }\n  })\n}\n\n/**\n * Get a standard cache key\n *\n * @param {string} address\n * @param {string} location\n */\nexport function getCacheKey (address, location) {\n  return `${address}.${location}`\n}\n\nexport function makeProxy (address, interfaceName, web3, options) {\n  const abi = getAbi(`aragon/${interfaceName}`)\n  return makeProxyFromABI(address, abi, web3, options)\n}\n\nconst appProxyEventsAbi = getAbi('aragon/AppProxy').filter(({ type }) => type === 'event')\nexport function makeProxyFromAppABI (address, appAbi, web3, options) {\n  const appAbiWithProxyEvents = [].concat(appAbi, appProxyEventsAbi)\n  return makeProxyFromABI(address, appAbiWithProxyEvents, web3, options)\n}\n\nexport function makeProxyFromABI (address, abi, web3, options) {\n  return new ContractProxy(address, abi, web3, options)\n}\n\nexport { default as AsyncRequestCache } from './AsyncRequestCache'\n"],"file":"index.js"}