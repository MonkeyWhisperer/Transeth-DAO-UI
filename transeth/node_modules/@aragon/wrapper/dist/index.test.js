"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty")),_ava=_interopRequireDefault(require("ava")),_sinon=_interopRequireDefault(require("sinon")),_proxyquire=_interopRequireDefault(require("proxyquire")),_rxjs=require("rxjs"),_operators=require("rxjs/operators"),_rpcMessenger=require("@aragon/rpc-messenger"),apps=_interopRequireWildcard(require("./apps")),configurationKeys=_interopRequireWildcard(require("./configuration/keys")),apm=_interopRequireWildcard(require("./core/apm")),_utils=require("./utils"),_AsyncRequestCache=_interopRequireDefault(require("./utils/AsyncRequestCache")),callscriptUtils=_interopRequireWildcard(require("./utils/callscript")),forwardingUtils=_interopRequireWildcard(require("./utils/forwarding")),transactionsUtils=_interopRequireWildcard(require("./utils/transactions"));function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!=key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable})),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null==arguments[i]?{}:arguments[i],i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key])}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))});return target}const{encodeCallScript}=callscriptUtils,APP_NAMESPACE_HASH="0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f",CORE_NAMESPACE_HASH="0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8";// soliditySha3('app')
_ava.default.beforeEach(t=>{// Helper for creating Aragon class instances
const apmCoreStub={getApmInternalAppInfo:_sinon.default.stub()},aragonOSCoreStub={getAragonOsInternalAppInfo:_sinon.default.stub()},configurationStub={setConfiguration:_sinon.default.stub()},ensStub={resolve:_sinon.default.stub()},messengerConstructorStub=_sinon.default.stub();messengerConstructorStub.signals=_rpcMessenger.signals;const utilsStub={AsyncRequestCache:_AsyncRequestCache.default,getCacheKey:_utils.getCacheKey,addressesEqual:Object.is,callscript:callscriptUtils,forwarding:forwardingUtils,makeAddressMapProxy:_sinon.default.fake.returns({}),makeProxy:_sinon.default.stub(),transactions:transactionsUtils},Aragon=_proxyquire.default.noCallThru().load("./index",{"@aragon/rpc-messenger":messengerConstructorStub,"./apps":apps,"./core/aragonOS":aragonOSCoreStub,"./core/apm":Object.assign(apm,apmCoreStub),"./configuration":configurationStub,"./configuration/keys":configurationKeys,"./ens":()=>ensStub,"./utils":utilsStub}).default;t.context={Aragon,apmCoreStub,aragonOSCoreStub,createAragon:function(){let daoAddress=0<arguments.length&&arguments[0]!==void 0?arguments[0]:"0x00",options=1<arguments.length?arguments[1]:void 0;return new Aragon(daoAddress,_objectSpread({apm:{ensRegistryAddress:"0x00"}},options))},configurationStub,ensStub,messengerConstructorStub,utilsStub}}),_ava.default.afterEach.always(()=>{_sinon.default.restore()}),(0,_ava.default)("should create an Aragon instance with no options given",t=>{const{createAragon}=t.context;t.plan(1);// act
const app=createAragon();// assert
t.not(app.apm,void 0)}),(0,_ava.default)("should throw on init if daoAddress is not a Kernel",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon("0xbaddao"),kernelProxyCallStub=_sinon.default.stub().withArgs("acl").throws();// act and assert
instance.kernelProxy={address:"0xbaddao",call:kernelProxyCallStub},await t.throwsAsync(instance.init(),{instanceOf:Error,message:`Provided daoAddress is not a DAO`})}),(0,_ava.default)("should set the default configuration",t=>{const{createAragon,configurationStub}=t.context;t.plan(4);// act
const instance=createAragon();// assert
t.truthy(configurationStub.setConfiguration.calledTwice),t.truthy(configurationStub.setConfiguration.calledWith(configurationKeys.FORCE_LOCAL_STORAGE,!1)),t.truthy(configurationStub.setConfiguration.calledWith(configurationKeys.SUBSCRIPTION_EVENT_DELAY,0)),t.not(instance.apm,void 0)}),(0,_ava.default)("should set the given configuration",t=>{const{createAragon,configurationStub}=t.context;t.plan(4);// act
const instance=createAragon("0x00",{cache:{forceLocalStorage:!0// force cache invalidation
},events:{subscriptionEventDelay:1e3}});// assert
t.truthy(configurationStub.setConfiguration.calledTwice),t.truthy(configurationStub.setConfiguration.calledWith(configurationKeys.FORCE_LOCAL_STORAGE,!0)),t.truthy(configurationStub.setConfiguration.calledWith(configurationKeys.SUBSCRIPTION_EVENT_DELAY,1e3)),t.not(instance.apm,void 0)}),(0,_ava.default)("should set the default configuration if overriding configuration doesn't contain keys",t=>{const{createAragon,configurationStub}=t.context;t.plan(4);// act
const instance=createAragon("0x00",{cache:{},events:{}});// assert
t.truthy(configurationStub.setConfiguration.calledTwice),t.truthy(configurationStub.setConfiguration.calledWith(configurationKeys.FORCE_LOCAL_STORAGE,!1)),t.truthy(configurationStub.setConfiguration.calledWith(configurationKeys.SUBSCRIPTION_EVENT_DELAY,0)),t.not(instance.apm,void 0)}),(0,_ava.default)("should use provided accounts",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon();// act
await instance.initAccounts({providedAccounts:["0x00"]});const accounts=await instance.getAccounts();// assert
t.deepEqual(accounts,["0x00"])}),(0,_ava.default)("should get the accounts from web3",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon();instance.web3={eth:{getAccounts:_sinon.default.stub().resolves(["0x01","0x02"])}},await instance.initAccounts({fetchFromWeb3:!0});const accounts=await instance.getAccounts();// assert
t.deepEqual(accounts,["0x01","0x02"])}),(0,_ava.default)("should not fetch the accounts if not asked",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon();instance.web3={eth:{getAccounts:_sinon.default.stub().resolves(["0x01","0x02"])}},await instance.initAccounts({fetchFromWeb3:!1});const accounts=await instance.getAccounts();// assert
t.deepEqual(accounts,[])}),(0,_ava.default)("should get the network details from web3",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon(),testNetworkId=4,testNetworkType="rinkeby";// act
// assert
instance.web3={eth:{getChainId:_sinon.default.stub().resolves(testNetworkId),net:{getNetworkType:_sinon.default.stub().resolves(testNetworkType)}}},await instance.initNetwork(),instance.network.subscribe(network=>{t.deepEqual(network,{id:testNetworkId,type:testNetworkType})})}),(0,_ava.default)("should set the GUI style",async t=>{const{createAragon}=t.context;t.plan(2);// arrange
const instance1=createAragon(),instance2=createAragon();// act
// assert
instance1.initGuiStyle(),instance2.initGuiStyle(),instance1.setGuiStyle("black",{name:"Black theme"}),instance2.setGuiStyle("dark"),t.deepEqual(instance1.guiStyle.value,{appearance:"black",theme:{name:"Black theme"}}),t.deepEqual(instance2.guiStyle.value,{appearance:"dark",theme:null})});const aclEvents=(0,_rxjs.from)([{event:"SetPermission",returnValues:{app:"counter",role:"add",allowed:!0,entity:"0x1"}},{event:"SetPermission",returnValues:{app:"counter",role:"subtract",allowed:!0,entity:"0x1"}},{event:"SetPermission",returnValues:{app:"counter",role:"add",allowed:!0,entity:"0x2"}},{event:"SetPermission",returnValues:{app:"counter",role:"subtract",allowed:!0,entity:"0x2"}},{// Simulate real world mixed order of event types
event:"ChangePermissionManager",returnValues:{app:"counter",role:"subtract",manager:"manager"}},{event:"SetPermission",returnValues:{app:"counter",role:"subtract",allowed:!1,entity:"0x2"}},{// duplicate, should not affect the final result because we use a Set
event:"SetPermission",returnValues:{app:"counter",role:"subtract",allowed:!1,entity:"0x2"}}]);(0,_ava.default)("should init the ACL correctly",async t=>{const{createAragon,utilsStub}=t.context;t.plan(1);const instance=createAragon();instance.kernelProxy={call:_sinon.default.stub()},instance.cache.get=_sinon.default.stub().returns({}),instance.cache.set=_sinon.default.stub().resolves();const aclProxyStub={events:_sinon.default.stub().returns(aclEvents),pastEvents:_sinon.default.stub().returns((0,_rxjs.empty)())};// assert, tell ava to wait for the permissions observable to debounce
return utilsStub.makeProxy.returns(aclProxyStub),await instance.initAcl(),new Promise(resolve=>{instance.permissions.subscribe(value=>{t.deepEqual(value,{counter:{add:{allowedEntities:["0x1","0x2"]},subtract:{allowedEntities:["0x1"],manager:"manager"}}}),resolve()})})}),(0,_ava.default)("should init the acl with the default acl fetched from the kernel by default",async t=>{const{createAragon,utilsStub}=t.context;t.plan(2);// arrange
const aclProxyStub={events:_sinon.default.stub().returns(aclEvents),pastEvents:_sinon.default.stub().returns((0,_rxjs.empty)())},kernelProxyStub={call:_sinon.default.stub().withArgs("acl").resolves("0x321")};utilsStub.makeProxy.returns(kernelProxyStub).withArgs("0x321").returns(aclProxyStub);const instance=createAragon();// act
// assert
instance.cache.get=_sinon.default.stub().returns({}),instance.cache.set=_sinon.default.stub().resolves(),await instance.initAcl(),t.truthy(kernelProxyStub.call.calledOnceWith("acl")),t.truthy(utilsStub.makeProxy.calledWith("0x321"))}),(0,_ava.default)("should init the acl with the provided acl",async t=>{const{createAragon,utilsStub}=t.context;t.plan(3);// arrange
const givenAclAddress="0x123",aclProxyStub={events:_sinon.default.stub().returns(aclEvents),pastEvents:_sinon.default.stub().returns((0,_rxjs.empty)())},kernelProxyStub={call:_sinon.default.stub().withArgs("acl").resolves("0x321")};utilsStub.makeProxy.returns(kernelProxyStub).withArgs(givenAclAddress).returns(aclProxyStub);const instance=createAragon();// act
// assert
instance.cache.get=_sinon.default.stub().returns({}),instance.cache.set=_sinon.default.stub().resolves(),await instance.initAcl({aclAddress:givenAclAddress}),t.truthy(kernelProxyStub.call.notCalled),t.truthy(utilsStub.makeProxy.neverCalledWith("0x321")),t.truthy(utilsStub.makeProxy.calledWith(givenAclAddress))});const kernelAddress="0x123",appInitTestCases=[["with kernel in permissions",{"0x123":"some permissions","0x456":"some permissions","0x789":"some permissions","0xrepo":"some permissions"}],["without kernel in permissions",{"0x456":"some permissions","0x789":"some permissions","0xrepo":"some permissions"}]];appInitTestCases.forEach(_ref=>{let[testName,permissionsObj]=_ref;(0,_ava.default)(`should init the apps correctly - ${testName}`,async t=>{const{createAragon,aragonOSCoreStub,apmCoreStub,ensStub,utilsStub}=t.context;t.plan(1);// arrange
const appIds={"0x123":"kernel","0x456":"counterApp","0x789":"votingApp","0xrepo":"repoApp"},codeAddresses={"0x123":"0xkernel","0x456":"0xcounterApp","0x789":"0xvotingApp","0xrepo":"0xrepoApp"};Object.keys(appIds).forEach(address=>{const proxyStub={call:_sinon.default.stub()};proxyStub.call.withArgs("kernel").resolves("0x123").withArgs("appId").resolves(appIds[address]).withArgs("implementation").resolves(codeAddresses[address]).withArgs("isForwarder").resolves(!1),utilsStub.makeProxy.withArgs(address).returns(proxyStub)}),aragonOSCoreStub.getAragonOsInternalAppInfo.withArgs(appIds["0x123"]).returns({abi:"abi for kernel",isAragonOsInternalApp:!0}),apmCoreStub.getApmInternalAppInfo.withArgs(appIds["0xrepo"]).returns({abi:"abi for repo"}),ensStub.resolve=_sinon.default.stub().returnsArg(0);const instance=createAragon();// assert
// Check value of apps
return instance.apm={fetchLatestRepoContentForContract:appId=>Promise.resolve({abi:`abi for ${appId}`})},instance.permissions=(0,_rxjs.of)(permissionsObj),instance.kernelProxy={address:"0x123",call:_sinon.default.stub().withArgs("KERNEL_APP_ID").resolves("kernel"),events:_sinon.default.stub().returns((0,_rxjs.empty)())},await instance.initApps(),new Promise(resolve=>{instance.apps.pipe((0,_operators.first)()).subscribe(value=>{t.deepEqual(value,[{abi:"abi for kernel",appId:"kernel",codeAddress:"0xkernel",isAragonOsInternalApp:!0,proxyAddress:"0x123"},{abi:"abi for counterApp",appId:"counterApp",codeAddress:"0xcounterApp",isForwarder:!1,kernelAddress:"0x123",proxyAddress:"0x456"},{abi:"abi for votingApp",appId:"votingApp",codeAddress:"0xvotingApp",isForwarder:!1,kernelAddress:"0x123",proxyAddress:"0x789"},{abi:"abi for repoApp",appId:"repoApp",codeAddress:"0xrepoApp",isForwarder:!1,kernelAddress:"0x123",proxyAddress:"0xrepo"}]),resolve()})})})}),(0,_ava.default)("should update the apps correctly on SetApp",async t=>{const{createAragon,aragonOSCoreStub,ensStub,utilsStub}=t.context,setAppEventStub=new _rxjs.Subject;t.plan(4);// arrange
const appIds={"0x123":"kernel","0x456":"counterApp","0x789":"votingApp"},codeAddresses={"0x123":"0xkernel","0x456":"0xcounterApp","0x789":"0xvotingApp"};Object.keys(appIds).forEach(address=>{const proxyStub={call:_sinon.default.stub()};proxyStub.call.withArgs("kernel").resolves("0x123").withArgs("appId").resolves(appIds[address]).withArgs("implementation").resolves(codeAddresses[address]).withArgs("isForwarder").resolves(!1),utilsStub.makeProxy.withArgs(address).returns(proxyStub)}),aragonOSCoreStub.getAragonOsInternalAppInfo.withArgs(appIds["0x123"]).returns({abi:"abi for kernel",isAragonOsInternalApp:!0}),ensStub.resolve=_sinon.default.stub().returnsArg(0);const instance=createAragon();// act
// assert
// Check initial value of apps
// act
// let the emission propagate
// assert
// Check app has been updated
// act
// let the emission propagate
// assert
// Check correct app has been updated
// act
// let the emission propagate
// assert
// Check that we filtered the last emission as it wasn't the correct namespace
instance.apm={fetchLatestRepoContentForContract:appId=>Promise.resolve({abi:`abi for ${appId}`})},instance.permissions=(0,_rxjs.of)({"0x456":"some permissions","0x789":"some permissions"}),instance.kernelProxy={address:"0x123",call:_sinon.default.stub().withArgs("KERNEL_APP_ID").resolves("kernel"),events:_sinon.default.stub().withArgs("SetApp",{}).returns(setAppEventStub)},await instance.initApps(),await new Promise(resolve=>{instance.apps.pipe((0,_operators.first)()).subscribe(value=>{t.deepEqual(value,[{abi:"abi for kernel",appId:"kernel",codeAddress:"0xkernel",isAragonOsInternalApp:!0,proxyAddress:"0x123"},{abi:"abi for counterApp",appId:"counterApp",codeAddress:"0xcounterApp",isForwarder:!1,kernelAddress:"0x123",proxyAddress:"0x456"},{abi:"abi for votingApp",appId:"votingApp",codeAddress:"0xvotingApp",isForwarder:!1,kernelAddress:"0x123",proxyAddress:"0x789"}]),resolve()})}),setAppEventStub.next({returnValues:{appId:"counterApp",namespace:APP_NAMESPACE_HASH}}),await new Promise(resolve=>setTimeout(resolve,100)),await new Promise(resolve=>{instance.apps.pipe((0,_operators.first)()).subscribe(value=>{t.deepEqual(value,[{abi:"abi for kernel",appId:"kernel",codeAddress:"0xkernel",isAragonOsInternalApp:!0,proxyAddress:"0x123"},{abi:"abi for counterApp",appId:"counterApp",codeAddress:"0xcounterApp",isForwarder:!1,kernelAddress:"0x123",proxyAddress:"0x456",updated:!0},{abi:"abi for votingApp",appId:"votingApp",codeAddress:"0xvotingApp",isForwarder:!1,kernelAddress:"0x123",proxyAddress:"0x789"}]),resolve()})}),setAppEventStub.next({returnValues:{appId:"votingApp",namespace:APP_NAMESPACE_HASH}}),await new Promise(resolve=>setTimeout(resolve,100)),await new Promise(resolve=>{instance.apps.pipe((0,_operators.first)()).subscribe(value=>{t.deepEqual(value,[{abi:"abi for kernel",appId:"kernel",codeAddress:"0xkernel",isAragonOsInternalApp:!0,proxyAddress:"0x123"},{abi:"abi for counterApp",appId:"counterApp",codeAddress:"0xcounterApp",isForwarder:!1,kernelAddress:"0x123",proxyAddress:"0x456"},{abi:"abi for votingApp",appId:"votingApp",codeAddress:"0xvotingApp",isForwarder:!1,kernelAddress:"0x123",proxyAddress:"0x789",updated:!0}]),resolve()})}),setAppEventStub.next({returnValues:{appId:"counterApp",namespace:CORE_NAMESPACE_HASH}}),await new Promise(resolve=>setTimeout(resolve,100)),await new Promise(resolve=>{instance.apps.pipe((0,_operators.first)()).subscribe(value=>{t.deepEqual(value,[{abi:"abi for kernel",appId:"kernel",codeAddress:"0xkernel",isAragonOsInternalApp:!0,proxyAddress:"0x123"},{abi:"abi for counterApp",appId:"counterApp",codeAddress:"0xcounterApp",isForwarder:!1,kernelAddress:"0x123",proxyAddress:"0x456"},{abi:"abi for votingApp",appId:"votingApp",codeAddress:"0xvotingApp",isForwarder:!1,kernelAddress:"0x123",proxyAddress:"0x789",updated:!0}]),resolve()})})}),(0,_ava.default)("should init the app identifiers correctly",async t=>{t.plan(1);// arrange
const{createAragon}=t.context,instance=createAragon();// act
// assert
await instance.initAppIdentifiers(),instance.appIdentifiers.subscribe(value=>{t.deepEqual(value,{})})}),(0,_ava.default)("should emit reduced app identifiers correctly",async t=>{t.plan(3);// arrange
const{createAragon}=t.context,instance=createAragon();// act
// assert
// act
// assert
// act
// assert
await instance.initAppIdentifiers(),instance.setAppIdentifier("0x123","ANT"),instance.appIdentifiers.pipe((0,_operators.first)()).subscribe(value=>{t.deepEqual(value,{"0x123":"ANT"})}),instance.setAppIdentifier("0x456","BNT"),instance.appIdentifiers.pipe((0,_operators.first)()).subscribe(value=>{t.deepEqual(value,{"0x123":"ANT","0x456":"BNT"})}),instance.setAppIdentifier("0x123","CNT"),instance.appIdentifiers.pipe((0,_operators.first)()).subscribe(value=>{t.deepEqual(value,{"0x123":"CNT","0x456":"BNT"})})}),(0,_ava.default)("should init the identity providers correctly",async t=>{const{createAragon}=t.context;t.plan(3);// arrange
const instance=createAragon();// act
// assert
await instance.initIdentityProviders(),t.truthy(instance.identityProviderRegistrar),t.true(instance.identityProviderRegistrar instanceof Map),t.is(instance.identityProviderRegistrar.size,1,"Should have only one provider")}),(0,_ava.default)("should emit an intent when requesting address identity modification",async t=>{const{createAragon}=t.context,expectedAddress="0x123";t.plan(2);// arrange
const instance=createAragon();// act
await instance.initIdentityProviders(),instance.identityIntents.subscribe(intent=>{t.is(intent.address,expectedAddress),t.is(intent.providerName,"local")}),instance.requestAddressIdentityModification(expectedAddress)}),(0,_ava.default)("should be able to resolve intent when requesting address identity modification",async t=>{const{createAragon}=t.context,expectedAddress="0x123";t.plan(2);// arrange
const instance=createAragon();// act
await instance.initIdentityProviders();let counter=0;return instance.identityIntents.subscribe(intent=>{intent.resolve(counter++)}),Promise.all([instance.requestAddressIdentityModification(expectedAddress).then(val=>t.is(val,0)),instance.requestAddressIdentityModification(expectedAddress).then(val=>t.is(val,1))])}),(0,_ava.default)("should be able to reject intent when requesting address identity modification",async t=>{const{createAragon}=t.context,expectedAddress="0x123";t.plan(2);// arrange
const instance=createAragon();// act
await instance.initIdentityProviders();let counter=0;return instance.identityIntents.subscribe(intent=>{0===counter?intent.reject():intent.reject(new Error("custom error")),counter++}),Promise.all([t.throwsAsync(instance.requestAddressIdentityModification(expectedAddress),{instanceOf:Error,message:"The identity modification was not completed"}),t.throwsAsync(instance.requestAddressIdentityModification(expectedAddress),{instanceOf:Error,message:"custom error"})])}),(0,_ava.default)("should init the forwarders correctly",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon();// act
// assert
instance.apps=(0,_rxjs.of)([{appId:"counterApp",isForwarder:!0},{appId:"votingApp",isForwarder:!1}]),await instance.initForwarders(),instance.forwarders.subscribe(value=>{t.deepEqual(value,[{appId:"counterApp",isForwarder:!0}])})}),(0,_ava.default)("should emit an intent when requesting message signing",async t=>{const{createAragon}=t.context,messageToSign="test message",requestingApp="0x123";t.plan(2);// arrange
const instance=createAragon();// act
instance.signatures=new _rxjs.Subject,instance.signatures.subscribe(intent=>{t.is(intent.message,messageToSign),t.is(intent.requestingApp,requestingApp)}),instance.signMessage(messageToSign,requestingApp)}),(0,_ava.default)("should be able to resolve intent when requesting message signing",async t=>{const{createAragon}=t.context,messageToSign="test message",requestingApp="0x123";t.plan(2);// arrange
const instance=createAragon();instance.signatures=new _rxjs.Subject;// act
let counter=0;return instance.signatures.subscribe(intent=>{intent.resolve(counter++)}),Promise.all([instance.signMessage(messageToSign,requestingApp).then(val=>t.is(val,0)),instance.signMessage(messageToSign,requestingApp).then(val=>t.is(val,1))])}),(0,_ava.default)("should be able to reject intent when requesting message signing",async t=>{const{createAragon}=t.context,messageToSign="test message",requestingApp="0x123";t.plan(2);// arrange
const instance=createAragon();instance.signatures=new _rxjs.Subject;// act
let counter=0;return instance.signatures.subscribe(intent=>{0===counter?intent.reject():intent.reject(new Error("custom error")),counter++}),Promise.all([t.throwsAsync(instance.signMessage(messageToSign,requestingApp),{instanceOf:Error,message:"The message was not signed"}),t.throwsAsync(instance.signMessage(messageToSign,requestingApp),{instanceOf:Error,message:"custom error"})])}),(0,_ava.default)("should reject non-string message when requesting message signature",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon();// act
return t.throwsAsync(instance.signMessage({key:"this is not a string"},"0x123"),{instanceOf:Error,message:"Message to sign must be a string"})}),(0,_ava.default)("should emit an intent when performing transaction path",async t=>{const{createAragon}=t.context,initialAddress="0x123";t.plan(3);// arrange
const instance=createAragon();// act
instance.transactions=new _rxjs.Subject,instance.transactions.subscribe(intent=>{t.deepEqual(intent.transaction,{to:initialAddress}),t.true(Array.isArray(intent.path)),t.is(intent.path.length,2)}),instance.performTransactionPath([{to:initialAddress},{to:"0x456"}])}),(0,_ava.default)("should be able to resolve intent when performing transaction path",async t=>{const{createAragon}=t.context,initialAddress="0x123",targetAddress="0x456";t.plan(2);// arrange
const instance=createAragon();instance.transactions=new _rxjs.Subject;// act
let counter=0;return instance.transactions.subscribe(intent=>{intent.resolve(counter++)}),Promise.all([instance.performTransactionPath([{to:initialAddress},{to:targetAddress}]).then(val=>t.is(val,0)),instance.performTransactionPath([{to:initialAddress},{to:targetAddress}]).then(val=>t.is(val,1))])}),(0,_ava.default)("should be able to reject intent when perform transaction path",async t=>{const{createAragon}=t.context,initialAddress="0x123",targetAddress="0x456";t.plan(2);// arrange
const instance=createAragon();instance.transactions=new _rxjs.Subject;// act
let counter=0;return instance.transactions.subscribe(intent=>{0===counter?intent.reject():intent.reject(new Error("custom error")),counter++}),Promise.all([t.throwsAsync(instance.performTransactionPath([{to:initialAddress},{to:targetAddress}]),{instanceOf:Error,message:"The transaction was not signed"}),t.throwsAsync(instance.performTransactionPath([{to:initialAddress},{to:targetAddress}]),{instanceOf:Error,message:"custom error"})])}),(0,_ava.default)("should throw if no functions are found, when calculating the transaction path",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon();// act
return instance.permissions=(0,_rxjs.of)({counter:{add:{allowedEntities:["0x1","0x2"]},subtract:{allowedEntities:["0x1"],manager:"im manager"}}}),instance.forwarders=(0,_rxjs.of)([{appId:"forwarderA",proxyAddress:"0x999"}]),instance.apps=(0,_rxjs.of)([{appId:"counterApp",kernelAddress:"0x123",functions:[{sig:"signature",roles:[]}],proxyAddress:"0x456"},{appId:"votingApp",kernelAddress:"0x123",// functions: [{
//   sig: 'signature',
//   roles: []
// }],
proxyAddress:"0x789"}]),instance.calculateTransactionPath(null,"0x789","signature").catch(err=>{t.is(err.message,"No method named signature on 0x789")})}),(0,_ava.default)("should use normal transaction pathing when finding external transaction path for installed app",async t=>{const{createAragon}=t.context,targetAddress="0x123",targetMethodAbiFragment=[{name:"foo"}],targetParams=[8],mockPath=[{to:"0x123",data:"0x456"}];t.plan(2);// arrange
const instance=createAragon();instance.accounts=(0,_rxjs.of)("0x00"),instance.aclProxy=(0,_rxjs.of)({address:"0x456"}),instance.apps=(0,_rxjs.of)([{appId:"counterApp",kernelAddress:"0x789",abi:"abi for counterApp",proxyAddress:targetAddress}]),instance.getTransactionPath=_sinon.default.stub().returns(mockPath);// act
const externalPath=await instance.getExternalTransactionPath(targetAddress,targetMethodAbiFragment,targetParams);// assert
t.deepEqual(externalPath,mockPath),t.true(instance.getTransactionPath.calledOnceWith(targetAddress,targetMethodAbiFragment.name,targetParams))}),(0,_ava.default)("should be able to find external transaction path for non-installed app",async t=>{const{createAragon,utilsStub}=t.context,targetAddress="0x123",mockTransaction={to:targetAddress,data:"0x123"};t.plan(1);// arrange
const instance=createAragon();instance.accounts=(0,_rxjs.of)("0x00"),instance.aclProxy=(0,_rxjs.of)({address:"0x456"}),instance.apps=(0,_rxjs.of)([{appId:"counterApp",kernelAddress:"0x789",abi:"abi for counterApp",proxyAddress:"0x456"}]),instance.describeTransactionPath=_sinon.default.stub().returnsArg(0),utilsStub.transactions.createDirectTransaction=_sinon.default.stub().returns(mockTransaction);// act
const externalPath=await instance.getExternalTransactionPath(targetAddress,[{name:"foo"}],[8]);// assert
t.deepEqual(externalPath,[mockTransaction])}),(0,_ava.default)("should be able to find external transaction path for ACL",async t=>{const{createAragon,utilsStub}=t.context,targetAddress="0x123",targetMethodAbiFragment=[{name:"foo"}],targetParams=[8],mockPath=[{to:"0x123",data:"0x123"}];t.plan(2);// arrange
const instance=createAragon();instance.accounts=(0,_rxjs.of)("0x00"),instance.aclProxy=(0,_rxjs.of)({address:targetAddress}),instance.apps=(0,_rxjs.of)([{appId:"ACL",kernelAddress:"0x789",abi:"abi for ACL",proxyAddress:"0x456"}]),utilsStub.addressesEqual=_sinon.default.stub().returns(!0),instance.getACLTransactionPath=_sinon.default.stub().returns(mockPath);// act
const externalPath=await instance.getExternalTransactionPath(targetAddress,targetMethodAbiFragment,targetParams);// assert
t.deepEqual(externalPath,mockPath),t.true(instance.getACLTransactionPath.calledOnceWith(targetMethodAbiFragment.name,targetParams))}),(0,_ava.default)("should run the app and reply to a request",async t=>{const{createAragon,messengerConstructorStub,utilsStub}=t.context;// Note: This is not a "real" unit test because the rpc handlers are not mocked
t.plan(4);// arrange
const requestsStub=(0,_rxjs.of)({id:"uuid1",method:"cache",params:["get","settings"]}),messengerStub={sendResponse:_sinon.default.stub(),requests:()=>requestsStub};messengerConstructorStub.withArgs("someMessageProvider").returns(messengerStub);const instance=createAragon();instance.cache.get=_sinon.default.stub().withArgs("0x789.settings").returns((0,_rxjs.of)("user settings for the voting app")),instance.apps=(0,_rxjs.of)([{appId:"some other app with a different proxy",proxyAddress:"0x456"},{appId:"votingApp",kernelAddress:"0x123",abi:"abi for votingApp",proxyAddress:"0x789"}]),utilsStub.makeProxyFromAppABI=proxyAddress=>({address:proxyAddress,updateInitializationBlock:()=>{}}),instance.kernelProxy={initializationBlock:0};// act
const connect=await instance.runApp("0x789"),result=connect("someMessageProvider");// assert
/**
   * What we're testing here is that the request for getting the cache (messenger.requests())
   * is handled by the appropriate requestHandler.
   */t.true(result.shutdown!==void 0),t.true(result.shutdownAndClearCache!==void 0),t.is(messengerStub.sendResponse.getCall(0).args[0],"uuid1"),t.is(messengerStub.sendResponse.getCall(0).args[1],"user settings for the voting app")}),(0,_ava.default)("should run the app and be able to shutdown",async t=>{const{createAragon,messengerConstructorStub,utilsStub}=t.context;// Note: This is not a "real" unit test because the rpc handlers are not mocked
t.plan(1);// arrange
const requestsStub=new _rxjs.Subject,messengerStub={sendResponse:_sinon.default.stub(),requests:()=>requestsStub};messengerConstructorStub.withArgs("someMessageProvider").returns(messengerStub);const instance=createAragon();instance.apps=(0,_rxjs.of)([{appId:"some other app with a different proxy",proxyAddress:"0x456"},{appId:"votingApp",kernelAddress:"0x123",abi:"abi for votingApp",proxyAddress:"0x789"}]),instance.accounts=new _rxjs.ReplaySubject(1),instance.accounts.next("0x00"),utilsStub.makeProxyFromAppABI=proxyAddress=>({address:proxyAddress,updateInitializationBlock:()=>{}}),instance.kernelProxy={initializationBlock:0};// act
const connect=await instance.runApp("0x789"),result=connect("someMessageProvider");// send one message
// shutdown
// should not handle message after shutdown
// assert
// test that we've only handled messages before the handlers were shutdown
requestsStub.next({id:"uuid1",method:"accounts"}),result.shutdown(),requestsStub.next({id:"uuid2",method:"accounts"}),t.is(messengerStub.sendResponse.callCount,1)}),(0,_ava.default)("should run the app and be able to shutdown and clear cache",async t=>{const{createAragon,messengerConstructorStub,utilsStub}=t.context,runningProxyAddress="0x789";t.plan(2);// arrange
const requestsStub=new _rxjs.Subject,messengerStub={sendResponse:_sinon.default.stub(),requests:()=>requestsStub};messengerConstructorStub.withArgs("someMessageProvider").returns(messengerStub);const instance=createAragon();instance.apps=(0,_rxjs.of)([{appId:"some other app with a different proxy",proxyAddress:"0x456"},{appId:"votingApp",kernelAddress:"0x123",abi:"abi for votingApp",proxyAddress:runningProxyAddress}]),instance.accounts=new _rxjs.ReplaySubject(1),instance.accounts.next("0x00"),utilsStub.makeProxyFromAppABI=proxyAddress=>({address:proxyAddress,updateInitializationBlock:()=>{}}),instance.kernelProxy={initializationBlock:0},await instance.cache.init(),await instance.cache.set(`${runningProxyAddress}.key1`,"value1"),await instance.cache.set(`${runningProxyAddress}.key2`,"value2"),await instance.cache.set("alternative.key","alternative value");// act
const connect=await instance.runApp(runningProxyAddress),result=connect("someMessageProvider");// send one message
// shutdown and clear cache
// should not handle message after shutdown
// assert
// test that we've only handled messages before the handlers were shutdown
// test that we've cleared the cache for the running app
requestsStub.next({id:"uuid1",method:"accounts"}),await result.shutdownAndClearCache(),requestsStub.next({id:"uuid2",method:"accounts"}),t.is(messengerStub.sendResponse.callCount,1),t.true(Object.keys(await instance.cache.getAll()).every(key=>!key.startsWith(runningProxyAddress)))}),(0,_ava.default)("should get the app from a proxy address",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon();instance.apps=(0,_rxjs.of)([{appId:"some other app with a different proxy",proxyAddress:"0x456"},{appId:"votingApp",kernelAddress:"0x123",abi:"abi for votingApp",proxyAddress:"0x789"}]);// act
const result=await instance.getApp("0x789");// assert
t.deepEqual(result,{appId:"votingApp",kernelAddress:"0x123",abi:"abi for votingApp",proxyAddress:"0x789"})}),(0,_ava.default)("should get the permission manager",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon();instance.permissions=(0,_rxjs.of)({counter:{add:{allowedEntities:["0x1","0x2"]},subtract:{allowedEntities:["0x1"],manager:"im manager"}}});// act
const result=await instance.getPermissionManager("counter","subtract");// assert
t.is(result,"im manager")}),(0,_ava.default)("should be able to decode an evm call script with a single transaction",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon(),script=encodeCallScript([{to:"0xcafe1a77e84698c83ca8931f54a755176ef75f2c",data:"0xcafe"}]),decodedScript=instance.decodeTransactionPath(script);// assert
t.deepEqual(decodedScript,[{data:"0xcafe",to:"0xcafe1a77e84698c83ca8931f54a755176ef75f2c"}])}),(0,_ava.default)("should be able to decode an evm call script with multiple transactions",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon(),script=encodeCallScript([{to:"0xcafe1a77e84698c83ca8931f54a755176ef75f2c",data:"0xcafe"},{to:"0xbeefbeef03c7e5a1c29e0aa675f8e16aee0a5fad",data:"0xbeef"},{to:"0xbaaabaaa03c7e5a1c29e0aa675f8e16aee0a5fad",data:"0x"}]),decodedScript=instance.decodeTransactionPath(script);// assert
t.deepEqual(decodedScript,[{to:"0xcafe1a77e84698c83ca8931f54a755176ef75f2c",data:"0xcafe"},{to:"0xbeefbeef03c7e5a1c29e0aa675f8e16aee0a5fad",data:"0xbeef"},{to:"0xbaaabaaa03c7e5a1c29e0aa675f8e16aee0a5fad",data:"0x"}])}),(0,_ava.default)("should be able to decode an evm call script with multiple nested transactions",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon(),script=encodeCallScript([{to:"0xbfd1f54dc1c3b50ddf2f1d5fe2f8a6b9c29bb598",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000114a3208711873b6aab2005f6cca0f91658e287ef0000004440c10f19000000000000000000000000b4124cEB3451635DAcedd11767f004d8a28c6eE70000000000000000000000000000000000000000000000003782dace9d900000"// 4e18
},{to:"0x634faa183ba1f5f968cb96656d24dff66021f5a2",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000114a3208711873b6aab2005f6cca0f91658e287ef000000a4bfe07da60000000000000000000000008401eb5ff34cc943f096a32ef3d5113febe8d4eb0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000044141414100000000000000000000000000000000000000000000000000000000"// "AAAA" encoded
}]),decodedScript=instance.decodeTransactionPath(script);/* eslint-disable no-multi-spaces */ // assert
t.deepEqual(decodedScript,[{to:"0xbfd1f54dc1c3b50ddf2f1d5fe2f8a6b9c29bb598",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000114a3208711873b6aab2005f6cca0f91658e287ef0000004440c10f19000000000000000000000000b4124cEB3451635DAcedd11767f004d8a28c6eE70000000000000000000000000000000000000000000000003782dace9d900000",children:[{data:"0x40c10f19000000000000000000000000b4124cEB3451635DAcedd11767f004d8a28c6eE70000000000000000000000000000000000000000000000003782dace9d900000",to:"0x14a3208711873b6aab2005f6cca0f91658e287ef"}]},{to:"0x634faa183ba1f5f968cb96656d24dff66021f5a2",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000114a3208711873b6aab2005f6cca0f91658e287ef000000a4bfe07da60000000000000000000000008401eb5ff34cc943f096a32ef3d5113febe8d4eb0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000044141414100000000000000000000000000000000000000000000000000000000",children:[{data:"0xbfe07da60000000000000000000000008401eb5ff34cc943f096a32ef3d5113febe8d4eb0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000044141414100000000000000000000000000000000000000000000000000000000",to:"0x14a3208711873b6aab2005f6cca0f91658e287ef"}]}])}),(0,_ava.default)("should be able to decode an evm call script with a complex nested transaction",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon(),nestedScript=encodeCallScript([{to:"0xbfd1f54dc1c3b50ddf2f1d5fe2f8a6b9c29bb598",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000114a3208711873b6aab2005f6cca0f91658e287ef0000004440c10f19000000000000000000000000b4124cEB3451635DAcedd11767f004d8a28c6eE70000000000000000000000000000000000000000000000003782dace9d900000"// 4e18
},{to:"0x634faa183ba1f5f968cb96656d24dff66021f5a2",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000114a3208711873b6aab2005f6cca0f91658e287ef000000a4bfe07da60000000000000000000000008401eb5ff34cc943f096a32ef3d5113febe8d4eb0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000044141414100000000000000000000000000000000000000000000000000000000"// "AAAA" encoded
}]).substring(2),nestedScriptDataLength=`${(nestedScript.length/2).toString(16)}`.padStart(64,0),script=encodeCallScript([{to:"0x62451b8705e6691b92afaa7766c0722c93a0e204",data:"0xd948d4680000000000000000000000000000000000000000000000000000000000000020"+// offset
nestedScriptDataLength+// previous script data bytes length
nestedScript// previous script data
}]),decodedScript=instance.decodeTransactionPath(script);/* eslint-disable no-multi-spaces */ // assert
t.deepEqual(decodedScript,[{to:"0x62451b8705e6691b92afaa7766c0722c93a0e204",data:"0xd948d4680000000000000000000000000000000000000000000000000000000000000020"+nestedScriptDataLength+nestedScript,children:[{to:"0xbfd1f54dc1c3b50ddf2f1d5fe2f8a6b9c29bb598",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000114a3208711873b6aab2005f6cca0f91658e287ef0000004440c10f19000000000000000000000000b4124cEB3451635DAcedd11767f004d8a28c6eE70000000000000000000000000000000000000000000000003782dace9d900000",children:[{data:"0x40c10f19000000000000000000000000b4124cEB3451635DAcedd11767f004d8a28c6eE70000000000000000000000000000000000000000000000003782dace9d900000",to:"0x14a3208711873b6aab2005f6cca0f91658e287ef"}]},{to:"0x634faa183ba1f5f968cb96656d24dff66021f5a2",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000114a3208711873b6aab2005f6cca0f91658e287ef000000a4bfe07da60000000000000000000000008401eb5ff34cc943f096a32ef3d5113febe8d4eb0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000044141414100000000000000000000000000000000000000000000000000000000",children:[{data:"0xbfe07da60000000000000000000000008401eb5ff34cc943f096a32ef3d5113febe8d4eb0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000044141414100000000000000000000000000000000000000000000000000000000",to:"0x14a3208711873b6aab2005f6cca0f91658e287ef"}]}]}])}),(0,_ava.default)("should not decode non-call scripts",async t=>{const{createAragon}=t.context;t.plan(1);// arrange
const instance=createAragon(),script=`${"0x00000002"}${"123".padStart(64,0)}`;// assert
t.throws(()=>instance.decodeTransactionPath(script),{instanceOf:Error,message:`Script could not be decoded: ${script}`})}),(0,_ava.default)("should be only able to decode call scripts when there are multiple nested transactions",async t=>{const{createAragon}=t.context,badSpecId="0x00000002";t.plan(1);// arrange
const instance=createAragon(),script=encodeCallScript([{to:"0xbfd1f54dc1c3b50ddf2f1d5fe2f8a6b9c29bb598",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000114a3208711873b6aab2005f6cca0f91658e287ef0000004440c10f19000000000000000000000000b4124cEB3451635DAcedd11767f004d8a28c6eE70000000000000000000000000000000000000000000000003782dace9d900000"// 4e18
},{to:"0x634faa183ba1f5f968cb96656d24dff66021f5a2",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0"+// 192 data bytes length
badSpecId.substring(2)+// **BAD SPEC ID**
"14a3208711873b6aab2005f6cca0f91658e287ef000000a4bfe07da60000000000000000000000008401eb5ff34cc943f096a32ef3d5113febe8d4eb0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000044141414100000000000000000000000000000000000000000000000000000000"// "AAAA" encoded
}]),decodedScript=instance.decodeTransactionPath(script);/* eslint-disable no-multi-spaces */ // assert
t.deepEqual(decodedScript,[{to:"0xbfd1f54dc1c3b50ddf2f1d5fe2f8a6b9c29bb598",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000114a3208711873b6aab2005f6cca0f91658e287ef0000004440c10f19000000000000000000000000b4124cEB3451635DAcedd11767f004d8a28c6eE70000000000000000000000000000000000000000000000003782dace9d900000",children:[{data:"0x40c10f19000000000000000000000000b4124cEB3451635DAcedd11767f004d8a28c6eE70000000000000000000000000000000000000000000000003782dace9d900000",to:"0x14a3208711873b6aab2005f6cca0f91658e287ef"}]},{to:"0x634faa183ba1f5f968cb96656d24dff66021f5a2",data:"0xd948d468000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0"+badSpecId.substring(2)+"14a3208711873b6aab2005f6cca0f91658e287ef000000a4bfe07da60000000000000000000000008401eb5ff34cc943f096a32ef3d5113febe8d4eb0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000044141414100000000000000000000000000000000000000000000000000000000"// ignores the second target's children because it's not a call script forward
}])});
//# sourceMappingURL=index.test.js.map