{"version":3,"sources":["../../src/identity/AddressIdentityProvider.js"],"names":["AddressIdentityProvider","init","resolve","Error","modify"],"mappings":"2FAAA;;;;;;;;;GAUe,KAAMA,CAAAA,uBAAwB,CAC3C;;KAGA,KAAMC,CAAAA,IAAN,EAAc,CACb,CAED;;;;;;KAOA,KAAMC,CAAAA,OAAN,EAAwB,CACtB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,iBAAV,CACP,CAED;;;;;;KAOA,KAAMC,CAAAA,MAAN,EAAiC,CAC/B,KAAM,IAAID,CAAAA,KAAJ,CAAU,iBAAV,CACP,CA3B0C,C","sourcesContent":["/**\n * An identity provider for addresses\n *\n * This is the expected interface which all identity\n * providers are expected to implement\n * Additional functionality can be added in subclasses\n *\n *\n * @class AddressIdentityProvider\n */\nexport default class AddressIdentityProvider {\n  /**\n   * Optional initialization, if required by the provider\n   */\n  async init () {\n  }\n\n  /**\n   * Resolve the identity metadata for an address\n   * Should resolve to null if an identity could not be found\n   *\n   * @param  {string} address Address to resolve\n   * @return {Promise} Resolved metadata or rejected error\n   */\n  async resolve (address) {\n    throw new Error('Not implemented')\n  }\n\n  /**\n   * Modify the identity metadata of an address\n   *\n   * @param  {string} address  Address to resolve\n   * @param  {Object} metadata Metadata to modify\n   * @return {Promise} Resolved success action or rejected error\n   */\n  async modify (address, metadata) {\n    throw new Error('Not implemented')\n  }\n}\n"],"file":"AddressIdentityProvider.js"}