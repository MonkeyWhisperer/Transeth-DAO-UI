{"version":3,"sources":["../../src/identity/LocalIdentityProvider.test.js"],"names":["ADDRESS_MIXED_CASE","ADDRESS_LOWER_CASE","SECOND_ADDRESS","THIRD_ADDRESS","test","beforeEach","t","context","localIdentityProvider","LocalIdentityProvider","init","afterEach","identityCache","clear","serial","plan","provider","expectedName","modify","name","identityMetadata","resolve","is","throwsAsync","instanceOf","Error","message","overwrittenName","firstIdentityMetadata","secondidentityMetadata","truthy","createdAt","name1","name2","remove","falsy","name4","all","getAll","Object","keys","length","toLowerCase","identities","searchTermToExpectation","names","address","searchTerm","expectedResult","entries","results","search","resultNames","map","deepEqual"],"mappings":"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","sourcesContent":["import test from 'ava'\n\nimport { LocalIdentityProvider } from './index'\n\nconst ADDRESS_MIXED_CASE = '0x332462D19fC398189844E6F23685e19c21F5B265'\nconst ADDRESS_LOWER_CASE = '0x332462d19fc398189844e6f23685e19c21f5b265'\nconst SECOND_ADDRESS = '0x552462d19fc398189844e6f23685e19c21f5b200'\nconst THIRD_ADDRESS = '0x7d77398078079B0D57ed872319F26D29B5405eb8'\n\ntest.beforeEach(async t => {\n  t.context.localIdentityProvider = new LocalIdentityProvider()\n  await t.context.localIdentityProvider.init()\n})\n\ntest.afterEach(async t => {\n  // Reset cache after each test because its storage is global\n  await t.context.localIdentityProvider.identityCache.clear()\n})\n\n// The tests run serially to prevent leaks between tests\n// because instances of LocalIdentityProvider rely on the\n// same underlying cache storage key.\ntest.serial('should modify a local identity', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n  const expectedName = 'vitalik'\n\n  await provider.modify(ADDRESS_MIXED_CASE, { name: expectedName })\n  const identityMetadata = await provider.resolve(ADDRESS_MIXED_CASE)\n  t.is(identityMetadata.name, expectedName)\n})\n\ntest.serial('should throw an error when no name is given', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n\n  await t.throwsAsync(async () => {\n    await provider.modify(ADDRESS_MIXED_CASE)\n  }, {\n    instanceOf: Error,\n    message: 'name is required when modifying a local identity'\n  })\n})\n\ntest.serial('should return null when resolving non existent local identity', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n\n  const identityMetadata = await provider.resolve(ADDRESS_LOWER_CASE)\n  t.is(identityMetadata, null)\n})\n\ntest.serial('should throw an error when no address is provided', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n\n  await t.throwsAsync(provider.resolve(null), {\n    instanceOf: Error\n  })\n})\n\ntest.serial('should be case insensitive when resolving', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n  const expectedName = 'vitalik'\n\n  await provider.modify(ADDRESS_MIXED_CASE, { name: expectedName })\n  const identityMetadata = await provider.resolve(ADDRESS_LOWER_CASE)\n\n  t.is(identityMetadata.name, expectedName)\n})\n\ntest.serial('should be case insensitive when modifying', async t => {\n  t.plan(2)\n  const provider = t.context.localIdentityProvider\n  const expectedName = 'vitalik'\n  const overwrittenName = 'gavin'\n\n  await provider.modify(ADDRESS_MIXED_CASE, { name: expectedName })\n  await provider.modify(ADDRESS_LOWER_CASE, { name: overwrittenName })\n\n  const firstIdentityMetadata = await provider.resolve(ADDRESS_MIXED_CASE)\n  const secondidentityMetadata = await provider.resolve(ADDRESS_LOWER_CASE)\n\n  t.is(firstIdentityMetadata.name, overwrittenName)\n  t.is(secondidentityMetadata.name, overwrittenName)\n})\n\ntest.serial('should always have createAt in metadata', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n  const name = 'vitalik'\n  await provider.modify(ADDRESS_MIXED_CASE, { name })\n  const identityMetadata = await provider.resolve(ADDRESS_LOWER_CASE)\n  t.truthy(identityMetadata.createdAt)\n})\n\ntest.serial('removes selected local identities', async t => {\n  t.plan(4)\n  const provider = t.context.localIdentityProvider\n  const name = 'vitalik'\n  await provider.modify(ADDRESS_MIXED_CASE, { name })\n  await provider.modify(SECOND_ADDRESS, { name })\n\n  const { name: name1 } = await provider.resolve(ADDRESS_MIXED_CASE)\n  t.is(name1, name)\n  const { name: name2 } = await provider.resolve(SECOND_ADDRESS)\n  t.is(name2, name)\n\n  await provider.remove(ADDRESS_MIXED_CASE)\n\n  t.falsy(await provider.resolve(ADDRESS_MIXED_CASE))\n  const { name: name4 } = await provider.resolve(SECOND_ADDRESS)\n  t.is(name4, name)\n})\n\ntest.serial('getAll will return all local identities with lowercase address keys', async t => {\n  t.plan(7)\n  const provider = t.context.localIdentityProvider\n  const name = 'vitalik'\n  await provider.modify(ADDRESS_MIXED_CASE, { name })\n  await provider.modify(SECOND_ADDRESS, { name })\n  await provider.modify(THIRD_ADDRESS, { name })\n\n  const all = await provider.getAll()\n\n  t.is(Object.keys(all).length, 3)\n  t.is(all[ADDRESS_LOWER_CASE].name, name)\n  t.is(all[SECOND_ADDRESS].name, name)\n  t.is(all[THIRD_ADDRESS.toLowerCase()].name, name)\n\n  t.truthy(all[ADDRESS_LOWER_CASE].createdAt)\n  t.truthy(all[SECOND_ADDRESS].createdAt)\n  t.truthy(all[THIRD_ADDRESS.toLowerCase()].createdAt)\n})\n\ntest.serial('search should return an array of results of freely matching identities', async t => {\n  // t.plan(7)\n  const provider = t.context.localIdentityProvider\n  const identities = [\n    [ '0x1110000000000000000000000000000000000001', 'James Baldwin' ],\n    [ '0x1120000000000000000000000000000000000001', 'David Deutsch' ],\n    [ '0x3000000000000000000000000000000000000001', 'Isaac Newton' ],\n    [ '0x4000000000000000000000000000000000000001', 'Henry Newton' ],\n    [ '0x6000000000000000000000000000000000000001', 'Marie Curie' ],\n    [ '0x7000000000000000000000000000000000000001', 'Winnie the Pooh' ],\n    [ '0x8900000000088888870000000000000000000001', 'Richard Feynman' ],\n    [ '0x0900000000000000000000000000000000000001', 'Aristotle' ],\n    [ '0xa000000000000000000000000000000000000002', '0x3b The Who' ],\n    [ '0x3b00000000000000000000000000000000000002', 'The man who sold the world? (Nirvana not $Bowie)' ]\n  ]\n  // map of search terms to expected count and names\n  const searchTermToExpectation = {\n    'D': { names: ['James Baldwin', 'David Deutsch', 'Richard Feynman', 'The man who sold the world? (Nirvana not $Bowie)'] },\n    'xn': { names: [] },\n    '0a': { names: [] },\n    'eu': { names: ['David Deutsch'] },\n    'new': { names: [ 'Isaac Newton', 'Henry Newton' ] },\n    'win': { names: [ 'James Baldwin', 'Winnie the Pooh' ] },\n    'jam': { names: [ 'James Baldwin' ] },\n    'ari': { names: [ 'Marie Curie', 'Aristotle' ] },\n    '0x09': { names: [ 'Aristotle' ] },\n    '0x11': { names: [ 'James Baldwin', 'David Deutsch' ] },\n    '0x3b': { names: [ '0x3b The Who', 'The man who sold the world? (Nirvana not $Bowie)' ] },\n    'who': { names: [ '0x3b The Who', 'The man who sold the world? (Nirvana not $Bowie)' ] }\n  }\n  // save test identities\n  for (const [address, name] of identities) {\n    await provider.modify(address, { name })\n  }\n\n  for (const [searchTerm, expectedResult] of Object.entries(searchTermToExpectation)) {\n    const results = await provider.search(searchTerm)\n    const resultNames = results.map(({ name }) => name)\n    t.is(results.length, expectedResult.names.length, `Matching the result count when searching for ${searchTerm}`)\n    t.deepEqual(resultNames, expectedResult.names)\n  }\n})\n"],"file":"LocalIdentityProvider.test.js"}