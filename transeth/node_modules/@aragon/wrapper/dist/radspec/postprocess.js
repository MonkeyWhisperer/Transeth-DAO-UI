"use strict";Object.defineProperty(exports,"__esModule",{value:!0// force cache invalidation
}),exports.postprocessRadspecDescription=postprocessRadspecDescription;var _operators=require("rxjs/operators"),_kernel=require("../core/aragonOS/kernel"),_utils=require("../utils");/**
  * Look for known addresses and roles in a radspec description and substitute them with a human string
  *
  * @param  {string} description
  * @return {Promise<Object>} Description and annotated description
  */async function postprocessRadspecDescription(description,wrapper){const bytes32RegexStr="0x[a-f0-9]{64}",bytes32Regex=new RegExp(`^${bytes32RegexStr}$`),combinedRegex=new RegExp(`\\b(${"0x[a-fA-F0-9]{40}"}|${bytes32RegexStr})\\b`),tokens=description.split(combinedRegex).map(token=>token.trim()).filter(token=>token);if(1>tokens.length)return{description};const apps=await wrapper.apps.pipe((0,_operators.first)()).toPromise(),roles=apps.map(({roles})=>roles||[]).reduce((acc,roles)=>acc.concat(roles),[]),annotateAddress=input=>{if((0,_utils.addressesEqual)(input,_utils.ANY_ENTITY))return[input,"\u201CAny account\u201D",{type:"any-account",value:_utils.ANY_ENTITY}];const app=apps.find(({proxyAddress})=>(0,_utils.addressesEqual)(proxyAddress,input));if(app){const replacement=`${app.name}${app.identifier?` (${app.identifier})`:""}`;return[input,`“${replacement}”`,{type:"app",value:app}]}return[input,input,{type:"address",value:input}]},annotateBytes32=input=>{const role=roles.find(({bytes})=>bytes===input);if(role&&role.name)return[input,`“${role.name}”`,{type:"role",value:role}];const app=apps.find(({appId})=>appId===input);if(app)// return the entire app as it contains APM package details
return[input,`“${app.appName}”`,{type:"apmPackage",value:app}];const namespace=(0,_kernel.getKernelNamespace)(input);return namespace?[input,`“${namespace.name}”`,{type:"kernelNamespace",value:namespace}]:[input,input,{type:"bytes32",value:input}]},annotateText=input=>[input,input,{type:"text",value:input}],annotatedTokens=tokens.map(token=>/^0x[a-fA-F0-9]{40}$/.test(token)?annotateAddress(token):bytes32Regex.test(token)?annotateBytes32(token):annotateText(token)),compiled=annotatedTokens.reduce((acc,[_,replacement,annotation])=>(acc.description.push(replacement),acc.annotatedDescription.push(annotation),acc),{annotatedDescription:[],description:[]});return{annotatedDescription:compiled.annotatedDescription,description:compiled.description.join(" ")}}
//# sourceMappingURL=postprocess.js.map