{"version":3,"sources":["../../src/radspec/postprocess.js"],"names":["postprocessRadspecDescription","description","wrapper","bytes32RegexStr","bytes32Regex","RegExp","combinedRegex","tokens","split","map","token","trim","filter","length","apps","pipe","toPromise","roles","reduce","acc","concat","annotateAddress","input","ANY_ENTITY","type","value","app","find","proxyAddress","replacement","name","identifier","annotateBytes32","role","bytes","appId","appName","namespace","annotateText","annotatedTokens","test","compiled","_","annotation","push","annotatedDescription","join"],"mappings":"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","sourcesContent":["import { first } from 'rxjs/operators'\nimport { getKernelNamespace } from '../core/aragonOS/kernel'\nimport { addressesEqual, ANY_ENTITY } from '../utils'\n\n/**\n  * Look for known addresses and roles in a radspec description and substitute them with a human string\n  *\n  * @param  {string} description\n  * @return {Promise<Object>} Description and annotated description\n  */\nexport async function postprocessRadspecDescription (description, wrapper) {\n  const addressRegexStr = '0x[a-fA-F0-9]{40}'\n  const addressRegex = new RegExp(`^${addressRegexStr}$`)\n  const bytes32RegexStr = '0x[a-f0-9]{64}'\n  const bytes32Regex = new RegExp(`^${bytes32RegexStr}$`)\n  const combinedRegex = new RegExp(`\\\\b(${addressRegexStr}|${bytes32RegexStr})\\\\b`)\n\n  const tokens = description\n    .split(combinedRegex)\n    .map(token => token.trim())\n    .filter(token => token)\n\n  if (tokens.length < 1) {\n    return { description }\n  }\n\n  const apps = await wrapper.apps.pipe(first()).toPromise()\n  const roles = apps\n    .map(({ roles }) => roles || [])\n    .reduce((acc, roles) => acc.concat(roles), []) // flatten\n\n  const annotateAddress = (input) => {\n    if (addressesEqual(input, ANY_ENTITY)) {\n      return [input, '“Any account”', { type: 'any-account', value: ANY_ENTITY }]\n    }\n\n    const app = apps.find(\n      ({ proxyAddress }) => addressesEqual(proxyAddress, input)\n    )\n    if (app) {\n      const replacement = `${app.name}${app.identifier ? ` (${app.identifier})` : ''}`\n      return [input, `“${replacement}”`, { type: 'app', value: app }]\n    }\n\n    return [input, input, { type: 'address', value: input }]\n  }\n\n  const annotateBytes32 = (input) => {\n    const role = roles.find(({ bytes }) => bytes === input)\n\n    if (role && role.name) {\n      return [input, `“${role.name}”`, { type: 'role', value: role }]\n    }\n\n    const app = apps.find(({ appId }) => appId === input)\n\n    if (app) {\n      // return the entire app as it contains APM package details\n      return [input, `“${app.appName}”`, { type: 'apmPackage', value: app }]\n    }\n\n    const namespace = getKernelNamespace(input)\n    if (namespace) {\n      return [input, `“${namespace.name}”`, { type: 'kernelNamespace', value: namespace }]\n    }\n\n    return [input, input, { type: 'bytes32', value: input }]\n  }\n\n  const annotateText = (input) => {\n    return [input, input, { type: 'text', value: input }]\n  }\n\n  const annotatedTokens = tokens.map(token => {\n    if (addressRegex.test(token)) {\n      return annotateAddress(token)\n    }\n    if (bytes32Regex.test(token)) {\n      return annotateBytes32(token)\n    }\n    return annotateText(token)\n  })\n\n  const compiled = annotatedTokens.reduce((acc, [_, replacement, annotation]) => {\n    acc.description.push(replacement)\n    acc.annotatedDescription.push(annotation)\n    return acc\n  }, {\n    annotatedDescription: [],\n    description: []\n  })\n\n  return {\n    annotatedDescription: compiled.annotatedDescription,\n    description: compiled.description.join(' ')\n  }\n}\n"],"file":"postprocess.js"}