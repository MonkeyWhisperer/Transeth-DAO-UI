{"version":3,"sources":["../../../src/core/aragonOS/kernel.js"],"names":["SET_APP_ABI","name","type","CORE_NAMESPACE","APP_ADDR_NAMESPACE","APP_BASES_NAMESPACE","KERNEL_NAMESPACES_NAMES","Map","decodeKernelSetAppParameters","data","paramData","substring","abi","decodeParameters","getKernelNamespace","hash","has","get","isKernelAppCodeNamespace","namespaceHash","isKernelSetAppIntent","kernelApp","intent","proxyAddress","to","method","sig"],"mappings":"yhBAMMA,CAAAA,WAAW,CAAG,CAClB,CAAEC,IAAI,CAAE,WAAR,CAAqBC,IAAI,CAAE,SAA3B,CADkB,CAElB,CAAED,IAAI,CAAE,OAAR,CAAiBC,IAAI,CAAE,SAAvB,CAFkB,CAGlB,CAAED,IAAI,CAAE,YAAR,CAAsBC,IAAI,CAAE,SAA5B,CAHkB,C,CAMdC,cAAc,CAAG,4BAAa,MAAb,C,CACjBC,kBAAkB,CAAG,4BAAa,KAAb,C,CACrBC,mBAAmB,CAAG,4BAAa,MAAb,C,CACtBC,uBAAuB,CAAG,GAAIC,CAAAA,GAAJ,CAAQ,CACtC,CAACJ,cAAD,CAAiB,MAAjB,CADsC,CAEtC,CAACC,kBAAD,CAAqB,cAArB,CAFsC,CAGtC,CAACC,mBAAD,CAAsB,UAAtB,CAHsC,CAAR,C,CAMhC;;;;;GAMO,QAASG,CAAAA,4BAAT,CAAuCC,IAAvC,CAA6C,CAClD;AACA,KAAMC,CAAAA,SAAS,CAAGD,IAAI,CAACE,SAAL,CAAe,EAAf,CAAlB,CACA,MAAOC,qBAAIC,gBAAJ,CAAqBb,WAArB,CAAkCU,SAAlC,CACR,CAEM,QAASI,CAAAA,kBAAT,CAA6BC,IAA7B,CAAmC,CACxC,MAAOT,CAAAA,uBAAuB,CAACU,GAAxB,CAA4BD,IAA5B,EACH,CAAEd,IAAI,CAAEK,uBAAuB,CAACW,GAAxB,CAA4BF,IAA5B,CAAR,CAA2CA,IAA3C,CADG,CAEH,IACL,CAEM,QAASG,CAAAA,wBAAT,CAAmCC,aAAnC,CAAkD,CACvD,MAAOA,CAAAA,aAAa,GAAKd,mBAC1B,CAED;;;;;;GAOO,QAASe,CAAAA,oBAAT,CAA+BC,SAA/B,CAA0CC,MAA1C,CAAkD,CACvD,GAAI,CAAC,0BAAeD,SAAS,CAACE,YAAzB,CAAuCD,MAAM,CAACE,EAA9C,CAAL,CAAwD,SAExD,KAAMC,CAAAA,MAAM,CAAG,gCAAsBJ,SAAtB,CAAiCC,MAAM,CAACb,IAAxC,CAAf,CACA,MAAO,CAAC,CAACgB,MAAF,EAA2B,iCAAf,GAAAA,MAAM,CAACC,GAC3B","sourcesContent":["import abi from 'web3-eth-abi'\nimport { soliditySha3 } from 'web3-utils'\n\nimport { addressesEqual } from '../../utils'\nimport { findAppMethodFromData } from '../../utils/apps'\n\nconst SET_APP_ABI = [\n  { name: 'namespace', type: 'bytes32' },\n  { name: 'appId', type: 'bytes32' },\n  { name: 'appAddress', type: 'address' }\n]\n\nconst CORE_NAMESPACE = soliditySha3('core')\nconst APP_ADDR_NAMESPACE = soliditySha3('app')\nconst APP_BASES_NAMESPACE = soliditySha3('base')\nconst KERNEL_NAMESPACES_NAMES = new Map([\n  [CORE_NAMESPACE, 'Core'],\n  [APP_ADDR_NAMESPACE, 'Default apps'],\n  [APP_BASES_NAMESPACE, 'App code']\n])\n\n/**\n * Decode `Kernel.setApp()` parameters based on transaction data.\n *\n * @param  {Object} data Transaction data\n * @return {Object} Decoded parameters for `setApp()` (namespace, appId, appAddress)\n */\nexport function decodeKernelSetAppParameters (data) {\n  // Strip 0x prefix + bytes4 sig to get parameter data\n  const paramData = data.substring(10)\n  return abi.decodeParameters(SET_APP_ABI, paramData)\n}\n\nexport function getKernelNamespace (hash) {\n  return KERNEL_NAMESPACES_NAMES.has(hash)\n    ? { name: KERNEL_NAMESPACES_NAMES.get(hash), hash }\n    : null\n}\n\nexport function isKernelAppCodeNamespace (namespaceHash) {\n  return namespaceHash === APP_BASES_NAMESPACE\n}\n\n/**\n * Is the transaction intent for `Kernel.setApp()`?\n *\n * @param  {Object} kernelApp App artifact for Kernel\n * @param  {Object} intent Transaction intent\n * @return {Boolean} Whether the intent is `Kernel.setApp()`\n */\nexport function isKernelSetAppIntent (kernelApp, intent) {\n  if (!addressesEqual(kernelApp.proxyAddress, intent.to)) return false\n\n  const method = findAppMethodFromData(kernelApp, intent.data)\n  return !!method && method.sig === 'setApp(bytes32,bytes32,address)'\n}\n"],"file":"kernel.js"}