{"version":3,"file":"index.js","names":["DEFAULT_FETCH_TIMEOUT","getApmInternalAppInfo","appId","getAppInfo","fetchRepoContentFromVersion","fetcher","versionData","fetchTimeout","contentURI","contractAddress","version","appContent","fetchRepoContentURI","err","console","warn","web3","ipfsGateway","FileFetcher","getContentPath","path","location","provider","getFullPath","fetchLatestRepoContent","repoAddress","options","repo","makeRepoProxy","getRepoLatestVersion","fetchLatestRepoContentForContract","codeAddress","fetchVersionData","shouldOverrideAppWithLatestVersion","getRepoLatestVersionForContract"],"sources":["../../../src/core/apm/index.js"],"sourcesContent":["import { shouldOverrideAppWithLatestVersion } from './overrides'\nimport {\n  getRepoLatestVersion,\n  getRepoLatestVersionForContract,\n  fetchRepoContentURI,\n  makeRepoProxy\n} from './repo'\nimport { getAppInfo } from '../../interfaces'\nimport FileFetcher from '../../utils/FileFetcher'\n\nconst DEFAULT_FETCH_TIMEOUT = 10000 // 10s\n\nexport function getApmInternalAppInfo (appId) {\n  return getAppInfo(appId, 'apm')\n}\n\nasync function fetchRepoContentFromVersion (fetcher, versionData, { fetchTimeout }) {\n  const { contentURI, contractAddress, version } = versionData\n\n  let appContent\n  try {\n    appContent = await fetchRepoContentURI(fetcher, contentURI, { fetchTimeout })\n  } catch (err) {\n    console.warn('Fetching repo content failed', err)\n  }\n\n  return {\n    ...appContent,\n    contractAddress,\n    version\n  }\n}\n\nexport default function (web3, { ipfsGateway, fetchTimeout = DEFAULT_FETCH_TIMEOUT } = {}) {\n  const fetcher = new FileFetcher({ ipfsGateway })\n\n  return {\n    getContentPath: ({ location, provider }, path) =>\n      fetcher.getFullPath(provider, location, path),\n    fetchLatestRepoContent: async (repoAddress, options) => {\n      const repo = makeRepoProxy(repoAddress, web3)\n      return fetchRepoContentFromVersion(\n        fetcher,\n        await getRepoLatestVersion(repo),\n        { fetchTimeout, ...options }\n      )\n    },\n    fetchLatestRepoContentForContract: async (repoAddress, codeAddress, options) => {\n      const repo = makeRepoProxy(repoAddress, web3)\n      const fetchVersionData =\n        shouldOverrideAppWithLatestVersion(repoAddress, codeAddress)\n          ? getRepoLatestVersion(repo)\n          : getRepoLatestVersionForContract(repo, codeAddress)\n\n      return fetchRepoContentFromVersion(\n        fetcher,\n        await fetchVersionData,\n        { fetchTimeout, ...options }\n      )\n    }\n  }\n}\n"],"mappings":"yvCAUA,KAAMA,sBAAqB,CAAG,GAA9B,CAAoC;AAE7B,QAASC,sBAAT,CAAgCC,KAAhC,CAAuC,CAC5C,MAAO,GAAAC,sBAAA,EAAWD,KAAX,CAAkB,KAAlB,CACR,CAED,cAAeE,4BAAf,CAA4CC,OAA5C,CAAqDC,WAArD,MAAoF,IAAlB,CAAEC,YAAF,CAAkB,MAClF,KAAM,CAAEC,UAAF,CAAcC,eAAd,CAA+BC,OAA/B,EAA2CJ,WAAjD,CAEA,GAAIK,WAAJ,CACA,GAAI,CACFA,UAAU,CAAG,KAAM,GAAAC,yBAAA,EAAoBP,OAApB,CAA6BG,UAA7B,CAAyC,CAAED,YAAF,CAAzC,CACpB,CAAC,MAAOM,GAAP,CAAY,CACZC,OAAO,CAACC,IAAR,CAAa,8BAAb,CAA6CF,GAA7C,CACD,CAED,sCACKF,UADL,MAEEF,eAFF,CAGEC,OAHF,EAKD,CAEc,kBAAUM,IAAV,CAA4E,IAA5D,CAAEC,WAAF,CAAeV,YAAY,CAAGP,qBAA9B,CAA4D,wDAAJ,EAAI,CACzF,KAAMK,QAAO,CAAG,GAAIa,qBAAJ,CAAgB,CAAED,WAAF,CAAhB,CAAhB,CAEA,MAAO,CACLE,cAAc,CAAE,OAAyBC,IAAzB,OAAC,CAAEC,QAAF,CAAYC,QAAZ,CAAD,aACdjB,QAAO,CAACkB,WAAR,CAAoBD,QAApB,CAA8BD,QAA9B,CAAwCD,IAAxC,CADc,CADX,CAGLI,sBAAsB,CAAE,MAAOC,WAAP,CAAoBC,OAApB,GAAgC,CACtD,KAAMC,KAAI,CAAG,GAAAC,mBAAA,EAAcH,WAAd,CAA2BT,IAA3B,CAAb,CACA,MAAOZ,4BAA2B,CAChCC,OADgC,CAEhC,KAAM,GAAAwB,0BAAA,EAAqBF,IAArB,CAF0B,gBAG9BpB,YAH8B,EAGbmB,OAHa,EAKnC,CAVI,CAWLI,iCAAiC,CAAE,MAAOL,WAAP,CAAoBM,WAApB,CAAiCL,OAAjC,GAA6C,MACxEC,KAAI,CAAG,GAAAC,mBAAA,EAAcH,WAAd,CAA2BT,IAA3B,CADiE,CAExEgB,gBAAgB,CACpB,GAAAC,6CAAA,EAAmCR,WAAnC,CAAgDM,WAAhD,EACI,GAAAF,0BAAA,EAAqBF,IAArB,CADJ,CAEI,GAAAO,qCAAA,EAAgCP,IAAhC,CAAsCI,WAAtC,CALwE,CAO9E,MAAO3B,4BAA2B,CAChCC,OADgC,CAEhC,KAAM2B,iBAF0B,gBAG9BzB,YAH8B,EAGbmB,OAHa,EAKnC,CAvBI,CAyBR"}