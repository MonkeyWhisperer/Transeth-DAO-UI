{"version":3,"sources":["../src/index.test.js"],"names":["jsonrpcStub","MPM","Messenger","default","test","afterEach","always","sinon","restore","t","instance","true","provider","messagesStub","stub","returns","messages","bus","is","payload","id","jsonrpc","encodeResponse","mockProvider","send","spy","sendResponse","calledOnceWith","getCall","args","encodeRequest","plan","busMock","Subject","isValidResponse","responses","subscribe","value","next","complete","requests","responsesMock","sendAndObserveResponses","data","error","Error","message","completed","notCalled","sendAndObserveResponse","fail"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport proxyquire from 'proxyquire'\nimport { empty, of, Subject } from 'rxjs'\n\nconst jsonrpcStub = {}\nclass MPM {}\nconst Messenger = proxyquire('./index', {\n  './jsonrpc': {\n    default: jsonrpcStub\n  },\n  './providers/MessagePortMessage': {\n    default: MPM\n  }\n}).default\n\ntest.afterEach.always(() => {\n  sinon.restore()\n})\n\ntest('should assign MessagePortMessage as default provider', t => {\n  // arrange\n  // act\n  const instance = new Messenger()\n  // assert\n  t.true(instance.provider instanceof MPM)\n})\n\ntest('should return the messages from provider', t => {\n  // arrange\n  const messagesStub = sinon.stub().returns(6)\n  const instance = new Messenger({ messages: messagesStub })\n  // act\n  const bus = instance.bus()\n  // assert\n  t.is(bus, 6)\n})\n\ntest('should encode and send the response', t => {\n  // arrange\n  const payload = { id: 2, jsonrpc: '2.0' }\n  jsonrpcStub.encodeResponse = sinon.stub().returns(payload)\n  const mockProvider = { send: sinon.spy() }\n  const instance = new Messenger(mockProvider)\n  // act\n  const id = instance.sendResponse(200, 'success')\n  // assert\n  t.true(jsonrpcStub.encodeResponse.calledOnceWith(200, 'success'))\n\n  t.is(id, 2)\n  t.is(mockProvider.send.getCall(0).args[0], payload)\n})\n\ntest('should encode and send the request', t => {\n  // arrange\n  const payload = { id: 'uuuuidv4', jsonrpc: '2.0' }\n  jsonrpcStub.encodeRequest = sinon.stub().returns(payload)\n  const mockProvider = { send: sinon.spy() }\n  const instance = new Messenger(mockProvider)\n  // act\n  const id = instance.send('sendEth')\n  // assert\n  t.true(jsonrpcStub.encodeRequest.calledOnceWith('sendEth', []))\n\n  t.is(id, 'uuuuidv4')\n  t.true(mockProvider.send.calledOnceWith(payload))\n})\n\ntest('should filter the incoming messages to responses only', (t) => {\n  t.plan(2)\n\n  // arrange\n  const busMock = new Subject()\n  const instance = new Messenger(null)\n  instance.bus = () => busMock\n  jsonrpcStub.isValidResponse = sinon.stub().returns(true)\n\n  // assert\n  instance.responses().subscribe(value => {\n    t.is(value, 'response')\n    t.is(jsonrpcStub.isValidResponse.getCall(0).args[0], 'response')\n  })\n\n  // act\n  busMock.next('response')\n  busMock.complete()\n})\n\ntest('should filter the incoming messages to requests only', (t) => {\n  t.plan(2)\n\n  // arrange\n  const busMock = new Subject()\n  const instance = new Messenger(null)\n  instance.bus = () => busMock\n  jsonrpcStub.isValidResponse = sinon.stub().returns(false)\n\n  // assert\n  instance.requests().subscribe(value => {\n    t.is(value, 'request')\n    t.is(jsonrpcStub.isValidResponse.getCall(0).args[0], 'request')\n  })\n\n  // act\n  busMock.next('request')\n  busMock.complete()\n})\n\ntest('should send and observe responses', (t) => {\n  t.plan(3)\n\n  // arrange\n  const id = 41\n  const responsesMock = new Subject()\n  const instance = new Messenger(null)\n  sinon.stub(instance, 'send').returns(id)\n  sinon.stub(instance, 'responses').returns(responsesMock)\n  const messages = instance.sendAndObserveResponses('sendEth', ['params'])\n\n  // assert\n  messages.subscribe(value => t.is(value.data, 'thanks'))\n  t.true(instance.send.calledOnceWith('sendEth', ['params']))\n\n  // act\n  responsesMock.next({ data: 'thanks', id })\n  responsesMock.next({ data: 'thanks', id })\n  responsesMock.complete()\n})\n\ntest('should send and observe responses, even if errors are included', (t) => {\n  t.plan(5)\n\n  // arrange\n  const id = 41\n  const responsesMock = new Subject()\n  const instance = new Messenger(null)\n  sinon.stub(instance, 'send').returns(id)\n  sinon.stub(instance, 'responses').returns(responsesMock)\n  const messages = instance.sendAndObserveResponses('sendEth', ['params'])\n\n  // assert\n  messages.subscribe(value => {\n    if (value.data) {\n      t.is(value.data, 'thanks')\n    } else if (value.error) {\n      t.true(value.error instanceof Error)\n      t.is(value.error.message, 'no thanks')\n    }\n  })\n  t.true(instance.send.calledOnceWith('sendEth', ['params']))\n\n  // act\n  responsesMock.next({ data: 'thanks', id })\n  responsesMock.next({ error: 'no thanks', id })\n  responsesMock.next({ data: 'thanks', id })\n  responsesMock.complete()\n})\n\ntest('should end response stream, once notified of its completion', (t) => {\n  t.plan(2)\n\n  // arrange\n  const id = 41\n  const responsesMock = new Subject()\n  const instance = new Messenger(null)\n  sinon.stub(instance, 'send').returns(id)\n  sinon.stub(instance, 'responses').returns(responsesMock)\n  const messages = instance.sendAndObserveResponses('sendEth')\n\n  // assert\n  let completed\n  messages.subscribe({\n    next (value) { t.is(value.data, 'thanks') },\n    complete () { completed = true }\n  })\n\n  // act\n  responsesMock.next({ data: 'thanks', id })\n  responsesMock.next({ completed: true, id }) // this should complete the messages stream\n  responsesMock.next({ data: 'thanks again', id })\n  responsesMock.complete()\n\n  t.true(completed)\n})\n\ntest('should send and observe responses, defaulting parameters to empty array', (t) => {\n  t.plan(1)\n\n  // arrange\n  const instance = new Messenger(null)\n  sinon.stub(instance, 'send')\n  sinon.stub(instance, 'responses').returns(empty())\n  const messages = instance.sendAndObserveResponses('sendEth')\n\n  // assert\n  messages.subscribe()\n  t.true(instance.send.calledOnceWith('sendEth', []))\n})\n\ntest('should send and observe responses, but delay sending the request after subscribing', (t) => {\n  t.plan(2)\n\n  // arrange\n  const instance = new Messenger(null)\n  sinon.stub(instance, 'send')\n  sinon.stub(instance, 'responses').returns(empty())\n  const messages = instance.sendAndObserveResponses('sendEth', ['params'])\n\n  // assert\n  t.true(instance.send.notCalled) // hasn't sent request before subscribing\n  messages.subscribe()\n  t.true(instance.send.calledOnceWith('sendEth', ['params']))\n})\n\ntest('should send and observe only the first response', (t) => {\n  t.plan(2)\n\n  // arrange\n  const id = 41\n  const responsesMock = new Subject()\n  const instance = new Messenger(null)\n  sinon.stub(instance, 'send').returns(41)\n  sinon.stub(instance, 'responses').returns(responsesMock)\n\n  // act\n  const messages = instance.sendAndObserveResponse('sendAnt', ['params'])\n  // assert\n  messages.subscribe(value => t.is(value.data, 'first'))\n  t.true(instance.send.calledOnceWith('sendAnt', ['params']))\n\n  responsesMock.next({ data: 'first', id })\n  responsesMock.next({ data: 'second', id })\n  responsesMock.next({ data: 'third', id })\n  responsesMock.complete()\n})\n\ntest('should send and observe only the first error', (t) => {\n  t.plan(3)\n\n  // arrange\n  const id = 41\n  const responsesMock = new Subject()\n  const instance = new Messenger(null)\n  sinon.stub(instance, 'send').returns(41)\n  sinon.stub(instance, 'responses').returns(responsesMock)\n  const messages = instance.sendAndObserveResponse('sendAnt', ['params'])\n  // assert\n  messages.subscribe(\n    value => t.fail('should not have emitted any next values'),\n    error => {\n      t.true(error instanceof Error)\n      t.is(error.message, 'bad first')\n    }\n  )\n  t.true(instance.send.calledOnceWith('sendAnt', ['params']))\n\n  // act\n  responsesMock.next({ error: 'bad first', id })\n  responsesMock.next({ data: 'second', id })\n  responsesMock.complete()\n})\n\ntest('should end response stream immediately on first response', (t) => {\n  t.plan(2)\n\n  // arrange\n  const id = 41\n  const responsesMock = new Subject()\n  const instance = new Messenger(null)\n  sinon.stub(instance, 'send').returns(id)\n  sinon.stub(instance, 'responses').returns(responsesMock)\n  const messages = instance.sendAndObserveResponse('sendEth')\n\n  // assert\n  let completed\n  messages.subscribe({\n    next (value) { t.is(value.data, 'thanks') },\n    complete () { completed = true }\n  })\n\n  // act\n  responsesMock.next({ data: 'thanks', id })\n  responsesMock.next({ data: 'thanks again', id })\n  responsesMock.next({ completed: true, id }) // this should complete the messages stream\n  responsesMock.complete()\n\n  t.true(completed)\n})\n\ntest('should send and observe only the first response, defaulting parameters to empty array', (t) => {\n  t.plan(1)\n\n  // arrange\n  const id = 41\n  const instance = new Messenger(null)\n  sinon.stub(instance, 'send').returns(id)\n  sinon.stub(instance, 'responses').returns(of({ data: 'response', id })) // must emit at least once\n  const messages = instance.sendAndObserveResponse('sendAnt')\n\n  // assert\n  messages.subscribe()\n  t.true(instance.send.calledOnceWith('sendAnt', []))\n})\n\ntest('should send and observe only the first response, but delay sending the request after subscribing', (t) => {\n  t.plan(2)\n\n  // arrange\n  const id = 41\n  const instance = new Messenger(null)\n  sinon.stub(instance, 'send').returns(id)\n  sinon.stub(instance, 'responses').returns(of({ data: 'response', id })) // must emit at least once\n\n  // act\n  const messages = instance.sendAndObserveResponse('sendAnt', ['params'])\n  // assert\n  t.true(instance.send.notCalled) // hasn't sent request before subscribing\n  messages.subscribe()\n  t.true(instance.send.calledOnceWith('sendAnt', ['params']))\n})\n"],"file":"index.test.js"}