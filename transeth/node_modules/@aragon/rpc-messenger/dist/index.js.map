{"version":3,"sources":["../src/index.js"],"names":["providers","MessagePortMessage","WindowMessage","DevMessage","Messenger","constructor","provider","bus","messages","requests","pipe","message","jsonrpc","isValidResponse","responses","sendResponse","id","result","payload","encodeResponse","send","method","params","encodeRequest","sendAndObserveResponses","response","completed","error","Error","sendAndObserveResponse"],"mappings":"wrBAQO,KAAMA,CAAAA,SAAS,CAAG,CACvBC,kBAAkB,CAAlBA,2BADuB,CAEvBC,aAAa,CAAbA,sBAFuB,CAGvBC,UAAU,CAAVA,mBAGF;;;;;GANyB,CAAlB,C,4BAYQ,KAAMC,CAAAA,SAAU,CAC7BC,WAAW,CAAEC,QAAQ,CAAG,GAAIL,4BAAjB,CAAuC,CAChD,KAAKK,QAAL,CAAgBA,QACjB,CAED;;;;KAKAC,GAAG,EAAI,CACL,MAAO,MAAKD,QAAL,CAAcE,QAAd,EACR,CAED;;;;KAKAC,QAAQ,EAAI,CACV,MAAO,MAAKF,GAAL,GAAWG,IAAX,CACL,sBAAOC,OAAO,EAAI,CAACC,iBAAQC,eAAR,CAAwBF,OAAxB,CAAnB,CADK,CAGR,CAED;;;;KAKAG,SAAS,EAAI,CACX,MAAO,MAAKP,GAAL,GAAWG,IAAX,CACL,sBAAOE,iBAAQC,eAAf,CADK,CAGR,CAED;;;;;;KAOAE,YAAY,CAAEC,EAAF,CAAMC,MAAN,CAAc,CACxB,KAAMC,CAAAA,OAAO,CAAGN,iBAAQO,cAAR,CAAuBH,EAAvB,CAA2BC,MAA3B,CAAhB,CAGA,MAFA,MAAKX,QAAL,CAAcc,IAAd,CAAmBF,OAAnB,CAEA,CAAOA,OAAO,CAACF,EAChB,CAED;;;;;;KAOAI,IAAI,CAAEC,MAAF,CAAUC,MAAM,CAAG,EAAnB,CAAuB,CACzB,KAAMJ,CAAAA,OAAO,CAAGN,iBAAQW,aAAR,CAAsBF,MAAtB,CAA8BC,MAA9B,CAAhB,CAGA,MAFA,MAAKhB,QAAL,CAAcc,IAAd,CAAmBF,OAAnB,CAEA,CAAOA,OAAO,CAACF,EAChB,CAED;;;;;;;KAQAQ,uBAAuB,CAAEH,MAAF,CAAUC,MAAM,CAAG,EAAnB,CAAuB,CAC5C,MAAO,gBAAM,IAAM,CACjB,KAAMN,CAAAA,EAAE,CAAG,KAAKI,IAAL,CAAUC,MAAV,CAAkBC,MAAlB,CAAX,CAEA,MAAO,MAAKR,SAAL,GAAiBJ,IAAjB,CACL,sBAAQC,OAAD,EAAaA,OAAO,CAACK,EAAR,GAAeA,EAAnC,CADK,CAEL;AACA,yBAAWS,QAAD,EAAc,CAACA,QAAQ,CAACC,SAAlC,CAHK,CAIL,mBAAKD,QAAD,GACEA,QAAQ,CAACE,KADX,GAEAF,QAAQ,CAACE,KAAT,CAAiB,GAAIC,CAAAA,KAAJ,CAAUH,QAAQ,CAACE,KAAnB,CAFjB,EAIKF,QAJL,CAAJ,CAMA;AAVK,CAYR,CAfM,CAgBR,CAED;;;;;;;KAQAI,sBAAsB,CAAER,MAAF,CAAUC,MAAM,CAAG,EAAnB,CAAuB,CAC3C,MAAO,MAAKE,uBAAL,CAA6BH,MAA7B,CAAqCC,MAArC,EAA6CZ,IAA7C,CACL,sBADK,CAEL,mBAAKe,QAAD,EAAc,CAChB;AACA,GAAIA,QAAQ,CAACE,KAAb,CACE,KAAMF,CAAAA,QAAQ,CAACE,KAAf,CAEF,MAAOF,CAAAA,QACR,CAND,CAFK,CAUR,CA9G4B,C","sourcesContent":["import { filter, first, map, takeWhile } from 'rxjs/operators'\nimport { defer } from 'rxjs'\nimport jsonrpc from './jsonrpc'\nimport MessagePortMessage from './providers/MessagePortMessage'\nimport WindowMessage from './providers/WindowMessage'\nimport DevMessage from './providers/DevMessage'\n\nexport { default as signals } from './signals'\nexport const providers = {\n  MessagePortMessage,\n  WindowMessage,\n  DevMessage\n}\n\n/**\n * The RPC messenger used for sending requests and responses between contexts.\n *\n * @param {Provider} [provider=MessagePortMessage] The underlying provider that passes messages\n * @class Messenger\n */\nexport default class Messenger {\n  constructor (provider = new MessagePortMessage()) {\n    this.provider = provider\n  }\n\n  /**\n   * Get the message bus of incoming messages\n   *\n   * @returns {Observable}\n   */\n  bus () {\n    return this.provider.messages()\n  }\n\n  /**\n   * Get requests from the message bus.\n   *\n   * @returns {Observable}\n   */\n  requests () {\n    return this.bus().pipe(\n      filter(message => !jsonrpc.isValidResponse(message))\n    )\n  }\n\n  /**\n   * Get responses from the message bus.\n   *\n   * @returns {Observable}\n   */\n  responses () {\n    return this.bus().pipe(\n      filter(jsonrpc.isValidResponse)\n    )\n  }\n\n  /**\n   * Send a response\n   *\n   * @param {string} id The ID of the request being responded to.\n   * @param {any} result The result of the request.\n   * @returns {string}\n   */\n  sendResponse (id, result) {\n    const payload = jsonrpc.encodeResponse(id, result)\n    this.provider.send(payload)\n\n    return payload.id\n  }\n\n  /**\n   * Send a request\n   *\n   * @param {string} method The method name to call\n   * @param {Array<any>} [params=[]] The parameters to send with the call\n   * @returns {string} The ID of the payload that was sent\n   */\n  send (method, params = []) {\n    const payload = jsonrpc.encodeRequest(method, params)\n    this.provider.send(payload)\n\n    return payload.id\n  }\n\n  /**\n   * Helper method to send a request and listen for multiple responses to that request.\n   * To avoid dropping responses, the request is only sent once a subscriber is attached.\n   *\n   * @param {string} method The method name to call\n   * @param {Array<any>} [params=[]] The parameters to send with the call\n   * @returns {Observable} An observable of responses to the sent request\n   */\n  sendAndObserveResponses (method, params = []) {\n    return defer(() => {\n      const id = this.send(method, params)\n\n      return this.responses().pipe(\n        filter((message) => message.id === id),\n        // End stream once we've been notified that it's complete\n        takeWhile((response) => !response.completed),\n        map((response) => {\n          if (response.error) {\n            response.error = new Error(response.error)\n          }\n          return response\n        })\n        // Let callers handle errors themselves\n      )\n    })\n  }\n\n  /**\n   * Helper method to send a request and listen for a single response to that request\n   * To avoid dropping the response, the request is only sent once a subscriber is attached.\n   *\n   * @param {string} method The method name to call\n   * @param {Array<any>} [params] The parameters to send with the call\n   * @returns {Observable} An observable that resolves to the response\n   */\n  sendAndObserveResponse (method, params = []) {\n    return this.sendAndObserveResponses(method, params).pipe(\n      first(),\n      map((response) => {\n        // Emit an error if the response is an error\n        if (response.error) {\n          throw response.error\n        }\n        return response\n      })\n    )\n  }\n}\n"],"file":"index.js"}