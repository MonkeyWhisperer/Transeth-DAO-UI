{"version":3,"sources":["../../src/providers/MessagePortMessage.js"],"names":["MessagePortMessage","Provider","constructor","target","self","messages$","pipe","event","source","connect","messages","send","payload","postMessage"],"mappings":"qSAIA;;;;;GAMe,KAAMA,CAAAA,kBAAN,QAAiCC,kBAAS,CACvD;;;;;;KADuD,CAQvD;AACAC,WAAW,CAAEC,MAAM,CAAGC,IAAX,CAAiB,CAC1B,OAD0B,CAE1B,KAAKD,MAAL,CAAcA,MAFY,CAG1B,KAAKE,SAAL,CAAiB,oBAAU,KAAKF,MAAf,CAAuB,SAAvB,KAAyCG,IAAzC,CACf;AACA;AACA,sBAAQC,KAAD,EAAW,CAACA,KAAK,CAACC,MAAN,EAAgBD,KAAK,CAACJ,MAAvB,IAAmC,KAAKA,MAA1D,CAHe,CAIf,qBAAM,MAAN,CAJe,CAKf,wBALe,CAHS,CAU1B,KAAKE,SAAL,CAAeI,OAAf,EACD,CAED;;;;KAKAC,QAAQ,EAAI,CACV,MAAO,MAAKL,SACb,CAED;;;;KAKAM,IAAI,CAAEC,OAAF,CAAW,CACb,KAAKT,MAAL,CAAYU,WAAZ,CAAwBD,OAAxB,CACD,CAtCsD,C","sourcesContent":["import Provider from './Provider'\nimport { fromEvent } from 'rxjs'\nimport { filter, pluck, publish } from 'rxjs/operators'\n\n/**\n * A provider that communicates through the [MessageChannel PostMessage API](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage).\n *\n * @class MessagePortMessage\n * @extends {Provider}\n */\nexport default class MessagePortMessage extends Provider {\n  /**\n   * Create a new message provider for use with MessageChannels.\n   *\n   * @param {Object} [target=self] The object (that implements the\n   * [MessageChannel PostMessage API](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage)) to send messages to.\n   * Example: a WebWorker instance.\n   */\n  // eslint-disable-next-line no-undef\n  constructor (target = self) {\n    super()\n    this.target = target\n    this.messages$ = fromEvent(this.target, 'message', false).pipe(\n      // We can't use event.source in WebWorker messages as it seems to be null\n      // However, the fallback to check the target should always be true\n      filter((event) => (event.source || event.target) === this.target),\n      pluck('data'),\n      publish()\n    )\n    this.messages$.connect()\n  }\n\n  /**\n   * An observable of messages being sent to this provider.\n   *\n   * @returns {Observable} An [RxJS observable](http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html)\n   */\n  messages () {\n    return this.messages$\n  }\n\n  /**\n   * Send a payload to the underlying target of this provider.\n   *\n   * @param {Object} payload\n   */\n  send (payload) {\n    this.target.postMessage(payload)\n  }\n}\n"],"file":"MessagePortMessage.js"}