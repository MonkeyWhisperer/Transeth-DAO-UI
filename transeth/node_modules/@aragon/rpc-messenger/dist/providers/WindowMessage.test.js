"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_ava=_interopRequireDefault(require("ava")),_sinon=_interopRequireDefault(require("sinon")),_events=require("events"),_WindowMessage=_interopRequireDefault(require("./WindowMessage")),_Provider=_interopRequireDefault(require("./Provider"));_ava.default.afterEach.always(()=>{global.window=void 0,_sinon.default.restore()}),(0,_ava.default)("should extend Provider",t=>{t.true(_WindowMessage.default.prototype instanceof _Provider.default)}),(0,_ava.default)("should assign window.parent if target is undefined",t=>{global.window={parent:"daddy"// act
};const instance=new _WindowMessage.default;// assert
t.is(instance.target,"daddy")}),(0,_ava.default)("should forward the messages' data emitted from the window object",t=>{global.window=new _events.EventEmitter;const instance=new _WindowMessage.default("decentralization");t.plan(2);// act
const messages=instance.messages();messages.subscribe(value=>t.is(value,"pass")),global.window.emit("message",{data:"pass",source:"decentralization"}),global.window.emit("message",{data:"fail"}),global.window.emit("message",{data:"pass",source:"decentralization"})}),(0,_ava.default)("should send the payload through postMessage",t=>{// arrange
const postMessageMock=_sinon.default.spy(),instance=new _WindowMessage.default({postMessage:postMessageMock});// act
// assert
instance.send("payload-example"),t.is(postMessageMock.getCall(0).args[0],"payload-example"),t.is(postMessageMock.getCall(0).args[1],"*")});
//# sourceMappingURL=WindowMessage.test.js.map