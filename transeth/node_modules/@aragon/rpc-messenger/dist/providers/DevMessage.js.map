{"version":3,"sources":["../../src/providers/DevMessage.js"],"names":["DevMessage","Provider","constructor","id","target","bus","messages","pipe","event","send","payload","next","Object","assign"],"mappings":"+QAEA;;;;;;;;;;;;;;;;;;;;;;;GAwBe,KAAMA,CAAAA,UAAN,QAAyBC,kBAAS,CAC/C;;;;;;KAOAC,WAAW,CAAEC,EAAF,CAAMC,MAAN,CAAcC,GAAd,CAAmB,CAC5B,OAD4B,CAE5B,KAAKF,EAAL,CAAUA,EAFkB,CAG5B,KAAKC,MAAL,CAAcA,MAHc,CAI5B,KAAKC,GAAL,CAAWA,GACZ,CAEDC,QAAQ,EAAI,CACV,MAAO,MAAKD,GAAL,CAASE,IAAT,CACL,sBAAOC,KAAK,EAAIA,KAAK,CAACJ,MAAN,GAAiB,KAAKD,EAAtC,CADK,CAGR,CAEDM,IAAI,CAAEC,OAAF,CAAW,CACb,KAAKL,GAAL,CAASM,IAAT,CACEC,MAAM,CAACC,MAAP,CAAcH,OAAd,CAAuB,CAAEN,MAAM,CAAE,KAAKA,MAAf,CAAvB,CADF,CAGD,CAzB8C,C","sourcesContent":["import Provider from './Provider'\nimport { filter } from 'rxjs/operators'\n/**\n * A development message provider that communicates using an RxJS subject.\n *\n * Example:\n *\n * ```js\n * // Message bus used to pass messages between apps and the wrapper\n * const bus = new Subject()\n *\n * // Set up app\n * const app = new App(\n *   new Messenger(new DevMessage('app', 'wrapper', bus))\n * )\n *\n * // Run app\n * wrapper.runApp(\n *   new DevMessage('wrapper', 'app', bus),\n *   '0xbitconnect'\n * )\n * ```\n *\n * @class DevMessage\n * @extends {Provider}\n */\nexport default class DevMessage extends Provider {\n  /**\n   * Create a new development message provider.\n   *\n   * @param {string} id The ID of this specific entity (e.g. \"wrapper\")\n   * @param {string} target The ID of the target entity to communicate with (e.g. \"app\")\n   * @param {Subject} bus A shared RxJS subject used to communicate between different entities\n   */\n  constructor (id, target, bus) {\n    super()\n    this.id = id\n    this.target = target\n    this.bus = bus\n  }\n\n  messages () {\n    return this.bus.pipe(\n      filter(event => event.target === this.id)\n    )\n  }\n\n  send (payload) {\n    this.bus.next(\n      Object.assign(payload, { target: this.target })\n    )\n  }\n}\n"],"file":"DevMessage.js"}