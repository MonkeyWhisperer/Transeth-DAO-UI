{"version":3,"sources":["../../src/providers/WindowMessage.test.js"],"names":["test","afterEach","always","global","window","sinon","restore","t","true","WindowMessage","prototype","Provider","parent","instance","is","target","EventEmitter","plan","messages","subscribe","value","emit","data","source","postMessageMock","spy","postMessage","send","getCall","args"],"mappings":"gVAOAA,aAAKC,SAAL,CAAeC,MAAf,CAAsB,IAAM,CAC1BC,MAAM,CAACC,MAAP,OAD0B,CAE1BC,eAAMC,OAAN,EACD,CAHD,C,CAKA,iBAAK,wBAAL,CAAgCC,CAAD,EAAO,CACpCA,CAAC,CAACC,IAAF,CAAOC,uBAAcC,SAAd,WAAmCC,kBAA1C,CACD,CAFD,C,CAIA,iBAAK,oDAAL,CAA4DJ,CAAD,EAAO,CAEhEJ,MAAM,CAACC,MAAP,CAAgB,CAAEQ,MAAM,CAAE,OAC1B;AADgB,CAFgD,CAIhE,KAAMC,CAAAA,QAAQ,CAAG,GAAIJ,uBAArB,CACA;AACAF,CAAC,CAACO,EAAF,CAAKD,QAAQ,CAACE,MAAd,CAAsB,OAAtB,CACD,CAPD,C,CASA,iBAAK,kEAAL,CAA2ER,CAAD,EAAO,CAE/EJ,MAAM,CAACC,MAAP,CAAgB,GAAIY,qBAF2D,MAIzEH,CAAAA,QAAQ,CAAG,GAAIJ,uBAAJ,oBAJ8D,CAM/EF,CAAC,CAACU,IAAF,CAAO,CAAP,CAN+E,CAO/E;AACA,KAAMC,CAAAA,QAAQ,CAAGL,QAAQ,CAACK,QAAT,EAAjB,CACAA,QAAQ,CAACC,SAAT,CAAmBC,KAAK,EAAIb,CAAC,CAACO,EAAF,CAAKM,KAAL,CAAY,MAAZ,CAA5B,CAT+E,CAW/EjB,MAAM,CAACC,MAAP,CAAciB,IAAd,CAAmB,SAAnB,CAA8B,CAAEC,IAAI,CAAE,MAAR,CAAgBC,MAAM,mBAAtB,CAA9B,CAX+E,CAY/EpB,MAAM,CAACC,MAAP,CAAciB,IAAd,CAAmB,SAAnB,CAA8B,CAAEC,IAAI,CAAE,MAAR,CAA9B,CAZ+E,CAa/EnB,MAAM,CAACC,MAAP,CAAciB,IAAd,CAAmB,SAAnB,CAA8B,CAAEC,IAAI,CAAE,MAAR,CAAgBC,MAAM,mBAAtB,CAA9B,CACD,CAdD,C,CAgBA,iBAAK,6CAAL,CAAqDhB,CAAD,EAAO,CACzD;AADyD,KAEnDiB,CAAAA,eAAe,CAAGnB,eAAMoB,GAAN,EAFiC,CAGnDZ,QAAQ,CAAG,GAAIJ,uBAAJ,CAAkB,CAAEiB,WAAW,CAAEF,eAAf,CAAlB,CAHwC,CAIzD;AAEA;AADAX,QAAQ,CAACc,IAAT,CAAc,iBAAd,CALyD,CAOzDpB,CAAC,CAACO,EAAF,CAAKU,eAAe,CAACI,OAAhB,CAAwB,CAAxB,EAA2BC,IAA3B,CAAgC,CAAhC,CAAL,CAAyC,iBAAzC,CAPyD,CAQzDtB,CAAC,CAACO,EAAF,CAAKU,eAAe,CAACI,OAAhB,CAAwB,CAAxB,EAA2BC,IAA3B,CAAgC,CAAhC,CAAL,CAAyC,GAAzC,CACD,CATD,C","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport { EventEmitter } from 'events'\n\nimport WindowMessage from './WindowMessage'\nimport Provider from './Provider'\n\ntest.afterEach.always(() => {\n  global.window = undefined\n  sinon.restore()\n})\n\ntest('should extend Provider', (t) => {\n  t.true(WindowMessage.prototype instanceof Provider)\n})\n\ntest('should assign window.parent if target is undefined', (t) => {\n  // arrange\n  global.window = { parent: 'daddy' }\n  // act\n  const instance = new WindowMessage()\n  // assert\n  t.is(instance.target, 'daddy')\n})\n\ntest('should forward the messages\\' data emitted from the window object', (t) => {\n  // arrange\n  global.window = new EventEmitter()\n  const target = 'decentralization'\n  const instance = new WindowMessage(target)\n  // assert\n  t.plan(2)\n  // act\n  const messages = instance.messages()\n  messages.subscribe(value => t.is(value, 'pass'))\n\n  global.window.emit('message', { data: 'pass', source: target })\n  global.window.emit('message', { data: 'fail' })\n  global.window.emit('message', { data: 'pass', source: target })\n})\n\ntest('should send the payload through postMessage', (t) => {\n  // arrange\n  const postMessageMock = sinon.spy()\n  const instance = new WindowMessage({ postMessage: postMessageMock })\n  // act\n  instance.send('payload-example')\n  // assert\n  t.is(postMessageMock.getCall(0).args[0], 'payload-example')\n  t.is(postMessageMock.getCall(0).args[1], '*')\n})\n"],"file":"WindowMessage.test.js"}