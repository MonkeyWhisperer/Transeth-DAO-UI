{"version":3,"sources":["../../src/providers/DevMessage.test.js"],"names":["t","true","DevMessage","prototype","Provider","busMock","Subject","instance","plan","messages","subscribe","value","is","data","next","target","send"],"mappings":"sRAMA,iBAAK,wBAAL,CAAgCA,CAAD,EAAO,CACpCA,CAAC,CAACC,IAAF,CAAOC,oBAAWC,SAAX,WAAgCC,kBAAvC,CACD,CAFD,C,CAIA,iBAAK,4DAAL,CAAoEJ,CAAD,EAAO,CACxE;AADwE,KAElEK,CAAAA,OAAO,CAAG,GAAIC,cAFoD,CAGlEC,QAAQ,CAAG,GAAIL,oBAAJ,CAAe,IAAf,CAAqB,IAArB,CAA2BG,OAA3B,CAHuD,CAKxEL,CAAC,CAACQ,IAAF,CAAO,CAAP,CALwE,CAMxE;AACA,KAAMC,CAAAA,QAAQ,CAAGF,QAAQ,CAACE,QAAT,EAAjB,CACAA,QAAQ,CAACC,SAAT,CAAmBC,KAAK,EAAIX,CAAC,CAACY,EAAF,CAAKD,KAAK,CAACE,IAAX,CAAiB,MAAjB,CAA5B,CARwE,CAUxER,OAAO,CAACS,IAAR,CAAa,CAAED,IAAI,CAAE,MAAR,CAAgBE,MAAM,CAAE,IAAxB,CAAb,CAVwE,CAWxEV,OAAO,CAACS,IAAR,CAAa,CAAED,IAAI,CAAE,MAAR,CAAb,CAXwE,CAYxER,OAAO,CAACS,IAAR,CAAa,CAAED,IAAI,CAAE,MAAR,CAAgBE,MAAM,CAAE,IAAxB,CAAb,CACD,CAbD,C,CAeA,iBAAK,+CAAL,CAAuDf,CAAD,EAAO,CAC3D;AAD2D,KAErDK,CAAAA,OAAO,CAAG,GAAIC,cAFuC,CAGrDC,QAAQ,CAAG,GAAIL,oBAAJ,CAAe,IAAf,CAAqB,QAArB,CAA+BG,OAA/B,CAH0C,CAI3D;AAEA;AADAL,CAAC,CAACQ,IAAF,CAAO,CAAP,CAL2D,CAO3DH,OAAO,CAACK,SAAR,CAAkBC,KAAK,EAAI,CACzB;AACAX,CAAC,CAACY,EAAF,CAAKD,KAAK,CAACE,IAAX,CAAiB,SAAjB,CAFyB,CAGzBb,CAAC,CAACY,EAAF,CAAKD,KAAK,CAACI,MAAX,CAAmB,QAAnB,CACD,CAJD,CAP2D,CAa3DR,QAAQ,CAACS,IAAT,CAAc,CAAEH,IAAI,CAAE,SAAR,CAAd,CACD,CAdD,C","sourcesContent":["import test from 'ava'\nimport { Subject } from 'rxjs'\n\nimport DevMessage from './DevMessage'\nimport Provider from './Provider'\n\ntest('should extend Provider', (t) => {\n  t.true(DevMessage.prototype instanceof Provider)\n})\n\ntest('should filter the incoming messages from the bus by target', (t) => {\n  // arrange\n  const busMock = new Subject()\n  const instance = new DevMessage('id', null, busMock)\n  // assert\n  t.plan(2)\n  // act\n  const messages = instance.messages()\n  messages.subscribe(value => t.is(value.data, 'pass'))\n\n  busMock.next({ data: 'pass', target: 'id' })\n  busMock.next({ data: 'fail' })\n  busMock.next({ data: 'pass', target: 'id' })\n})\n\ntest('should attach the target and send via the bus', (t) => {\n  // arrange\n  const busMock = new Subject()\n  const instance = new DevMessage(null, 'target', busMock)\n  // assert\n  t.plan(2)\n  // act\n  busMock.subscribe(value => {\n    // assert\n    t.is(value.data, 'what-up')\n    t.is(value.target, 'target')\n  })\n\n  instance.send({ data: 'what-up' })\n})\n"],"file":"DevMessage.test.js"}