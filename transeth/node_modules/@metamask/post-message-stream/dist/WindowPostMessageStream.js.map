{"version":3,"file":"WindowPostMessageStream.js","sourceRoot":"","sources":["../src/WindowPostMessageStream.ts"],"names":[],"mappings":";;;AAAA,mEAIiC;AAQjC;;GAEG;AACH,MAAa,uBAAwB,SAAQ,6CAAqB;IAShE;;;;;;;;;OASG;IACH,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAA+B;QACrE,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;SACnC;QACD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC1D,IAAI,CAAC,aAAa,GAAG,YAAY,IAAI,MAAM,CAAC;QAC5C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAiB,EAAE,KAAK,CAAC,CAAC;QAElE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,IAAI,CAAC,aAAa,CAAC,WAAW,CAC5B;YACE,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,IAAI;SACL,EACD,IAAI,CAAC,aAAa,CACnB,CAAC;IACJ,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;QAE3B,mBAAmB;QACnB,IACE,CAAC,IAAI,CAAC,aAAa,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,aAAa,CAAC;YACnE,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,aAAa;YACnC,OAAO,OAAO,KAAK,QAAQ;YAC3B,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK;YAC7B,CAAC,OAAO,CAAC,IAAI,EACb;YACA,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAkB,CAAC,CAAC;IAC3C,CAAC;IAED,QAAQ;QACN,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAiB,EAAE,KAAK,CAAC,CAAC;IACvE,CAAC;CACF;AAlED,0DAkEC","sourcesContent":["import {\n  BasePostMessageStream,\n  PostMessageEvent,\n  StreamData,\n} from './BasePostMessageStream';\n\ninterface WindowPostMessageStreamArgs {\n  name: string;\n  target: string;\n  targetWindow?: Window;\n}\n\n/**\n * Window.postMessage stream.\n */\nexport class WindowPostMessageStream extends BasePostMessageStream {\n  private _name: string;\n\n  private _target: string;\n\n  private _targetOrigin: string;\n\n  private _targetWindow: Window;\n\n  /**\n   * Creates a stream for communicating with other streams across the same or\n   * different window objects.\n   *\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.targetWindow - The window object of the target stream. Defaults\n   * to `window`.\n   */\n  constructor({ name, target, targetWindow }: WindowPostMessageStreamArgs) {\n    if (!name || !target) {\n      throw new Error('Invalid input.');\n    }\n    super();\n\n    this._name = name;\n    this._target = target;\n    this._targetOrigin = targetWindow ? '*' : location.origin;\n    this._targetWindow = targetWindow || window;\n    this._onMessage = this._onMessage.bind(this);\n\n    window.addEventListener('message', this._onMessage as any, false);\n\n    this._handshake();\n  }\n\n  protected _postMessage(data: unknown): void {\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      this._targetOrigin,\n    );\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    const message = event.data;\n\n    // validate message\n    if (\n      (this._targetOrigin !== '*' && event.origin !== this._targetOrigin) ||\n      event.source !== this._targetWindow ||\n      typeof message !== 'object' ||\n      message.target !== this._name ||\n      !message.data\n    ) {\n      return;\n    }\n\n    this._onData(message.data as StreamData);\n  }\n\n  _destroy(): void {\n    window.removeEventListener('message', this._onMessage as any, false);\n  }\n}\n"]}