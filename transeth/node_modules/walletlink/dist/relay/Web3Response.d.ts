import { AddressString, HexString } from '../types';
import { Web3Method } from './Web3Method';
interface BaseWeb3Response<Result> {
    method: Web3Method;
    errorMessage?: string | null;
    result?: Result;
}
export interface ErrorResponse extends BaseWeb3Response<void> {
    errorMessage: string;
}
export declare function ErrorResponse(method: Web3Method, errorMessage: string): ErrorResponse;
export declare type RequestEthereumAccountsResponse = BaseWeb3Response<AddressString[]>;
export declare type AddEthereumChainResponse = BaseWeb3Response<null>;
export declare type SwitchEthereumChainResponse = BaseWeb3Response<boolean>;
export declare function SwitchEthereumChainResponse(isApproved: boolean): SwitchEthereumChainResponse;
export declare function RequestEthereumAccountsResponse(addresses: AddressString[]): RequestEthereumAccountsResponse;
export declare function isRequestEthereumAccountsResponse(res: any): res is RequestEthereumAccountsResponse;
export declare type SignEthereumMessageResponse = BaseWeb3Response<HexString>;
export declare type SignEthereumTransactionResponse = BaseWeb3Response<HexString>;
export declare type SubmitEthereumTransactionResponse = BaseWeb3Response<HexString>;
export declare type EthereumAddressFromSignedMessageResponse = BaseWeb3Response<AddressString>;
export declare type ScanQRCodeResponse = BaseWeb3Response<string>;
export declare type ChildRequestEthereumAccountsResponse = BaseWeb3Response<string>;
export declare function ChildRequestEthereumAccountsResponse(result: string): ChildRequestEthereumAccountsResponse;
export declare type ArbitraryResponse = BaseWeb3Response<string>;
export declare type Web3Response = ErrorResponse | RequestEthereumAccountsResponse | SignEthereumMessageResponse | SignEthereumTransactionResponse | SubmitEthereumTransactionResponse | EthereumAddressFromSignedMessageResponse | ScanQRCodeResponse | ArbitraryResponse | ChildRequestEthereumAccountsResponse | AddEthereumChainResponse | SwitchEthereumChainResponse;
export {};
