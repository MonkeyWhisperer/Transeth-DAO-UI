/// <reference types="node" />
import { ScopedLocalStorage } from "../lib/ScopedLocalStorage";
import { AddressString, IntNumber, RegExpString } from "../types";
import { Web3Request } from './Web3Request';
import { AddEthereumChainResponse, ArbitraryResponse, ChildRequestEthereumAccountsResponse, EthereumAddressFromSignedMessageResponse, RequestEthereumAccountsResponse, ScanQRCodeResponse, SignEthereumMessageResponse, SignEthereumTransactionResponse, SubmitEthereumTransactionResponse, SwitchEthereumChainResponse, Web3Response } from './Web3Response';
import { WalletLinkUI, WalletLinkUIOptions } from "../provider/WalletLinkUI";
import { WalletLinkRelayEventManager } from "./WalletLinkRelayEventManager";
import { WalletLinkRelayAbstract } from "./WalletLinkRelayAbstract";
import { EthereumTransactionParams } from "./EthereumTransactionParams";
export interface WalletLinkRelayOptions {
    walletLinkUrl: string;
    version: string;
    darkMode: boolean;
    storage: ScopedLocalStorage;
    relayEventManager: WalletLinkRelayEventManager;
    walletLinkUIConstructor: (options: Readonly<WalletLinkUIOptions>) => WalletLinkUI;
}
export declare class WalletLinkRelay implements WalletLinkRelayAbstract {
    private static accountRequestCallbackIds;
    private readonly walletLinkUrl;
    private readonly storage;
    private readonly session;
    private readonly relayEventManager;
    private readonly connection;
    private accountsCallback;
    private chainIdCallback;
    private jsonRpcUrlCallback;
    private ui;
    private appName;
    private appLogoUrl;
    constructor(options: Readonly<WalletLinkRelayOptions>);
    attachUI(): void;
    resetAndReload(): void;
    setAppInfo(appName: string, appLogoUrl: string | null): void;
    getStorageItem(key: string): string | null;
    setStorageItem(key: string, value: string): void;
    childRequestEthereumAccounts(childSessionId: string, childSessionSecret: string, dappName: string, dappLogoURL: string, dappURL: string): Promise<ChildRequestEthereumAccountsResponse>;
    requestEthereumAccounts(): Promise<RequestEthereumAccountsResponse>;
    signEthereumMessage(message: Buffer, address: AddressString, addPrefix: boolean, typedDataJson?: string | null): Promise<SignEthereumMessageResponse>;
    ethereumAddressFromSignedMessage(message: Buffer, signature: Buffer, addPrefix: boolean): Promise<EthereumAddressFromSignedMessageResponse>;
    signEthereumTransaction(params: EthereumTransactionParams): Promise<SignEthereumTransactionResponse>;
    signAndSubmitEthereumTransaction(params: EthereumTransactionParams): Promise<SubmitEthereumTransactionResponse>;
    submitEthereumTransaction(signedTransaction: Buffer, chainId: IntNumber): Promise<SubmitEthereumTransactionResponse>;
    scanQRCode(regExp: RegExpString): Promise<ScanQRCodeResponse>;
    arbitraryRequest(data: string): Promise<ArbitraryResponse>;
    addEthereumChain(chainId: string, blockExplorerUrls?: string[], chainName?: string, iconUrls?: string[], nativeCurrency?: {
        name: string;
        symbol: string;
        decimals: number;
    }): Promise<AddEthereumChainResponse>;
    /**
     *
     * @param request a request to connect the child session using a parent session's connection
     *
     * A note on why we're not using the sendRequest method.  The sendRequest function doesn't have
     * any way to tell when a message has been sent - it either times out after 60 seconds, or
     * waits until it gets a response from the mobile client.  In the case of sending a child request,
     * we don't wait for a response from the mobile client, we continue as soon as we know the server
     * has received the message.  Hence why we have a separate method here.
     */
    private sendChildRequest;
    sendRequest<T extends Web3Request, U extends Web3Response>(request: T): Promise<U>;
    setConnectDisabled(disabled: boolean): void;
    setAccountsCallback(accountsCallback: (accounts: [string]) => void): void;
    setChainIdCallback(chainIdCallback: (chainId: string) => void): void;
    setJsonRpcUrlCallback(jsonRpcUrlCallback: (jsonRpcUrl: string) => void): void;
    private publishWeb3RequestEvent;
    private publishWeb3RequestCanceledEvent;
    private publishEvent;
    private handleIncomingEvent;
    private handleWeb3ResponseMessage;
    private invokeCallback;
    switchEthereumChain(chainId: string): Promise<SwitchEthereumChainResponse>;
}
