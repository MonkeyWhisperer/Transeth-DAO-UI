{"version":3,"sources":["../src/index.ts"],"names":["chainIdToNetwork","FortmaticConnector","apiKey","chainId","Object","keys","includes","toString","invariant","supportedChainIds","activate","fortmatic","getProvider","enable","then","accounts","account","provider","m","Fortmatic","undefined","getChainId","getAccount","send","deactivate","close","user","logout","emitDeactivate","AbstractConnector"],"mappings":"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","file":"fortmatic-connector.esm.ba0f8036.js","sourceRoot":"../src","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"]}