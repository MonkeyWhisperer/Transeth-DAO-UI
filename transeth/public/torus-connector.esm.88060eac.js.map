{"version":3,"sources":["../src/index.ts"],"names":["TorusConnector","chainId","initOptions","constructorOptions","loginOptions","supportedChainIds","activate","torus","login","then","accounts","account","provider","m","Torus","init","getProvider","getChainId","getAccount","ethereum","send","deactivate","close","cleanUp","emitDeactivate","AbstractConnector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAUaA,cAAb,GAAA,aAAA,UAAA,kBAAA,EAAA;AAAA,EAAA,cAAA,CAAA,cAAA,EAAA,kBAAA,CAAA;;AAQE,WAAA,cAAA,CAAA,IAAA,EAAA;;;QAAcC,OAAAA,GAAAA,IAAAA,CAAAA;gCAASC;QAAAA,WAAAA,GAAAA,gBAAAA,KAAAA,KAAAA,CAAAA,GAAc,EAAdA,GAAc;qCAAIC;QAAAA,kBAAAA,GAAAA,qBAAAA,KAAAA,KAAAA,CAAAA,GAAqB,EAArBA,GAAqB;iCAAIC;QAAAA,YAAAA,GAAAA,iBAAAA,KAAAA,KAAAA,CAAAA,GAAe,EAAfA,GAAe;AAC/E,IAAA,KAAA,GAAA,kBAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AAAEC,MAAAA,iBAAiB,EAAE,CAACJ,OAAD;AAArB,KAAN,KAAA,IAAA;AAEA,IAAA,KAAA,CAAKA,OAAL,GAAeA,OAAf;AACA,IAAA,KAAA,CAAKC,WAAL,GAAmBA,WAAnB;AACA,IAAA,KAAA,CAAKC,kBAAL,GAA0BA,kBAA1B;AACA,IAAA,KAAA,CAAKC,YAAL,GAAoBA,YAApB;;AACD;;AAfH,MAAA,MAAA,GAAA,cAAA,CAAA,SAAA;;AAAA,EAAA,MAAA,CAiBeE,QAjBf,GAAA,SAAA,QAAA,GAAA;AAAA,QAAA;mBAkBS;;;+BAMiB,MAAA,CAAKC,KAAL,CAAWC,KAAX,CAAiB,MAAA,CAAKJ,YAAtB,EAAoCK,IAApC,CAAyC,UAACC,QAAD,EAAA;AAAA,iBAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAzC,SAAA,GAAA,KAAA,UAAhBC,OAAgB,EAAhBA;AAEN,iBAAO;AAAEC,YAAAA,QAAQ,EAAE,MAAA,CAAKL,KAAL,CAAWK,QAAvB;AAAiCD,YAAAA,OAAO,EAAPA;AAAjC,WAAP;;;;;YARI,CAAC,MAAA,CAAKJ,OAAAA;iCACY,0CAAO,wBAAP,GAAiCE,IAAjC,CAAsC,UAAAI,CAAA,EAAC;AAAA,gBAAA,UAAA;;AAAA,mBAAA,CAAA,UAAA,GAAIA,CAAJ,IAAA,IAAIA,GAAJ,KAAA,CAAIA,GAAAA,CAAC,CAAA,SAAA,CAAL,KAAA,IAAA,GAAA,UAAA,GAAkBA,CAAlB;AAAvC,WAAA,GAAA,KAAA,UAAdC,KAAc,EAAdA;AACN,YAAA,MAAA,CAAKP,KAAL,GAAa,IAAIO,KAAJ,CAAU,MAAA,CAAKX,kBAAf,CAAb;mCACM,MAAA,CAAKI,KAAL,CAAWQ,IAAX,CAAgB,MAAA,CAAKb,WAArB,GAAA,KAAA,YAAA,CAAA;;;;;;AArBZ,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,EAAA,MAAA,CA6Bec,WA7Bf,GAAA,SAAA,WAAA,GAAA;AAAA,QAAA;mBA8BW;;AAAP,aAAA,OAAA,CAAA,OAAA,CAAO,MAAA,CAAKT,KAAL,CAAWK,QAAlB,CAAA;AA9BJ,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,EAAA,MAAA,CAiCeK,UAjCf,GAAA,SAAA,UAAA,GAAA;AAAA,QAAA;mBAkCW;;AAAP,aAAA,OAAA,CAAA,OAAA,CAAO,MAAA,CAAKhB,OAAZ,CAAA;AAlCJ,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,EAAA,MAAA,CAqCeiB,UArCf,GAAA,SAAA,UAAA,GAAA;AAAA,QAAA;mBAsCW;;AAAP,aAAA,OAAA,CAAA,OAAA,CAAO,MAAA,CAAKX,KAAL,CAAWY,QAAX,CAAoBC,IAApB,CAAyB,cAAzB,EAAyCX,IAAzC,CAA8C,UAACC,QAAD,EAAA;AAAA,eAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAA9C,OAAA,CAAP,CAAA;AAtCJ,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,EAAA,MAAA,CAyCeW,UAzCf,GAAA,SAAA,UAAA,GAAA;;AAAA,GAAA;;AAAA,EAAA,MAAA,CA2CeC,KA3Cf,GAAA,SAAA,KAAA,GAAA;AAAA,QAAA;oBA4CU;;6BAAA,OAAA,CAAKf,KAAL,CAAWgB,OAAX,IAAA,KAAA,YAAA;AACN,QAAA,OAAA,CAAKC,cAAL;;AA7CJ,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,SAAA,cAAA;AAAA,CAAA,CAAoCC,oCAApC","file":"torus-connector.esm.88060eac.js","sourceRoot":"../src","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\ninterface TorusConnectorArguments {\n  chainId: number\n  initOptions?: any\n  constructorOptions?: any\n  loginOptions?: any\n}\n\nexport class TorusConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly initOptions: any\n  private readonly constructorOptions: any\n  private readonly loginOptions: any\n\n  public torus: any\n\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.initOptions = initOptions\n    this.constructorOptions = constructorOptions\n    this.loginOptions = loginOptions\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.torus) {\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\n      this.torus = new Torus(this.constructorOptions)\n      await this.torus.init(this.initOptions)\n    }\n\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.torus.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.torus.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.torus.ethereum.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public async deactivate() {}\n\n  public async close() {\n    await this.torus.cleanUp()\n    this.emitDeactivate()\n  }\n}\n"]}