{"version":3,"file":"ObservableStore.js","sourceRoot":"","sources":["../src/ObservableStore.ts"],"names":[],"mappings":";;;;;;AAAA,sFAA4D;AAE5D,MAAa,eAAmB,SAAQ,4BAAgB;IAGtD,YAAY,SAAY;QACtB,KAAK,EAAE,CAAC;QACR,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;SACzB;aAAM;YACL,qDAAqD;YACrD,IAAI,CAAC,MAAM,GAAG,EAAkB,CAAC;SAClC;IACH,CAAC;IAED,mCAAmC;IACnC,QAAQ;QACN,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;IAED,mCAAmC;IACnC,QAAQ,CAAC,QAAW;QAClB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED,WAAW,CAAC,YAAwB;QAClC,4BAA4B;QAC5B,IAAI,YAAY,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;YACpD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC9B,IAAI,CAAC,QAAQ,iCAAM,KAAK,GAAK,YAAY,EAAG,CAAC;YAC7C,+BAA+B;SAChC;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;SAC7B;IACH,CAAC;IAED,uBAAuB;IACvB,SAAS,CAAC,OAA2B;QACnC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC7B,CAAC;IAED,yBAAyB;IACzB,WAAW,CAAC,OAA2B;QACrC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IAED,EAAE;IACF,UAAU;IACV,EAAE;IAEF,wBAAwB;IACd,SAAS;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,uBAAuB;IACb,SAAS,CAAC,QAAW;QAC7B,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,CAAC;CACF;AA1DD,0CA0DC","sourcesContent":["import SafeEventEmitter from '@metamask/safe-event-emitter';\n\nexport class ObservableStore<T> extends SafeEventEmitter {\n  private _state: T;\n\n  constructor(initState: T) {\n    super();\n    if (initState) {\n      this._state = initState;\n    } else {\n      // Typecast/default state: Preserve existing behavior\n      this._state = {} as unknown as T;\n    }\n  }\n\n  // wrapper around internal getState\n  getState(): T {\n    return this._getState();\n  }\n\n  // wrapper around internal putState\n  putState(newState: T): void {\n    this._putState(newState);\n    this.emit('update', newState);\n  }\n\n  updateState(partialState: Partial<T>): void {\n    // if non-null object, merge\n    if (partialState && typeof partialState === 'object') {\n      const state = this.getState();\n      this.putState({ ...state, ...partialState });\n      // if not object, use new value\n    } else {\n      this.putState(partialState);\n    }\n  }\n\n  // subscribe to changes\n  subscribe(handler: (state: T) => void): void {\n    this.on('update', handler);\n  }\n\n  // unsubscribe to changes\n  unsubscribe(handler: (state: T) => void): void {\n    this.removeListener('update', handler);\n  }\n\n  //\n  // private\n  //\n\n  // read from persistence\n  protected _getState(): T {\n    return this._state;\n  }\n\n  // write to persistence\n  protected _putState(newState: T): void {\n    this._state = newState;\n  }\n}\n"]}