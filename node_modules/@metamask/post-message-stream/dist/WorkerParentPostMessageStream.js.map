{"version":3,"file":"WorkerParentPostMessageStream.js","sourceRoot":"","sources":["../src/WorkerParentPostMessageStream.ts"],"names":[],"mappings":";;;AAAA,mEAIiC;AACjC,mCAAgD;AAMhD;;GAEG;AACH,MAAa,6BAA8B,SAAQ,6CAAqB;IAKtE;;;;;OAKG;IACH,YAAY,EAAE,MAAM,EAA0B;QAC5C,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;SACnC;QACD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,OAAO,GAAG,6BAAqB,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAQ,CAAC;QAE3D,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAES,YAAY,CAAC,IAAa;QAClC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;YACvB,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,IAAI;SACL,CAAC,CAAC;IACL,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;QAE3B,mBAAmB;QACnB,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YAChD,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAkB,CAAC,CAAC;IAC3C,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,IAAW,CAAC;IAC7B,CAAC;CACF;AA9CD,sEA8CC","sourcesContent":["import {\n  BasePostMessageStream,\n  PostMessageEvent,\n  StreamData,\n} from './BasePostMessageStream';\nimport { DEDICATED_WORKER_NAME } from './enums';\n\ninterface WorkerParentStreamArgs {\n  worker: Worker;\n}\n\n/**\n * Parent-side dedicated web worker `postMessage` stream.\n */\nexport class WorkerParentPostMessageStream extends BasePostMessageStream {\n  private _target: string;\n\n  private _worker: Worker;\n\n  /**\n   * Creates a stream for communicating with a dedicated web worker.\n   *\n   * @param args.worker - The Web Worker to exchange messages with. The worker\n   * must instantiate a WorkerPostMessageStream.\n   */\n  constructor({ worker }: WorkerParentStreamArgs) {\n    if (!worker) {\n      throw new Error('Invalid input.');\n    }\n    super();\n\n    this._target = DEDICATED_WORKER_NAME;\n    this._worker = worker;\n    this._worker.onmessage = this._onMessage.bind(this) as any;\n\n    this._handshake();\n  }\n\n  protected _postMessage(data: unknown): void {\n    this._worker.postMessage({\n      target: this._target,\n      data,\n    });\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    const message = event.data;\n\n    // validate message\n    if (typeof message !== 'object' || !message.data) {\n      return;\n    }\n\n    this._onData(message.data as StreamData);\n  }\n\n  _destroy(): void {\n    this._worker.onmessage = null;\n    this._worker = null as any;\n  }\n}\n"]}