{"version":3,"file":"WorkerPostMessageStream.js","sourceRoot":"","sources":["../src/WorkerPostMessageStream.ts"],"names":[],"mappings":";;;AAAA,0BAA0B;AAC1B,+EAA+E;AAC/E,0CAA0C;AAC1C,mEAIiC;AACjC,mCAAgD;AAEhD;;GAEG;AACH,MAAa,uBAAwB,SAAQ,6CAAqB;IAGhE;;;;;OAKG;IACH;QACE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,KAAK,GAAG,6BAAqB,CAAC;QACnC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAQ,CAAC;QAEnD,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAES,YAAY,CAAC,IAAgB;QACrC,mDAAmD;QAClD,IAAI,CAAC,WAAsC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IACzD,CAAC;IAEO,UAAU,CAAC,KAAuB;QACxC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;QAE3B,mBAAmB;QACnB,IACE,OAAO,OAAO,KAAK,QAAQ;YAC3B,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK;YAC7B,CAAC,OAAO,CAAC,IAAI,EACb;YACA,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAkB,CAAC,CAAC;IAC3C,CAAC;IAED,sEAAsE;IACtE,QAAQ;QACN,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA1CD,0DA0CC","sourcesContent":["/* istanbul ignore file */\n// We ignore coverage for the entire file due to limits on our instrumentation,\n// but it is in fact covered by our tests.\nimport {\n  BasePostMessageStream,\n  PostMessageEvent,\n  StreamData,\n} from './BasePostMessageStream';\nimport { DEDICATED_WORKER_NAME } from './enums';\n\n/**\n * Worker-side dedicated web worker `postMessage` stream.\n */\nexport class WorkerPostMessageStream extends BasePostMessageStream {\n  private _name: string;\n\n  /**\n   * Note: Designed for use in web workers only.\n   *\n   * Creates a stream for communicating with the window that created this web\n   * worker.\n   */\n  constructor() {\n    super();\n\n    this._name = DEDICATED_WORKER_NAME;\n    self.onmessage = this._onMessage.bind(this) as any;\n\n    this._handshake();\n  }\n\n  protected _postMessage(data: StreamData): void {\n    // Cast of self.postMessage due to usage of DOM lib\n    (self.postMessage as (message: any) => void)({ data });\n  }\n\n  private _onMessage(event: PostMessageEvent): void {\n    const message = event.data;\n\n    // validate message\n    if (\n      typeof message !== 'object' ||\n      message.target !== this._name ||\n      !message.data\n    ) {\n      return;\n    }\n\n    this._onData(message.data as StreamData);\n  }\n\n  // worker stream lifecycle assumed to be coterminous with global scope\n  _destroy(): void {\n    return undefined;\n  }\n}\n"]}