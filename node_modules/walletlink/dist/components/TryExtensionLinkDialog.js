"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TryExtensionLinkDialog = void 0;
const clsx_1 = __importDefault(require("clsx"));
const TryExtensionLinkDialog_css_1 = __importDefault(require("./TryExtensionLinkDialog-css"));
const link_icon_svg_1 = __importDefault(require("./icons/link-icon-svg"));
const globe_icon_svg_1 = __importDefault(require("./icons/globe-icon-svg"));
const lock_icon_svg_1 = __importDefault(require("./icons/lock-icon-svg"));
const QRLogo_1 = __importDefault(require("./icons/QRLogo"));
const preact_1 = require("preact");
const hooks_1 = require("preact/hooks");
const QRCode_1 = require("./QRCode");
const Spinner_1 = require("./Spinner");
const TryExtensionLinkDialog = props => {
    const [isContainerHidden, setContainerHidden] = hooks_1.useState(!props.isOpen);
    const [isDialogHidden, setDialogHidden] = hooks_1.useState(!props.isOpen);
    hooks_1.useEffect(() => {
        const { isOpen } = props;
        const timers = [
            window.setTimeout(() => {
                setDialogHidden(!isOpen);
            }, 10)
        ];
        if (isOpen) {
            setContainerHidden(false);
        }
        else {
            timers.push(window.setTimeout(() => {
                setContainerHidden(true);
            }, 360));
        }
        return () => {
            timers.forEach(window.clearTimeout);
        };
    }, [props.isOpen]);
    return (preact_1.h("div", { class: clsx_1.default("-walletlink-extension-dialog-container", isContainerHidden && "-walletlink-extension-dialog-container-hidden") },
        preact_1.h("style", null, TryExtensionLinkDialog_css_1.default),
        preact_1.h("div", { class: clsx_1.default("-walletlink-extension-dialog-backdrop", isDialogHidden && "-walletlink-extension-dialog-backdrop-hidden") }),
        preact_1.h("div", { class: "-walletlink-extension-dialog" },
            preact_1.h("div", { class: clsx_1.default("-walletlink-extension-dialog-box", isDialogHidden && "-walletlink-extension-dialog-box-hidden") },
                preact_1.h(TryExtensionBox, { onInstallClick: () => {
                        window.open("https://api.wallet.coinbase.com/rpc/v2/desktop/chrome", "_blank");
                    } }),
                !props.connectDisabled ? preact_1.h(ScanQRBox, { darkMode: props.darkMode, version: props.version, sessionId: props.sessionId, sessionSecret: props.sessionSecret, walletLinkUrl: props.walletLinkUrl, isConnected: props.isConnected, isParentConnection: props.isParentConnection }) : null,
                props.onCancel && preact_1.h(CancelButton, { onClick: props.onCancel })))));
};
exports.TryExtensionLinkDialog = TryExtensionLinkDialog;
const TryExtensionBox = props => {
    return (preact_1.h("div", { class: "-walletlink-extension-dialog-box-top" },
        preact_1.h("div", { class: "-walletlink-extension-dialog-box-top-install-region" },
            preact_1.h("h2", null, "Try Coinbase Wallet extension"),
            preact_1.h("button", { onClick: props.onInstallClick }, "Install")),
        preact_1.h("div", { class: "-walletlink-extension-dialog-box-top-info-region" },
            preact_1.h(DescriptionItem, { icon: link_icon_svg_1.default, text: "Connect to crypto apps with one click" }),
            preact_1.h(DescriptionItem, { icon: lock_icon_svg_1.default, text: "Private keys remain secure on mobile app" }),
            preact_1.h(DescriptionItem, { icon: globe_icon_svg_1.default, text: "Compatible with all crypto apps" }))));
};
const ScanQRBox = props => {
    const serverUrl = window.encodeURIComponent(props.walletLinkUrl);
    const sessionIdKey = props.isParentConnection ? "parent-id" : "id";
    const qrUrl = `${props.walletLinkUrl}/#/link?${sessionIdKey}=${props.sessionId}&secret=${props.sessionSecret}&server=${serverUrl}&v=1`;
    return (preact_1.h("div", { class: "-walletlink-extension-dialog-box-bottom" },
        preact_1.h("div", { class: "-walletlink-extension-dialog-box-bottom-description-region" },
            preact_1.h("h2", null, "Or scan to connect"),
            preact_1.h("body", { class: "-walletlink-extension-dialog-box-bottom-description" },
                "Open ",
                preact_1.h("a", { href: "https://wallet.coinbase.com/" }, "Coinbase Wallet"),
                " on your mobile phone and scan")),
        preact_1.h("div", { class: "-walletlink-extension-dialog-box-bottom-qr-region" },
            preact_1.h("div", { class: "-walletlink-extension-dialog-box-bottom-qr-wrapper" },
                preact_1.h(QRCode_1.QRCode, { content: qrUrl, width: 150, height: 150, fgColor: "#000", bgColor: "transparent", image: {
                        svg: QRLogo_1.default,
                        width: 34,
                        height: 34
                    } })),
            preact_1.h("input", { type: "hidden", value: qrUrl }),
            !props.isConnected && (preact_1.h("div", { class: "-walletlink-extension-dialog-box-bottom-qr-connecting" },
                preact_1.h(Spinner_1.Spinner, { size: 36, color: "#000" }),
                preact_1.h("p", null, "Connecting..."))))));
};
const DescriptionItem = props => {
    return (preact_1.h("div", { class: "-walletlink-extension-dialog-box-top-description" },
        preact_1.h("div", { class: "-walletlink-extension-dialog-box-top-description-icon-wrapper" },
            preact_1.h("img", { src: props.icon })),
        preact_1.h("body", { class: "-walletlink-extension-dialog-box-top-description-text" }, props.text)));
};
const CancelButton = props => (preact_1.h("button", { class: "-walletlink-extension-dialog-box-cancel", onClick: props.onClick },
    preact_1.h("div", { class: "-walletlink-extension-dialog-box-cancel-x" })));
