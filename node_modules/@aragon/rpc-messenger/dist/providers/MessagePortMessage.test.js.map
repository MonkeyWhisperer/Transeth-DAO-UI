{"version":3,"sources":["../../src/providers/MessagePortMessage.test.js"],"names":["test","afterEach","always","global","self","sinon","restore","t","true","MessagePortMessage","prototype","Provider","spy","instance","is","target","EventEmitter","plan","messages","subscribe","value","emit","data","source","postMessageMock","postMessage","send","getCall","args"],"mappings":"0VAOAA,aAAKC,SAAL,CAAeC,MAAf,CAAsB,IAAM,CAC1BC,MAAM,CAACC,IAAP,OAD0B,CAE1BC,eAAMC,OAAN,EACD,CAHD,C,CAKA,iBAAK,wBAAL,CAAgCC,CAAD,EAAO,CACpCA,CAAC,CAACC,IAAF,CAAOC,4BAAmBC,SAAnB,WAAwCC,kBAA/C,CACD,CAFD,C,CAIA,iBAAK,2CAAL,CAAmDJ,CAAD,EAAO,CAEvDJ,MAAM,CAACC,IAAP,CAAcC,eAAMO,GAAN,EAFyC,CAGvD;AACA,KAAMC,CAAAA,QAAQ,CAAG,GAAIJ,4BAArB,CACA;AACAF,CAAC,CAACO,EAAF,CAAKD,QAAQ,CAACE,MAAd,CAAsBZ,MAAM,CAACC,IAA7B,CACD,CAPD,C,CASA,iBAAK,iEAAL,CAA0EG,CAAD,EAAO,CAC9E;AAD8E,KAExEQ,CAAAA,MAAM,CAAG,GAAIC,qBAF2D,CAGxEH,QAAQ,CAAG,GAAIJ,4BAAJ,CAAuBM,MAAvB,CAH6D,CAK9ER,CAAC,CAACU,IAAF,CAAO,CAAP,CAL8E,CAM9E;AACA,KAAMC,CAAAA,QAAQ,CAAGL,QAAQ,CAACK,QAAT,EAAjB,CACAA,QAAQ,CAACC,SAAT,CAAmBC,KAAK,EAAIb,CAAC,CAACO,EAAF,CAAKM,KAAL,CAAY,MAAZ,CAA5B,CAR8E,CAU9EL,MAAM,CAACM,IAAP,CAAY,SAAZ,CAAuB,CAAEC,IAAI,CAAE,MAAR,CAAgBC,MAAM,CAAER,MAAxB,CAAvB,CAV8E,CAW9EA,MAAM,CAACM,IAAP,CAAY,SAAZ,CAAuB,CAAEC,IAAI,CAAE,MAAR,CAAvB,CAX8E,CAY9EP,MAAM,CAACM,IAAP,CAAY,SAAZ,CAAuB,CAAEC,IAAI,CAAE,MAAR,CAAgBC,MAAM,CAAER,MAAxB,CAAvB,CACD,CAbD,C,CAeA,iBAAK,6CAAL,CAAqDR,CAAD,EAAO,CACzD;AADyD,KAEnDiB,CAAAA,eAAe,CAAGnB,eAAMO,GAAN,EAFiC,CAGnDC,QAAQ,CAAG,GAAIJ,4BAAJ,CAAuB,CAAEgB,WAAW,CAAED,eAAf,CAAvB,CAHwC,CAIzD;AAEA;AADAX,QAAQ,CAACa,IAAT,CAAc,iBAAd,CALyD,CAOzDnB,CAAC,CAACO,EAAF,CAAKU,eAAe,CAACG,OAAhB,CAAwB,CAAxB,EAA2BC,IAA3B,CAAgC,CAAhC,CAAL,CAAyC,iBAAzC,CACD,CARD,C","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport { EventEmitter } from 'events'\n\nimport MessagePortMessage from './MessagePortMessage'\nimport Provider from './Provider'\n\ntest.afterEach.always(() => {\n  global.self = undefined\n  sinon.restore()\n})\n\ntest('should extend Provider', (t) => {\n  t.true(MessagePortMessage.prototype instanceof Provider)\n})\n\ntest('should assign self if target is undefined', (t) => {\n  // arrange\n  global.self = sinon.spy()\n  // act\n  const instance = new MessagePortMessage()\n  // assert\n  t.is(instance.target, global.self)\n})\n\ntest('should forward the messages\\' data emitted from the given target', (t) => {\n  // arrange\n  const target = new EventEmitter()\n  const instance = new MessagePortMessage(target)\n  // assert\n  t.plan(2)\n  // act\n  const messages = instance.messages()\n  messages.subscribe(value => t.is(value, 'pass'))\n\n  target.emit('message', { data: 'pass', source: target })\n  target.emit('message', { data: 'fail' })\n  target.emit('message', { data: 'pass', source: target })\n})\n\ntest('should send the payload through postMessage', (t) => {\n  // arrange\n  const postMessageMock = sinon.spy()\n  const instance = new MessagePortMessage({ postMessage: postMessageMock })\n  // act\n  instance.send('payload-example')\n  // assert\n  t.is(postMessageMock.getCall(0).args[0], 'payload-example')\n})\n"],"file":"MessagePortMessage.test.js"}