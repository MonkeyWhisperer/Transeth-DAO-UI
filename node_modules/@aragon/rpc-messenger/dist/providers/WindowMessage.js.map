{"version":3,"sources":["../../src/providers/WindowMessage.js"],"names":["WindowMessage","Provider","constructor","target","window","parent","messages$","pipe","event","source","connect","messages","send","payload","postMessage"],"mappings":"qSAIA;;;;;GAMe,KAAMA,CAAAA,aAAN,QAA4BC,kBAAS,CAClD;;;;KAKAC,WAAW,CAAEC,MAAM,CAAGC,MAAM,CAACC,MAAlB,CAA0B,CACnC,OADmC,CAEnC,KAAKF,MAAL,CAAcA,MAFqB,CAGnC,KAAKG,SAAL,CAAiB,oBAAUF,MAAV,CAAkB,SAAlB,KAAoCG,IAApC,CACf,sBAAQC,KAAD,EAAWA,KAAK,CAACC,MAAN,GAAiB,KAAKN,MAAxC,CADe,CAEf,qBAAM,MAAN,CAFe,CAGf,wBAHe,CAHkB,CAQnC,KAAKG,SAAL,CAAeI,OAAf,EACD,CAED;;;;KAKAC,QAAQ,EAAI,CACV,MAAO,MAAKL,SACb,CAED;;;;KAKAM,IAAI,CAAEC,OAAF,CAAW,CACb,KAAKV,MAAL,CAAYW,WAAZ,CAAwBD,OAAxB,CAAiC,GAAjC,CACD,CAjCiD,C","sourcesContent":["import Provider from './Provider'\nimport { fromEvent } from 'rxjs'\nimport { filter, pluck, publish } from 'rxjs/operators'\n\n/**\n * A provider that uses the Window postMessage API to pass messages between windows (e.g. iframes).\n *\n * @class WindowMessage\n * @extends {Provider}\n */\nexport default class WindowMessage extends Provider {\n  /**\n   * Create a new message provider for use with windows.\n   *\n   * @param {Object} [target=window.parent] An window implementing the postMessage API.\n   */\n  constructor (target = window.parent) {\n    super()\n    this.target = target\n    this.messages$ = fromEvent(window, 'message', false).pipe(\n      filter((event) => event.source === this.target),\n      pluck('data'),\n      publish()\n    )\n    this.messages$.connect()\n  }\n\n  /**\n   * An observable of messages being sent to this provider.\n   *\n   * @returns {Observable} An [RxJS observable](http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html)\n   */\n  messages () {\n    return this.messages$\n  }\n\n  /**\n   * Send a payload to the underlying target of this provider.\n   *\n   * @param {Object} payload\n   */\n  send (payload) {\n    this.target.postMessage(payload, '*')\n  }\n}\n"],"file":"WindowMessage.js"}