"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_ava=_interopRequireDefault(require("ava")),_sinon=_interopRequireDefault(require("sinon")),_events=require("events"),_MessagePortMessage=_interopRequireDefault(require("./MessagePortMessage")),_Provider=_interopRequireDefault(require("./Provider"));_ava.default.afterEach.always(()=>{global.self=void 0,_sinon.default.restore()}),(0,_ava.default)("should extend Provider",t=>{t.true(_MessagePortMessage.default.prototype instanceof _Provider.default)}),(0,_ava.default)("should assign self if target is undefined",t=>{global.self=_sinon.default.spy();// act
const instance=new _MessagePortMessage.default;// assert
t.is(instance.target,global.self)}),(0,_ava.default)("should forward the messages' data emitted from the given target",t=>{// arrange
const target=new _events.EventEmitter,instance=new _MessagePortMessage.default(target);t.plan(2);// act
const messages=instance.messages();messages.subscribe(value=>t.is(value,"pass")),target.emit("message",{data:"pass",source:target}),target.emit("message",{data:"fail"}),target.emit("message",{data:"pass",source:target})}),(0,_ava.default)("should send the payload through postMessage",t=>{// arrange
const postMessageMock=_sinon.default.spy(),instance=new _MessagePortMessage.default({postMessage:postMessageMock});// act
// assert
instance.send("payload-example"),t.is(postMessageMock.getCall(0).args[0],"payload-example")});
//# sourceMappingURL=MessagePortMessage.test.js.map