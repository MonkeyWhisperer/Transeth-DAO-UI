{"version":3,"sources":["../src/jsonrpc.test.js"],"names":["uuidv4Stub","sinon","stub","jsonrpc","test","afterEach","always","restore","t","returns","encoded","encodeRequest","is","id","method","deepEqual","params","encodeResponse","result","Error","error","signals","COMPLETE","true","completed","valid","isValidResponse"],"mappings":"iTAKMA,CAAAA,UAAU,CAAGC,eAAMC,IAAN,E,CACbC,OAAO,CAAG,wBAAW,WAAX,CAAwB,CACtC,UAAWH,UAD2B,CAAxB,C,CAIhBI,aAAKC,SAAL,CAAeC,MAAf,CAAsB,IAAM,CAC1BL,eAAMM,OAAN,EACD,CAFD,C,CAIA,iBAAK,2BAAL,CAAmCC,CAAD,EAAO,CAEvCR,UAAU,CAACS,OAAX,CAAmB,SAAnB,CAFuC,CAGvC;AACA,KAAMC,CAAAA,OAAO,CAAGP,OAAO,CAACQ,aAAR,CAAsB,GAAtB,CAAhB,CACA;AACAH,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACP,OAAb,CAAsB,KAAtB,CANuC,CAOvCK,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACG,EAAb,CAAiB,SAAjB,CAPuC,CAQvCL,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACI,MAAb,CAAqB,GAArB,CARuC,CASvCN,CAAC,CAACO,SAAF,CAAYL,OAAO,CAACM,MAApB,CAA4B,EAA5B,CACD,CAVD,C,CAYA,iBAAK,4BAAL,CAAoCR,CAAD,EAAO,CACxC;AACA,KAAME,CAAAA,OAAO,CAAGP,OAAO,CAACc,cAAR,CAAuB,MAAvB,CAAhB,CACA;AACAT,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACP,OAAb,CAAsB,KAAtB,CAJwC,CAKxCK,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACG,EAAb,CAAiB,MAAjB,CALwC,CAMxCL,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACQ,MAAb,CAAqB,IAArB,CACD,CAPD,C,CASA,iBAAK,kCAAL,CAA0CV,CAAD,EAAO,CAC9C;AACA,KAAME,CAAAA,OAAO,CAAGP,OAAO,CAACc,cAAR,CAAuB,MAAvB,CAA+B,GAAIE,CAAAA,KAAnC,CAAhB,CACA;AACAX,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACP,OAAb,CAAsB,KAAtB,CAJ8C,CAK9CK,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACG,EAAb,CAAiB,MAAjB,CAL8C,CAM9CL,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACU,KAAb,CAAoB,mBAApB,CACD,CAPD,C,CASA,iBAAK,2DAAL,CAAmEZ,CAAD,EAAO,CACvE;AACA,KAAME,CAAAA,OAAO,CAAGP,OAAO,CAACc,cAAR,CAAuB,MAAvB,CAA+B,GAAIE,CAAAA,KAAJ,CAAU,SAAV,CAA/B,CAAhB,CACA;AACAX,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACP,OAAb,CAAsB,KAAtB,CAJuE,CAKvEK,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACG,EAAb,CAAiB,MAAjB,CALuE,CAMvEL,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACU,KAAb,CAAoB,SAApB,CACD,CAPD,C,CASA,iBAAK,qCAAL,CAA6CZ,CAAD,EAAO,CACjD;AACA,KAAME,CAAAA,OAAO,CAAGP,OAAO,CAACc,cAAR,CAAuB,MAAvB,CAA+BI,iBAAQC,QAAvC,CAAhB,CACA;AACAd,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACP,OAAb,CAAsB,KAAtB,CAJiD,CAKjDK,CAAC,CAACI,EAAF,CAAKF,OAAO,CAACG,EAAb,CAAiB,MAAjB,CALiD,CAMjDL,CAAC,CAACe,IAAF,CAAOb,OAAO,CAACc,SAAf,CACD,CAPD,C,CASA,iBAAK,wCAAL,CAAgDhB,CAAD,EAAO,CACpD;AADoD,KAQ9CiB,CAAAA,KAAK,CAAGtB,OAAO,CAACuB,eAAR,CANG,CACfvB,OAAO,CAAE,KADM,CAEfU,EAAE,CAAE,SAFW,CAGfK,MAAM,CAAE,GAEV;AALiB,CAMH,CARsC,CASpD;AACAV,CAAC,CAACe,IAAF,CAAOE,KAAP,CACD,CAXD,C,CAaA,iBAAK,8CAAL,CAAsDjB,CAAD,EAAO,CAC1D;AAD0D,KAQpDiB,CAAAA,KAAK,CAAGtB,OAAO,CAACuB,eAAR,CANG,CACfvB,OAAO,CAAE,KADM,CAEfU,EAAE,CAAE,SAFW,CAGfO,KAAK,CAAE,IAET;AALiB,CAMH,CAR4C,CAS1D;AACAZ,CAAC,CAACe,IAAF,CAAOE,KAAP,CACD,CAXD,C","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport proxyquire from 'proxyquire'\nimport signals from './signals'\n\nconst uuidv4Stub = sinon.stub()\nconst jsonrpc = proxyquire('./jsonrpc', {\n  'uuid/v4': uuidv4Stub\n})\n\ntest.afterEach.always(() => {\n  sinon.restore()\n})\n\ntest('should encode the request', (t) => {\n  // arrange\n  uuidv4Stub.returns('some-id')\n  // act\n  const encoded = jsonrpc.encodeRequest('m')\n  // assert\n  t.is(encoded.jsonrpc, '2.0')\n  t.is(encoded.id, 'some-id')\n  t.is(encoded.method, 'm')\n  t.deepEqual(encoded.params, [])\n})\n\ntest('should encode the response', (t) => {\n  // act\n  const encoded = jsonrpc.encodeResponse('1234')\n  // assert\n  t.is(encoded.jsonrpc, '2.0')\n  t.is(encoded.id, '1234')\n  t.is(encoded.result, null)\n})\n\ntest('should encode the error response', (t) => {\n  // act\n  const encoded = jsonrpc.encodeResponse('1234', new Error())\n  // assert\n  t.is(encoded.jsonrpc, '2.0')\n  t.is(encoded.id, '1234')\n  t.is(encoded.error, 'An error occurred')\n})\n\ntest('should encode the error response and preserve the message', (t) => {\n  // act\n  const encoded = jsonrpc.encodeResponse('1234', new Error('no-good'))\n  // assert\n  t.is(encoded.jsonrpc, '2.0')\n  t.is(encoded.id, '1234')\n  t.is(encoded.error, 'no-good')\n})\n\ntest('should encode the complete response', (t) => {\n  // act\n  const encoded = jsonrpc.encodeResponse('1234', signals.COMPLETE)\n  // assert\n  t.is(encoded.jsonrpc, '2.0')\n  t.is(encoded.id, '1234')\n  t.true(encoded.completed)\n})\n\ntest('should return true for valid responses', (t) => {\n  // arrange\n  const response = {\n    jsonrpc: '2.0',\n    id: 'some-id',\n    result: 200\n  }\n  // act\n  const valid = jsonrpc.isValidResponse(response)\n  // assert\n  t.true(valid)\n})\n\ntest('should return true for valid error responses', (t) => {\n  // arrange\n  const response = {\n    jsonrpc: '2.0',\n    id: 'some-id',\n    error: null\n  }\n  // act\n  const valid = jsonrpc.isValidResponse(response)\n  // assert\n  t.true(valid)\n})\n"],"file":"jsonrpc.test.js"}