"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_ava=_interopRequireDefault(require("ava")),_proxyquire=_interopRequireDefault(require("proxyquire")),_sinon=_interopRequireDefault(require("sinon")),eventsUtils=_interopRequireWildcard(require("../../utils/events"));function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!=key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}_ava.default.beforeEach(t=>{const utilsStub={events:eventsUtils},pastEvents=(0,_proxyquire.default)("./past-events",{"../../utils":utilsStub}).default;t.context={pastEvents,utilsStub}}),(0,_ava.default)("should invoke proxy.pastEvents with the correct options",async t=>{const{pastEvents}=t.context;t.plan(2);// arrange
const mockObservable=Symbol("mockObservable"),proxyStub={pastEvents:_sinon.default.stub().returns(mockObservable)},pastEventsObservable=pastEvents({params:["allEvents",{fromBlock:5}]},proxyStub);// assert
t.true(proxyStub.pastEvents.calledOnceWithExactly(["allEvents"],{fromBlock:5})),t.is(pastEventsObservable,mockObservable)}),(0,_ava.default)("should invoke proxy.pastEvents with the correct options for aragonAPIv1",async t=>{const{pastEvents}=t.context;t.plan(2);// arrange
const mockObservable=Symbol("mockObservable"),proxyStub={pastEvents:_sinon.default.stub().returns(mockObservable)},pastEventsObservable=pastEvents({params:[5,10]},proxyStub);// assert
t.true(proxyStub.pastEvents.calledOnceWith(null,{fromBlock:5,toBlock:10})),t.is(pastEventsObservable,mockObservable)}),(0,_ava.default)("should invoke proxy.pastEvents with the correct options for aragonAPIv1 when no fromBlock is passed",async t=>{const{pastEvents}=t.context;t.plan(2);// arrange
const mockObservable=Symbol("mockObservable"),proxyStub={pastEvents:_sinon.default.stub().returns(mockObservable)},pastEventsObservable=pastEvents({params:[]},proxyStub);// assert
t.true(proxyStub.pastEvents.calledOnceWith(null,{fromBlock:void 0,toBlock:void 0})),t.is(pastEventsObservable,mockObservable)});
//# sourceMappingURL=past-events.test.js.map