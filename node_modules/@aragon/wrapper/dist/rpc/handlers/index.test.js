"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_ava=_interopRequireDefault(require("ava")),_sinon=_interopRequireDefault(require("sinon")),_rxjs=require("rxjs"),_rpcMessenger=require("@aragon/rpc-messenger"),_index=require("./index");_ava.default.afterEach.always(()=>{_sinon.default.restore()}),(0,_ava.default)("should create a request handler",async t=>{t.plan(8);// arrange
const requestStub=(0,_rxjs.from)([{request:{id:"uuid0",// this one should get filtered away
method:"accounts"}},{request:{id:"uuid1",method:"cache",params:["get","settings"]}},{request:{id:"uuid4",method:"cache",params:["set","settings"],value:{foo:"bar"}}},{request:{id:"uuid5",method:"cache",params:["clear"]}},{request:{id:"uuid6",method:"cache",params:["get","profile"]}},{request:{// this one should NOT get filtered away, but assigned a default response of null
id:"uuid8",method:"cache"}}]),result=(0,_index.createRequestHandler)(requestStub,"cache",request=>"uuid8"===request.id?Promise.resolve():"set"===request.params[0]?Promise.reject(new Error(`no permissions to change ${request.params[1]}!!`)):"clear"===request.params[0]?Promise.reject(new Error):Promise.resolve(`resolved ${request.params[1]}`)),completed=new Set;result.subscribe({next(value){return value.payload===_rpcMessenger.signals.COMPLETE?(completed.has(value.id)&&t.fail(`request (${value.id}) completed twice`),void completed.add(value.id)):"uuid1"===value.id?t.is(value.payload,"resolved settings"):"uuid4"===value.id?(t.is(value.payload.message,"no permissions to change settings!!"),t.true(value.payload instanceof Error)):"uuid5"===value.id?(t.is(value.payload.message,""),t.true(value.payload instanceof Error)):"uuid6"===value.id?t.is(value.payload,"resolved profile"):"uuid8"===value.id?t.is(value.payload,null):void 0},// Check non-erroring requests completed correctly
complete(){return t.deepEqual([...completed].sort(),["uuid1","uuid6","uuid8"])}})}),(0,_ava.default)("should combine request handlers",async t=>{t.plan(2);// arrange
const handlerA=(0,_rxjs.of)("handler for A"),handlerB=(0,_rxjs.of)("handler for B"),result=(0,_index.combineRequestHandlers)(handlerA,handlerB);// assert
result.subscribe(value=>{t.true("handler for A"===value||"handler for B"===value)})});
//# sourceMappingURL=index.test.js.map