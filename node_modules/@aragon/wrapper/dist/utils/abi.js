"use strict";Object.defineProperty(exports,"__esModule",{value:!0// force cache invalidation
}),exports.findMethodAbiFragment=findMethodAbiFragment;function findMethodAbiFragment(abi,methodSignature){if("fallback"===methodSignature)// Note that fallback functions in the ABI do not contain a `name` or `inputs` key
return abi.find(method=>"fallback"===method.type);// Is the given method a full signature, e.g. 'foo(arg1,arg2,...)'
const fullMethodSignature=!!methodSignature&&methodSignature.includes("(")&&methodSignature.includes(")"),methodAbiFragment=abi.filter(method=>"function"===method.type).find(method=>{// If the full signature isn't given, just find the first overload declared
if(!fullMethodSignature)return method.name===methodSignature;const currentParameterTypes=method.inputs.map(_ref=>{let{type}=_ref;return type}),currentMethodSignature=`${method.name}(${currentParameterTypes.join(",")})`;return currentMethodSignature===methodSignature});return methodAbiFragment}
//# sourceMappingURL=abi.js.map