{"version":3,"file":"index.js","names":["tryEvaluatingRadspec","intent","wrapper","apps","pipe","first","toPromise","app","find","addressesEqual","proxyAddress","to","appsToSearch","foundMethod","reduce","found","method","findAppMethodFromData","data","abi","evaluatedNotice","notice","network","radspec","evaluate","transaction","ethNode","web3","currentProvider","currency","nativeCurrency","err","console","error","description","tryDescribingUpdateAppIntent","upgradeIntentParams","filterAndDecodeAppUpgradeIntents","appId","appAddress","repoAddress","ens","resolve","repo","makeRepoProxy","version","latestVersion","getRepoLatestVersionForContract","tryDescribingUpgradeOrganizationBasket","intents","upgradedKnownAppIds","map","filter","knownAppIds","includes","length","from"],"sources":["../../src/radspec/index.js"],"sourcesContent":["import { first } from 'rxjs/operators'\nimport * as radspec from 'radspec'\nimport { getRepoLatestVersionForContract, makeRepoProxy } from '../core/apm/repo'\nimport { addressesEqual } from '../utils'\nimport { findAppMethodFromData, knownAppIds } from '../utils/apps'\nimport { filterAndDecodeAppUpgradeIntents } from '../utils/intents'\n\n/**\n * Attempt to describe intent via radspec.\n *\n * @param  {Object} intent transaction intent\n * @param  {Object} wrapper\n * @return {Promise<Object>} Decorated intent with description, if one could be made\n */\nexport async function tryEvaluatingRadspec (intent, wrapper) {\n  const apps = await wrapper.apps.pipe(first()).toPromise()\n  const app = apps.find(app => addressesEqual(app.proxyAddress, intent.to))\n\n  // If the intent matches an installed app, use only that app to search for a\n  // method match, otherwise fallback to searching all installed apps\n  const appsToSearch = app ? [app] : apps\n  const foundMethod = appsToSearch.reduce((found, app) => {\n    if (found) { return found }\n\n    const method = findAppMethodFromData(app, intent.data)\n    if (method) {\n      return {\n        method,\n        // This is not very nice, but some apps don't have ABIs attached to their function\n        // declarations and so we have to fall back to using their full app ABI\n        // TODO: define a more concrete schema around the artifact.json's `function.abi`\n        abi: method.abi ? [method.abi] : app.abi\n      }\n    }\n  }, undefined)\n\n  const { abi, method } = foundMethod || {}\n\n  let evaluatedNotice\n  if (method && method.notice) {\n    try {\n      const network = await wrapper.network.pipe(first()).toPromise()\n      evaluatedNotice = await radspec.evaluate(\n        method.notice,\n        {\n          abi,\n          transaction: intent\n        },\n        {\n          ethNode: wrapper.web3.currentProvider,\n          currency: network.nativeCurrency\n        }\n      )\n    } catch (err) {\n      console.error(`Could not evaluate a description for given transaction data: ${intent.data}`, err)\n    }\n  }\n\n  return {\n    ...intent,\n    description: evaluatedNotice\n  }\n}\n\n/**\n * Attempt to describe a setApp() intent. Only describes the APP_BASE namespace.\n *\n * @param  {Object} intent transaction intent\n * @param  {Object} wrapper\n * @return {Promise<Object>} Decorated intent with description, if one could be made\n */\nexport async function tryDescribingUpdateAppIntent (intent, wrapper) {\n  const upgradeIntentParams = (await filterAndDecodeAppUpgradeIntents([intent], wrapper))[0]\n  if (!upgradeIntentParams) return\n\n  const { appId, appAddress } = upgradeIntentParams\n  // Fetch aragonPM information\n  const repoAddress = await wrapper.ens.resolve(appId)\n  const repo = makeRepoProxy(repoAddress, wrapper.web3)\n  const { version: latestVersion } = await getRepoLatestVersionForContract(repo, appAddress)\n\n  return {\n    ...intent,\n    description: `Upgrade ${appId} app instances to v${latestVersion}`\n  }\n}\n\n/**\n * Attempt to parse a complete organization upgrade intent\n *\n * @param  {Array<Object>} intents intent basket\n * @param  {Object} wrapper\n * @return {Promise<Object>} Decorated intent with description, if one could be made\n */\nexport async function tryDescribingUpgradeOrganizationBasket (intents, wrapper) {\n  const upgradedKnownAppIds = (await filterAndDecodeAppUpgradeIntents(intents, wrapper))\n    .map(({ appId }) => appId)\n    // Take intersection with knownAppIds\n    .filter(\n      appId => knownAppIds.includes(appId)\n    )\n\n  if (\n    // All intents are for upgrading known apps\n    intents.length === upgradedKnownAppIds.length &&\n    // All known apps are being upgraded\n    knownAppIds.length === upgradedKnownAppIds.length\n  ) {\n    return {\n      description: 'Upgrade organization to Aragon 0.8 Camino',\n      from: intents[0].from,\n      to: intents[0].to\n    }\n  }\n}\n\nexport { postprocessRadspecDescription } from './postprocess'\n"],"mappings":"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"}