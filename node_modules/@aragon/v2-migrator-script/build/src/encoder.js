"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const VAULT_ABI = require('../abi/Vault.json');
const VOTING_ABI = require('../abi/Voting.json');
const FINANCE_ABI = require('../abi/Finance.json');
const TOKEN_MANAGER_ABI = require('../abi/TokenManager.json');
const CALLSCRIPT_ID = '0x00000001';
const PAYMENT_REFERENCE = 'Transfer funds to govern executor';
const MIGRATION_METADATA = 'Migrate all funds to govern executor';
const Encoder = {
    encodeNewVote(dao, script, executor) {
        const voting = new ethers_1.utils.Interface(VOTING_ABI);
        const votingData = voting.encodeFunctionData('newVote', [script, `${MIGRATION_METADATA}: ${executor}`, true, true]);
        if (!dao.tokenManager)
            return votingData;
        const votingScript = Encoder.encodeCallsScript([{ to: dao.voting, data: votingData }]);
        const tokenManager = new ethers_1.utils.Interface(TOKEN_MANAGER_ABI);
        return tokenManager.encodeFunctionData('forward', [votingScript]);
    },
    encodeTransferAllCallScript(dao, assets, recipient) {
        return Encoder.encodeCallsScript(assets.map(asset => {
            if (dao.finance) {
                const data = Encoder.encodePayment(asset.token, recipient, asset.amount);
                return { to: dao.finance, data };
            }
            else {
                const data = Encoder.encodeTransfer(asset.token, recipient, asset.amount);
                return { to: dao.vault, data };
            }
        }));
    },
    encodeTransfer(token, recipient, amount) {
        const vault = new ethers_1.utils.Interface(VAULT_ABI);
        return vault.encodeFunctionData('transfer', [token, recipient, amount]);
    },
    encodePayment(token, recipient, amount) {
        const finance = new ethers_1.utils.Interface(FINANCE_ABI);
        return finance.encodeFunctionData('newImmediatePayment', [token, recipient, amount, PAYMENT_REFERENCE]);
    },
    encodeCallsScript(actions) {
        return actions.reduce((script, { to, data }) => {
            const address = ethers_1.utils.defaultAbiCoder.encode(['address'], [to]);
            const dataLength = ethers_1.utils.defaultAbiCoder.encode(['uint256'], [(data.length - 2) / 2]);
            return script + address.slice(26) + dataLength.slice(58) + data.slice(2);
        }, CALLSCRIPT_ID);
    },
};
exports.default = Encoder;
