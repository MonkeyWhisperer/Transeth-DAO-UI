{"version":3,"sources":["../../../src/helpers/lib/formatBN.js"],"names":["sameFraction","first","second","replace","BN","eq","tenPow","x","pow","formatBN","amount","base","precision","fixed","baseLength","toString","length","whole","div","fraction","mod","zeros","repeat","Math","max","fractionWithoutTrailingZeros","fractionAfterPrecision","slice","parseInt","prefix"],"mappings":"gGAAA,iD,8FAEA,QAASA,CAAAA,YAAT,CAAuBC,KAAvB,CAA8BC,MAA9B,CAAsC,CAKpC;AACA;AACA;AACA;AACA;AACA,MARAD,CAAAA,KAAK,CAAGA,KAAK,CAACE,OAAN,CAAc,KAAd,CAAqB,EAArB,CAQR,CAPAD,MAAM,CAAGA,MAAM,CAACC,OAAP,CAAe,KAAf,CAAsB,EAAtB,CAOT,CAAQ,GAAIC,YAAJ,CAAQ,IAAGH,KAAM,EAAjB,EAAoBI,EAApB,CAAuB,GAAID,YAAJ,CAAQ,IAAGF,MAAO,EAAlB,CAAvB,CACT,CAEM,KAAMI,CAAAA,MAAM,CAAGC,CAAC,EACpB,GAAIH,YAAJ,CAAO,EAAP,CAAD,CAAaI,GAAb,CAAiB,GAAIJ,YAAJ,CAAOG,CAAP,CAAjB,CADK,C,sBAIA,KAAME,CAAAA,QAAQ,CAAG,CAACC,MAAD,CAASC,IAAT,CAAeC,SAAf,CAA0BC,KAAK,GAA/B,GAA4C,CAClE;AADkE,KAE5DC,CAAAA,UAAU,CAAGH,IAAI,CAACI,QAAL,GAAgBC,MAF+B,CAI5DC,KAAK,CAAGP,MAAM,CAACQ,GAAP,CAAWP,IAAX,EAAiBI,QAAjB,EAJoD,CAKlE,GAAII,CAAAA,QAAQ,CAAGT,MAAM,CAACU,GAAP,CAAWT,IAAX,EAAiBI,QAAjB,EAAf,CACA,KAAMM,CAAAA,KAAK,CAAG,IAAIC,MAAJ,CAAWC,IAAI,CAACC,GAAL,CAAS,CAAT,CAAYV,UAAU,CAAGK,QAAQ,CAACH,MAAtB,CAA+B,CAA3C,CAAX,CAAd,CAEAG,QAAQ,CAAI,GAAEE,KAAM,GAAEF,QAAS,EARmC,MAS5DM,CAAAA,4BAA4B,CAAGN,QAAQ,CAAChB,OAAT,CAAiB,KAAjB,CAAwB,EAAxB,CAT6B,CAU5DuB,sBAAsB,CAAG,CAACb,KAAK,CAAGM,QAAH,CAAcM,4BAApB,EAAkDE,KAAlD,CAAwD,CAAxD,CAA2Df,SAA3D,CAVmC,CAYlE,GAAI,CAACC,KAAD,GAAsC,EAA3B,GAAAa,sBAAsB,EAAoD,CAAzC,GAAAE,QAAQ,CAACF,sBAAD,CAAyB,EAAzB,CAApD,CAAJ,CACE,MAAOT,CAAAA,KAAP,CAGF,KAAMY,CAAAA,MAAM,CAAG7B,YAAY,CAAC0B,sBAAD,CAAyBP,QAAzB,CAAZ,CAAiD,EAAjD,CAAsD,GAArE,CAEA,MAAQ,GAAEU,MAAO,GAAEZ,KAAM,IAAGS,sBAAuB,EACpD,CAnBM,C","sourcesContent":["import BN from 'bn.js'\n\nfunction sameFraction (first, second) {\n  // First remove any trailing zeros, since they're meaningless in fractions\n  first = first.replace(/0+$/, '')\n  second = second.replace(/0+$/, '')\n\n  // Check that these two values are the same.\n  // Note that leading zeros ARE meaningful, and so we do the comparision after\n  // appending a one as the first digit.\n  //\n  // For example, .001 and .00100 are the same value, but .0001 and .001 are not.\n  return (new BN(`1${first}`).eq(new BN(`1${second}`)))\n}\n\nexport const tenPow = x => (\n  (new BN(10)).pow(new BN(x))\n)\n\nexport const formatBN = (amount, base, precision, fixed = false) => {\n  // Inspired by: https://github.com/ethjs/ethjs-unit/blob/35d870eae1c32c652da88837a71e252a63a83ebb/src/index.js#L83\n  const baseLength = base.toString().length\n\n  const whole = amount.div(base).toString()\n  let fraction = amount.mod(base).toString()\n  const zeros = '0'.repeat(Math.max(0, baseLength - fraction.length - 1))\n\n  fraction = `${zeros}${fraction}`\n  const fractionWithoutTrailingZeros = fraction.replace(/0+$/, '')\n  const fractionAfterPrecision = (fixed ? fraction : fractionWithoutTrailingZeros).slice(0, precision)\n\n  if (!fixed && (fractionAfterPrecision === '' || parseInt(fractionAfterPrecision, 10) === 0)) {\n    return whole\n  }\n\n  const prefix = sameFraction(fractionAfterPrecision, fraction) ? '' : '~'\n\n  return `${prefix}${whole}.${fractionAfterPrecision}`\n}\n"],"file":"formatBN.js"}