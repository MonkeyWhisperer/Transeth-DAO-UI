"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _bn=_interopRequireDefault(require("bn.js")),_web3Utils=require("web3-utils"),_token=require("./lib/token"),_formatBN=require("./lib/formatBN"),_default=(eth,evaluator)=>/**
   * Format token amounts taking decimals into account
   *
   * @param {string} tokenAddress The address of the token
   * @param {*} amount The absolute amount for the token quantity (wei)
   * @param {bool} showSymbol Whether the token symbol will be printed after the amount
   * @param {*} precision The number of decimal places to format to. If set, the precision is always enforced.
   * @return {Promise<radspec/evaluator/TypedValue>}
   */async(tokenAddress,amount,showSymbol=!0,precision)=>{const amountBn=new _bn.default(amount),fixed=!!precision;let decimals,symbol;if(tokenAddress===_token.NON_TOKEN_ADDRESS)decimals=new _bn.default(evaluator.currency.decimals),showSymbol&&(symbol=evaluator.currency.symbol);else{let token=new eth.Contract(_token.ERC20_SYMBOL_DECIMALS_ABI,tokenAddress);if(decimals=new _bn.default((await token.methods.decimals().call())),showSymbol)try{symbol=(await token.methods.symbol().call())||""}catch(err){token=new eth.Contract(_token.ERC20_SYMBOL_BYTES32_ABI,tokenAddress),symbol=(await token.methods.symbol().call())||"",symbol=symbol&&(0,_web3Utils.toUtf8)(symbol)}}precision=precision||decimals;const formattedAmount=(0,_formatBN.formatBN)(amountBn,(0,_formatBN.tenPow)(decimals),+precision,fixed);return{type:"string",value:showSymbol?`${formattedAmount} ${symbol}`:formattedAmount}};exports.default=_default;
//# sourceMappingURL=tokenAmount.js.map