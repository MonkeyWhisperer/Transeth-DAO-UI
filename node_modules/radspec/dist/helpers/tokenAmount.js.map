{"version":3,"sources":["../../src/helpers/tokenAmount.js"],"names":["eth","evaluator","tokenAddress","amount","showSymbol","precision","amountBn","BN","fixed","decimals","symbol","NON_TOKEN_ADDRESS","currency","token","Contract","ERC20_SYMBOL_DECIMALS_ABI","methods","call","err","ERC20_SYMBOL_BYTES32_ABI","formattedAmount","type","value"],"mappings":"2UASe,CAACA,GAAD,CAAMC,SAAN,GACb;;;;;;;;KASA,MAAOC,YAAP,CAAqBC,MAArB,CAA6BC,UAAU,GAAvC,CAAgDC,SAAhD,GAA8D,MACtDC,CAAAA,QAAQ,CAAG,GAAIC,YAAJ,CAAOJ,MAAP,CAD2C,CAEtDK,KAAK,CAAG,CAAC,CAACH,SAF4C,IAIxDI,CAAAA,QAJwD,CAKxDC,MALwD,CAO5D,GAAIR,YAAY,GAAKS,wBAArB,CACEF,QAAQ,CAAG,GAAIF,YAAJ,CAAON,SAAS,CAACW,QAAV,CAAmBH,QAA1B,CADb,CAEML,UAFN,GAGIM,MAAM,CAAGT,SAAS,CAACW,QAAV,CAAmBF,MAHhC,MAKO,CACL,GAAIG,CAAAA,KAAK,CAAG,GAAIb,CAAAA,GAAG,CAACc,QAAR,CAAiBC,gCAAjB,CAA4Cb,YAA5C,CAAZ,CAGA,GADAO,QAAQ,CAAG,GAAIF,YAAJ,EAAO,KAAMM,CAAAA,KAAK,CAACG,OAAN,CAAcP,QAAd,GAAyBQ,IAAzB,EAAb,EACX,CAAIb,UAAJ,CACE,GAAI,CACFM,MAAM,CAAG,MAAMG,CAAAA,KAAK,CAACG,OAAN,CAAcN,MAAd,GAAuBO,IAAvB,EAAN,GAAuC,EACjD,CAAC,MAAOC,GAAP,CAAY,CAEZL,KAAK,CAAG,GAAIb,CAAAA,GAAG,CAACc,QAAR,CAAiBK,+BAAjB,CAA2CjB,YAA3C,CAFI,CAGZQ,MAAM,CAAG,MAAMG,CAAAA,KAAK,CAACG,OAAN,CAAcN,MAAd,GAAuBO,IAAvB,EAAN,GAAuC,EAHpC,CAIZP,MAAM,CAAGA,MAAM,EAAI,sBAAOA,MAAP,CACpB,CAEJ,CAEDL,SAAS,CAAGA,SAAS,EAAII,QA5BmC,CA8B5D,KAAMW,CAAAA,eAAe,CAAG,uBAASd,QAAT,CAAmB,qBAAOG,QAAP,CAAnB,EAA4CJ,SAA5C,CAAwDG,KAAxD,CAAxB,CAEA,MAAO,CACLa,IAAI,CAAE,QADD,CAELC,KAAK,CAAElB,UAAU,CAAI,GAAEgB,eAAgB,IAAGV,MAAO,EAAhC,CAAoCU,eAFhD,CAIR,C","sourcesContent":["import BN from 'bn.js'\nimport { toUtf8 } from 'web3-utils'\nimport {\n  ERC20_SYMBOL_BYTES32_ABI,\n  ERC20_SYMBOL_DECIMALS_ABI,\n  NON_TOKEN_ADDRESS\n} from './lib/token'\nimport { formatBN, tenPow } from './lib/formatBN'\n\nexport default (eth, evaluator) =>\n  /**\n   * Format token amounts taking decimals into account\n   *\n   * @param {string} tokenAddress The address of the token\n   * @param {*} amount The absolute amount for the token quantity (wei)\n   * @param {bool} showSymbol Whether the token symbol will be printed after the amount\n   * @param {*} precision The number of decimal places to format to. If set, the precision is always enforced.\n   * @return {Promise<radspec/evaluator/TypedValue>}\n   */\n  async (tokenAddress, amount, showSymbol = true, precision) => {\n    const amountBn = new BN(amount)\n    const fixed = !!precision\n\n    let decimals\n    let symbol\n\n    if (tokenAddress === NON_TOKEN_ADDRESS) {\n      decimals = new BN(evaluator.currency.decimals)\n      if (showSymbol) {\n        symbol = evaluator.currency.symbol\n      }\n    } else {\n      let token = new eth.Contract(ERC20_SYMBOL_DECIMALS_ABI, tokenAddress)\n\n      decimals = new BN(await token.methods.decimals().call())\n      if (showSymbol) {\n        try {\n          symbol = await token.methods.symbol().call() || ''\n        } catch (err) {\n          // Some tokens (e.g. DS-Token) use bytes32 for their symbol()\n          token = new eth.Contract(ERC20_SYMBOL_BYTES32_ABI, tokenAddress)\n          symbol = await token.methods.symbol().call() || ''\n          symbol = symbol && toUtf8(symbol)\n        }\n      }\n    }\n\n    precision = precision || decimals\n\n    const formattedAmount = formatBN(amountBn, tenPow(decimals), Number(precision), fixed)\n\n    return {\n      type: 'string',\n      value: showSymbol ? `${formattedAmount} ${symbol}` : formattedAmount\n    }\n  }\n"],"file":"tokenAmount.js"}