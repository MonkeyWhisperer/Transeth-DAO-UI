"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.evaluate=evaluate,Object.defineProperty(exports,"evaluateRaw",{enumerable:!0,get:function(){return _lib.evaluateRaw}}),Object.defineProperty(exports,"parse",{enumerable:!0,get:function(){return _parser.parse}}),Object.defineProperty(exports,"scan",{enumerable:!0,get:function(){return _scanner.scan}}),exports.default=void 0;var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty")),_objectWithoutProperties2=_interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties")),_web3EthAbi=_interopRequireDefault(require("web3-eth-abi")),_helpers=require("./helpers"),_lib=require("./lib"),_parser=require("./parser"),_scanner=require("./scanner");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable})),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null==arguments[i]?{}:arguments[i],i%2?ownKeys(Object(source),!0).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key])}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))});return target}/**
 * Evaluate a radspec expression (`source`) for a transaction (`call`)
 *
 * @example
 * import * as radspec from 'radspec'
 *
 * const expression = 'Will multiply `a` by 7 and return `a * 7`.'
 * const call = {
 *   abi: [{
 *     name: 'multiply',
 *     constant: false,
 *     type: 'function',
 *     inputs: [{
 *       name: 'a',
 *       type: 'uint256'
 *     }],
 *     outputs: [{
 *       name: 'd',
 *       type: 'uint256'
 *     }]
 *   }],
 *   transaction: {
 *     to: '0x8521742d3f456bd237e312d6e30724960f72517a',
 *     data: '0xc6888fa1000000000000000000000000000000000000000000000000000000000000007a'
 *   }
 * }
 *
 * radspec.evaluate(expression, call)
 *   .then(console.log) // => "Will multiply 122 by 7 and return 854."
 * @param {string} source The radspec expression
 * @param {Object} call The call that determines the bindings for this evaluation
 * @param {Array} call.abi The ABI used to decode the transaction data
 * @param {Object} call.transaction The transaction to decode for this evaluation
 * @param {string} call.transaction.to The destination address for this transaction
 * @param {string} call.transaction.data The transaction data
 * @param {?Object} options An options object
 * @param {?Web3} options.eth Web3 instance (used over options.ethNode)
 * @param {?string} options.ethNode The URL to an Ethereum node
 * @param {?Object} options.userHelpers User defined helpers
 * @param {?Object} options.currency Native currency of the blockchain
 * @return {Promise<string>} The result of the evaluation
 */function evaluate(source,call,_ref={}){let{userHelpers={}}=_ref,options=(0,_objectWithoutProperties2.default)(_ref,["userHelpers"]);// Get method ID
const methodId=call.transaction.data.substr(0,10),method=call.abi.find(abi=>"function"===abi.type&&methodId===_web3EthAbi.default.encodeFunctionSignature(abi)),parameterValues=_web3EthAbi.default.decodeParameters(method.inputs,"0x"+call.transaction.data.substr(10)),parameters=method.inputs.reduce((parameters,input)=>Object.assign(parameters,{[input.name]:{type:input.type,value:parameterValues[input.name]}}),{}),availableHelpers=_objectSpread({},_helpers.defaultHelpers,{},userHelpers),{from,to,value,data}=call.transaction;// Find method ABI
// Evaluate expression with bindings from the transaction data
return(0,_lib.evaluateRaw)(source,parameters,_objectSpread({},options,{availableHelpers,from,to,value,data}))}var _default=evaluate;exports.default=_default;
//# sourceMappingURL=index.js.map