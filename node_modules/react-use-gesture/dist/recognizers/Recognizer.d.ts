/// <reference types="react" />
import GestureController from '../controllers/GestureController';
import { Coordinates, DistanceAngle, StateKey, GestureState, GestureKey, SharedGestureState, Fn, TransformType, ReactEventHandlerKey, GestureFlag, TransformedEvent } from '../types';
/**
 * Recognizer abstract class
 * @template GestureType whether the Recognizer should deal with coordinates or distance / angle
 */
export default abstract class Recognizer<GestureType extends Coordinates | DistanceAngle> {
    protected readonly gestureKey: GestureKey;
    protected readonly controller: GestureController;
    protected readonly args: any[];
    protected stateKey: StateKey;
    /**
     * Creates an instance of a gesture recognizer.
     * @param gestureKey drag, move, hover, pinch, etc.
     * @param controller the controller attached to the gesture
     * @param [args] the args that should be passed to the gesture handler
     */
    constructor(gestureKey: GestureKey, controller: GestureController, args?: any[]);
    protected isEnabled: () => boolean;
    protected setTimeout: (callback: (...args: any[]) => void, ms?: number, ...args: any[]) => void;
    protected clearTimeout: () => void;
    protected getState: () => GestureState<GestureType>;
    protected getSharedState: () => SharedGestureState;
    protected pointerEventsEnabled: () => boolean;
    protected getTransformConfig: () => TransformType;
    protected addWindowListeners: (listeners: [string, Fn][]) => void;
    protected removeWindowListeners: () => void;
    abstract getEventBindings(): [ReactEventHandlerKey | ReactEventHandlerKey[], Fn][];
    /**
     * convenience method to update the controller state for a given gesture
     * @param sharedState shared partial state object
     * @param gestureState partial state object for the gesture handled by the recognizer
     * @param [gestureFlag] if set, will also fire the gesture handler set by the user
     */
    protected updateState: (sharedState: Partial<SharedGestureState> | null, gestureState: Partial<GestureState<GestureType>>, gestureFlag?: GestureFlag | undefined) => void;
    /**
     * returns the start state for a given gesture
     * @param values the values of the start state
     * @param event the event that triggers the gesture start
     */
    protected getStartState: (values: [number, number], event: TransformedEvent<import("react").MouseEvent<Element, MouseEvent> | import("react").TouchEvent<Element> | import("react").WheelEvent<Element> | import("react").PointerEvent<Element> | import("../types").GestureEvent>) => GestureState<GestureType>;
}
