{"version":3,"sources":["../../src/ble/sendAPDU.js"],"names":["TagId","chunkBuffer","buffer","sizeForIndex","chunks","i","size","length","push","slice","sendAPDU","write","apdu","mtuSize","map","head","Buffer","alloc","writeUInt8","writeUInt16BE","concat","create","chunk","terminated","main","then","o","complete","String","e","error","unsubscribe"],"mappings":";;;;;;;AAEA;;AACA;;;;AAEA,IAAMA,QAAQ,IAAd;;AAEA,SAASC,WAAT,CACEC,MADF,EAEEC,YAFF,EAGiB;AACf,MAAMC,SAAS,EAAf;AACA,OACE,IAAIC,IAAI,CAAR,EAAWC,OAAOH,aAAa,CAAb,CADpB,EAEEE,IAAIH,OAAOK,MAFb,EAGEF,KAAKC,IAAL,EAAWA,OAAOH,aAAaE,CAAb,CAHpB,EAIE;AACAD,WAAOI,IAAP,CAAYN,OAAOO,KAAP,CAAaJ,CAAb,EAAgBA,IAAIC,IAApB,CAAZ;AACD;AACD,SAAOF,MAAP;AACD;;AAEM,IAAMM,8BAAW,SAAXA,QAAW,CACtBC,KADsB,EAEtBC,IAFsB,EAGtBC,OAHsB,EAID;AACrB,MAAMT,SAASH,YAAYW,IAAZ,EAAkB;AAAA,WAAKC,WAAWR,MAAM,CAAN,GAAU,CAAV,GAAc,CAAzB,CAAL;AAAA,GAAlB,EAAoDS,GAApD,CACb,UAACZ,MAAD,EAASG,CAAT,EAAe;AACb,QAAMU,OAAOC,OAAOC,KAAP,CAAaZ,MAAM,CAAN,GAAU,CAAV,GAAc,CAA3B,CAAb;AACAU,SAAKG,UAAL,CAAgBlB,KAAhB,EAAuB,CAAvB;AACAe,SAAKI,aAAL,CAAmBd,CAAnB,EAAsB,CAAtB;AACA,QAAIA,MAAM,CAAV,EAAa;AACXU,WAAKI,aAAL,CAAmBP,KAAKL,MAAxB,EAAgC,CAAhC;AACD;AACD,WAAOS,OAAOI,MAAP,CAAc,CAACL,IAAD,EAAOb,MAAP,CAAd,CAAP;AACD,GATY,CAAf;;AAYA,SAAO,iBAAWmB,MAAX,CAAkB,aAAK;AAAA;AAAA,yEAG5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACsBjB,MADtB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACakB,qBADb;;AAAA,qBAEQC,UAFR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,uBAGUZ,MAAMW,KAAN,CAHV;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAH4B;;AAAA,sBAGbE,IAHa;AAAA;AAAA;AAAA;;AAC5B,QAAID,aAAa,KAAjB;;AASAC,WAAOC,IAAP,CACE,YAAM;AACJF,mBAAa,IAAb;AACAG,QAAEC,QAAF;AACD,KAJH,EAKE,aAAK;AACHJ,mBAAa,IAAb;AACA,qBAAI,WAAJ,EAAiB,sBAAsBK,OAAOC,CAAP,CAAvC;AACAH,QAAEI,KAAF,CAAQD,CAAR;AACD,KATH;;AAYA,QAAME,cAAc,SAAdA,WAAc,GAAM;AACxB,UAAI,CAACR,UAAL,EAAiB;AACf,uBAAI,aAAJ,EAAmB,uBAAnB;AACAA,qBAAa,IAAb;AACD;AACF,KALD;;AAOA,WAAOQ,WAAP;AACD,GA9BM,CAAP;AA+BD,CAhDM","file":"sendAPDU.js","sourcesContent":["// @flow\n\nimport { Observable } from \"rxjs\";\nimport { log } from \"@ledgerhq/logs\";\n\nconst TagId = 0x05;\n\nfunction chunkBuffer(\n  buffer: Buffer,\n  sizeForIndex: number => number\n): Array<Buffer> {\n  const chunks = [];\n  for (\n    let i = 0, size = sizeForIndex(0);\n    i < buffer.length;\n    i += size, size = sizeForIndex(i)\n  ) {\n    chunks.push(buffer.slice(i, i + size));\n  }\n  return chunks;\n}\n\nexport const sendAPDU = (\n  write: Buffer => Promise<void>,\n  apdu: Buffer,\n  mtuSize: number\n): Observable<void> => {\n  const chunks = chunkBuffer(apdu, i => mtuSize - (i === 0 ? 5 : 3)).map(\n    (buffer, i) => {\n      const head = Buffer.alloc(i === 0 ? 5 : 3);\n      head.writeUInt8(TagId, 0);\n      head.writeUInt16BE(i, 1);\n      if (i === 0) {\n        head.writeUInt16BE(apdu.length, 3);\n      }\n      return Buffer.concat([head, buffer]);\n    }\n  );\n\n  return Observable.create(o => {\n    let terminated = false;\n\n    async function main() {\n      for (const chunk of chunks) {\n        if (terminated) return;\n        await write(chunk);\n      }\n    }\n\n    main().then(\n      () => {\n        terminated = true;\n        o.complete();\n      },\n      e => {\n        terminated = true;\n        log(\"ble-error\", \"sendAPDU failure \" + String(e));\n        o.error(e);\n      }\n    );\n\n    const unsubscribe = () => {\n      if (!terminated) {\n        log(\"ble-verbose\", \"sendAPDU interruption\");\n        terminated = true;\n      }\n    };\n\n    return unsubscribe;\n  });\n};\n"]}