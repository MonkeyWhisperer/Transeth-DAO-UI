{"version":3,"sources":["../src/helpers.js"],"names":["errorClasses","deserializers","addCustomErrorDeserializer","name","deserializer","createCustomErrorClass","C","CustomError","message","fields","Object","assign","stack","Error","prototype","deserializeError","object","msg","JSON","parse","e","error","des","constructor","console","warn","create","prop","hasOwnProperty","captureStackTrace","String","serializeError","value","destroyCircular","from","seen","to","push","keys","key","indexOf","slice"],"mappings":"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","file":"helpers.js","sourcesContent":["// @flow\n/* eslint-disable no-continue */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\n\nconst errorClasses = {};\nconst deserializers = {};\n\nexport const addCustomErrorDeserializer = (\n  name: string,\n  deserializer: Object => *\n) => {\n  deserializers[name] = deserializer;\n};\n\nexport const createCustomErrorClass = (name: string): Class<any> => {\n  const C = function CustomError(message?: string, fields?: Object) {\n    Object.assign(this, fields);\n    this.name = name;\n    this.message = message || name;\n    this.stack = new Error().stack;\n  };\n  // $FlowFixMe\n  C.prototype = new Error();\n\n  errorClasses[name] = C;\n  // $FlowFixMe we can't easily type a subset of Error for now...\n  return C;\n};\n\n// inspired from https://github.com/programble/errio/blob/master/index.js\nexport const deserializeError = (object: mixed): Error => {\n  if (typeof object === \"object\" && object) {\n    try {\n      // $FlowFixMe FIXME HACK\n      const msg = JSON.parse(object.message);\n      if (msg.message && msg.name) {\n        object = msg;\n      }\n    } catch (e) {\n      // nothing\n    }\n\n    let error;\n    if (typeof object.name === \"string\") {\n      const { name } = object;\n      const des = deserializers[name];\n      if (des) {\n        error = des(object);\n      } else {\n        let constructor = name === \"Error\" ? Error : errorClasses[name];\n\n        if (!constructor) {\n          console.warn(\"deserializing an unknown class '\" + name + \"'\");\n          constructor = createCustomErrorClass(name);\n        }\n\n        error = Object.create(constructor.prototype);\n        try {\n          for (const prop in object) {\n            if (object.hasOwnProperty(prop)) {\n              error[prop] = object[prop];\n            }\n          }\n        } catch (e) {\n          // sometimes setting a property can fail (e.g. .name)\n        }\n      }\n    } else {\n      error = new Error(object.message);\n    }\n\n    if (!error.stack && Error.captureStackTrace) {\n      Error.captureStackTrace(error, deserializeError);\n    }\n    return error;\n  }\n  return new Error(String(object));\n};\n\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nexport const serializeError = (value: mixed) => {\n  if (!value) return value;\n  if (typeof value === \"object\") {\n    return destroyCircular(value, []);\n  }\n  if (typeof value === \"function\") {\n    return `[Function: ${value.name || \"anonymous\"}]`;\n  }\n  return value;\n};\n\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from: Object, seen) {\n  const to = {};\n  seen.push(from);\n  for (const key of Object.keys(from)) {\n    const value = from[key];\n    if (typeof value === \"function\") {\n      continue;\n    }\n    if (!value || typeof value !== \"object\") {\n      to[key] = value;\n      continue;\n    }\n    if (seen.indexOf(from[key]) === -1) {\n      to[key] = destroyCircular(from[key], seen.slice(0));\n      continue;\n    }\n    to[key] = \"[Circular]\";\n  }\n  if (typeof from.name === \"string\") {\n    to.name = from.name;\n  }\n  if (typeof from.message === \"string\") {\n    to.message = from.message;\n  }\n  if (typeof from.stack === \"string\") {\n    to.stack = from.stack;\n  }\n  return to;\n}\n"]}