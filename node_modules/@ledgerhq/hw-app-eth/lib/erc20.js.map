{"version":3,"sources":["../src/erc20.js"],"names":["byContractAddress","contract","get","byContract","asContractAddress","list","addr","a","toLowerCase","startsWith","cache","buf","Buffer","from","entries","i","length","readUInt32BE","item","slice","j","tickerLength","readUInt8","ticker","toString","contractAddress","decimals","chainId","signature","entry","data","push","api"],"mappings":";;;;;;;AACA;;;;;;AAEA;;;AAGO,IAAMA,gDAAoB,SAApBA,iBAAoB,CAACC,QAAD;AAAA,SAC/BC,MAAMC,UAAN,CAAiBC,kBAAkBH,QAAlB,CAAjB,CAD+B;AAAA,CAA1B;;AAGP;;;;AAGO,IAAMI,sBAAO,SAAPA,IAAO;AAAA,SAAmBH,MAAMG,IAAN,EAAnB;AAAA,CAAb;;AAgBP,IAAMD,oBAAoB,SAApBA,iBAAoB,CAACE,IAAD,EAAkB;AAC1C,MAAMC,IAAID,KAAKE,WAAL,EAAV;AACA,SAAOD,EAAEE,UAAF,CAAa,IAAb,IAAqBF,CAArB,GAAyB,OAAOA,CAAvC;AACD,CAHD;;AAKA;AACA,IAAML,MAAkB,YAAM;AAC5B,MAAIQ,cAAJ;AACA,SAAO,YAAM;AACX,QAAIA,KAAJ,EAAW,OAAOA,KAAP;AACX,QAAMC,MAAMC,OAAOC,IAAP,gBAAkB,QAAlB,CAAZ;AACA,QAAMV,aAAa,EAAnB;AACA,QAAMW,UAAU,EAAhB;AACA,QAAIC,IAAI,CAAR;AACA,WAAOA,IAAIJ,IAAIK,MAAf,EAAuB;AACrB,UAAMA,SAASL,IAAIM,YAAJ,CAAiBF,CAAjB,CAAf;AACAA,WAAK,CAAL;AACA,UAAMG,OAAOP,IAAIQ,KAAJ,CAAUJ,CAAV,EAAaA,IAAIC,MAAjB,CAAb;AACA,UAAII,IAAI,CAAR;AACA,UAAMC,eAAeH,KAAKI,SAAL,CAAeF,CAAf,CAArB;AACAA,WAAK,CAAL;AACA,UAAMG,UAASL,KAAKC,KAAL,CAAWC,CAAX,EAAcA,IAAIC,YAAlB,EAAgCG,QAAhC,CAAyC,OAAzC,CAAf;AACAJ,WAAKC,YAAL;AACA,UAAMI,mBAAkBrB,kBACtBc,KAAKC,KAAL,CAAWC,CAAX,EAAcA,IAAI,EAAlB,EAAsBI,QAAtB,CAA+B,KAA/B,CADsB,CAAxB;AAGAJ,WAAK,EAAL;AACA,UAAMM,YAAWR,KAAKD,YAAL,CAAkBG,CAAlB,CAAjB;AACAA,WAAK,CAAL;AACA,UAAMO,WAAUT,KAAKD,YAAL,CAAkBG,CAAlB,CAAhB;AACAA,WAAK,CAAL;AACA,UAAMQ,aAAYV,KAAKC,KAAL,CAAWC,CAAX,CAAlB;AACA,UAAMS,QAA2B;AAC/BN,uBAD+B;AAE/BE,yCAF+B;AAG/BC,2BAH+B;AAI/BC,yBAJ+B;AAK/BC,6BAL+B;AAM/BE,cAAMZ;AANyB,OAAjC;AAQAJ,cAAQiB,IAAR,CAAaF,KAAb;AACA1B,iBAAWsB,gBAAX,IAA8BI,KAA9B;AACAd,WAAKC,MAAL;AACD;AACD,QAAMgB,MAAM;AACV3B,YAAM;AAAA,eAAMS,OAAN;AAAA,OADI;AAEVX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,QAAY;AAAA,eAAmBA,WAAWsB,eAAX,CAAnB;AAAA,OAAZ;AAFU,KAAZ;AAIAf,YAAQsB,GAAR;AACA,WAAOA,GAAP;AACD,GA1CD;AA2CD,CA7CsB,EAAvB","file":"erc20.js","sourcesContent":["// @flow\nimport blob from \"../data/erc20.js\";\n\n/**\n * Retrieve the token information by a given contract address if any\n */\nexport const byContractAddress = (contract: string): ?TokenInfo =>\n  get().byContract(asContractAddress(contract));\n\n/**\n * list all the ERC20 tokens informations\n */\nexport const list = (): TokenInfo[] => get().list();\n\nexport type TokenInfo = {\n  contractAddress: string,\n  ticker: string,\n  decimals: number,\n  chainId: number,\n  signature: Buffer,\n  data: Buffer\n};\n\nexport type API = {\n  byContract: string => ?TokenInfo,\n  list: () => TokenInfo[]\n};\n\nconst asContractAddress = (addr: string) => {\n  const a = addr.toLowerCase();\n  return a.startsWith(\"0x\") ? a : \"0x\" + a;\n};\n\n// this internal get() will lazy load and cache the data from the erc20 data blob\nconst get: () => API = (() => {\n  let cache;\n  return () => {\n    if (cache) return cache;\n    const buf = Buffer.from(blob, \"base64\");\n    const byContract = {};\n    const entries = [];\n    let i = 0;\n    while (i < buf.length) {\n      const length = buf.readUInt32BE(i);\n      i += 4;\n      const item = buf.slice(i, i + length);\n      let j = 0;\n      const tickerLength = item.readUInt8(j);\n      j += 1;\n      const ticker = item.slice(j, j + tickerLength).toString(\"ascii\");\n      j += tickerLength;\n      const contractAddress = asContractAddress(\n        item.slice(j, j + 20).toString(\"hex\")\n      );\n      j += 20;\n      const decimals = item.readUInt32BE(j);\n      j += 4;\n      const chainId = item.readUInt32BE(j);\n      j += 4;\n      const signature = item.slice(j);\n      const entry: $Exact<TokenInfo> = {\n        ticker,\n        contractAddress,\n        decimals,\n        chainId,\n        signature,\n        data: item\n      };\n      entries.push(entry);\n      byContract[contractAddress] = entry;\n      i += length;\n    }\n    const api = {\n      list: () => entries,\n      byContract: contractAddress => byContract[contractAddress]\n    };\n    cache = api;\n    return api;\n  };\n})();\n"]}