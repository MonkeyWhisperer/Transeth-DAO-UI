"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getPercentageChangeString = exports.getOverallDifference = void 0;

var _bytes = _interopRequireDefault(require("bytes"));

var _analyzeFiles = _interopRequireWildcard(require("./analyzeFiles"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getOverallStatus = fileResults => {
  return fileResults.reduce((status, fileResult) => {
    if (status === _analyzeFiles.STATUSES.FAIL || fileResult.status === _analyzeFiles.STATUSES.FAIL) {
      return _analyzeFiles.STATUSES.FAIL;
    }

    if (status === _analyzeFiles.STATUSES.WARN || fileResult.status === _analyzeFiles.STATUSES.WARN) {
      return _analyzeFiles.STATUSES.WARN;
    }

    return _analyzeFiles.STATUSES.PASS;
  }, _analyzeFiles.STATUSES.PASS);
};

const getOverallDifference = fullResults => {
  let totalBaseBranchSize = 0;
  let totalFileResultSize = 0;
  let totalAdded = 0;
  let totalRemoved = 0;
  fullResults.forEach(fileResult => {
    totalBaseBranchSize += fileResult.baseBranchSize;
    totalFileResultSize += fileResult.size;

    if (fileResult.size < fileResult.baseBranchSize) {
      totalRemoved += fileResult.baseBranchSize - fileResult.size;
    } else {
      totalAdded += fileResult.size - fileResult.baseBranchSize;
    }
  });
  const percentageChange = totalBaseBranchSize ? (totalFileResultSize - totalBaseBranchSize) / totalBaseBranchSize * 100 : null;
  return {
    totalAdded,
    totalRemoved,
    percentageChange
  };
};

exports.getOverallDifference = getOverallDifference;

const getPercentageChangeString = percentageChange => {
  if (percentageChange === null) {
    return '';
  }

  const percentageChangeFixed = percentageChange.toFixed(1);

  if (percentageChange > 0) {
    return `+${percentageChangeFixed}%`;
  }

  if (percentageChange < 0) {
    return `${percentageChangeFixed}%`;
  }

  return `Â±${percentageChangeFixed}%`;
};

exports.getPercentageChangeString = getPercentageChangeString;

const getSummary = ({
  overallStatus,
  fullResults,
  baseBranchName
}) => {
  if (overallStatus === _analyzeFiles.STATUSES.FAIL) {
    return `maxSize check failed`;
  }

  let differenceSummary = '';

  if (baseBranchName) {
    const {
      totalAdded,
      totalRemoved,
      percentageChange
    } = getOverallDifference(fullResults);
    const percentageChangeString = getPercentageChangeString(percentageChange);
    const percentageChangeStringWithComma = percentageChangeString ? `, ${percentageChangeString}` : '';
    differenceSummary = `(+${(0, _bytes.default)(totalAdded)}, -${(0, _bytes.default)(totalRemoved)}${percentageChangeStringWithComma})`;
  }

  if (overallStatus === _analyzeFiles.STATUSES.WARN) {
    return `File(s) have passed tolerance thresholds ${differenceSummary}`;
  }

  return `Everything is in check ${differenceSummary}`;
};

const analyze = ({
  currentBranchFileDetails,
  baseBranchFileDetails,
  baseBranchName
}) => {
  const fileResults = (0, _analyzeFiles.default)({
    currentBranchFileDetails,
    baseBranchFileDetails,
    baseBranchName
  });
  const overallStatus = getOverallStatus(fileResults);
  const summary = getSummary({
    overallStatus,
    fullResults: fileResults,
    baseBranchName
  });
  return {
    status: overallStatus,
    fullResults: fileResults,
    summary
  };
};

var _default = analyze;
exports.default = _default;