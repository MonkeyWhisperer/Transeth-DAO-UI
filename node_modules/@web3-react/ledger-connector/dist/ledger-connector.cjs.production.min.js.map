{"version":3,"file":"ledger-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport Web3ProviderEngine from 'web3-provider-engine'\nimport { ledgerEthereumBrowserClientFactoryAsync } from '@0x/subproviders/lib/src' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport { LedgerSubprovider } from '@0x/subproviders/lib/src/subproviders/ledger' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js'\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider' // https://github.com/0xProject/0x-monorepo/issues/1400\n\ninterface LedgerConnectorArguments {\n  chainId: number\n  url: string\n  pollingInterval?: number\n  requestTimeoutMs?: number\n  accountFetchingConfigs?: any\n  baseDerivationPath?: string\n}\n\nexport class LedgerConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly url: string\n  private readonly pollingInterval?: number\n  private readonly requestTimeoutMs?: number\n  private readonly accountFetchingConfigs?: any\n  private readonly baseDerivationPath?: string\n\n  private provider: any\n\n  constructor({\n    chainId,\n    url,\n    pollingInterval,\n    requestTimeoutMs,\n    accountFetchingConfigs,\n    baseDerivationPath\n  }: LedgerConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.url = url\n    this.pollingInterval = pollingInterval\n    this.requestTimeoutMs = requestTimeoutMs\n    this.accountFetchingConfigs = accountFetchingConfigs\n    this.baseDerivationPath = baseDerivationPath\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.provider) {\n      const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval })\n      engine.addProvider(\n        new LedgerSubprovider({\n          networkId: this.chainId,\n          ledgerEthereumClientFactoryAsync: ledgerEthereumBrowserClientFactoryAsync,\n          accountFetchingConfigs: this.accountFetchingConfigs,\n          baseDerivationPath: this.baseDerivationPath\n        })\n      )\n      engine.addProvider(new CacheSubprovider())\n      engine.addProvider(new RPCSubprovider(this.url, this.requestTimeoutMs))\n      this.provider = engine\n    }\n\n    this.provider.start()\n\n    return { provider: this.provider, chainId: this.chainId }\n  }\n\n  public async getProvider(): Promise<Web3ProviderEngine> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return this.provider._providers[0].getAccountsAsync(1).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.stop()\n  }\n}\n"],"names":["chainId","url","pollingInterval","requestTimeoutMs","accountFetchingConfigs","baseDerivationPath","supportedChainIds","activate","this","provider","engine","Web3ProviderEngine","addProvider","LedgerSubprovider","networkId","ledgerEthereumClientFactoryAsync","ledgerEthereumBrowserClientFactoryAsync","CacheSubprovider","RPCSubprovider","start","getProvider","getChainId","getAccount","_providers","getAccountsAsync","then","accounts","deactivate","stop","AbstractConnector"],"mappings":"kiBA4BIA,IAAAA,QACAC,IAAAA,IACAC,IAAAA,gBACAC,IAAAA,iBACAC,IAAAA,uBACAC,IAAAA,wCAEM,CAAEC,kBAAmB,CAACN,YAEvBA,QAAUA,IACVC,IAAMA,IACNC,gBAAkBA,IAClBC,iBAAmBA,IACnBC,uBAAyBA,IACzBC,mBAAqBA,+GAGfE,4BACNC,KAAKC,SAAU,KACZC,EAAS,IAAIC,EAAmB,CAAET,gBADrCM,KAC2DN,kBAC9DQ,EAAOE,YACL,IAAIC,oBAAkB,CACpBC,UAJDN,KAIiBR,QAChBe,iCAAkCC,0CAClCZ,uBANDI,KAM8BJ,uBAC7BC,mBAPDG,KAO0BH,sBAG7BK,EAAOE,YAAY,IAAIK,GACvBP,EAAOE,YAAY,IAAIM,iBAXpBV,KAWwCP,IAXxCO,KAWkDL,mBAXlDK,KAYEC,SAAWC,SAZbF,KAeAC,SAASU,wBAEP,CAAEV,SAjBJD,KAiBmBC,SAAUT,QAjB7BQ,KAiB2CR,gDAGrCoB,kDACJZ,KAAKC,gDAGDY,iDACJb,KAAKR,+CAGDsB,iDACJd,KAAKC,SAASc,WAAW,GAAGC,iBAAiB,GAAGC,MAAK,SAACC,UAA+BA,EAAS,6CAGhGC,WAAA,gBACAlB,SAASmB,WA9DmBC"}